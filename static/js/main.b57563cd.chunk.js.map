{"version":3,"sources":["test2.jpg","index.js"],"names":["module","exports","jimp","require","colors","black","onyx","charcoal","concrete","quicksilver","bleach","rich_brown","mushroom","sand","natural","navy","ultramarine","lagoon","cerulean","cornflower","cyan","peacock","aruba","lake","seafoam","reef","teal","pine","kelly","jade","turf","lime","goldenrod","yellow","sunflower","carmel","clementine","living_coral","persimmon","red_orange","red","burnt_orange","rust","maroon","deep_pink","hibiscus","blush","peach","lavender","iris","purple","royal_purple","moose","violet","green_apple","carrot","lapis","parrot","french_blue","firstrun","colorsFreq","Array","colorsArray","i","length","Object","values","nearestColor","from","src","DisplayLogoImg","className","this","props","output","alt","React","Component","Linkform","type","onChange","ScaleForm","onChangeX","onChangeY","ProcessButton","onClick","imagesLoaded","SubmitButton","DownloadButton","ConvertButton","Editor","handleProcessButtonClick","jimpLogoCreation","state","scaleX","scaleY","handleConvertButtonClick","console","log","handleSubmitButtonClick","setState","dropboxLink","handleDownloadButtonClick","handleLinkChange","target","value","slice","picture","myRef","createRef","onDrop","bind","onScaleFormChangeX","onScaleFormChangeY","prevProps","prevState","URL","createObjectURL","event","parseInt","undefined","withIcon","buttonText","label","fileContainerStyle","backgroundColor","singleImage","imgExtension","maxFileSize","path","posBool","pos","scale","grayscale","numColors","read","err","image","localColors","resize","AUTO","posterize","greyscale","getFirstColor","scan","bitmap","width","height","x","y","idx","redHex","data","toString","padStart","greenHex","blueHex","close","sort","a","b","getNewColor","closeRed","substr","closeGreen","closeBlue","getBase64","Jimp","MIME_BMP","renderLinkForm","renderSubmitButton","renderImageUploader","renderScaleForm","renderProcessButton","renderLogoImage","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b57563cd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/test2.8b1bda72.jpg\";","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.css';\n//import './style/_buttons.scss';\nimport ImageUploader from 'react-images-upload';\nimport Jimp from 'jimp/es';\n\nvar jimp = require('jimp');\n\n\n//Three global color data structures, one a map of objects, one an array,\n//and one a 2D array\n//TODO: Downscale to remove map of objects, unneeded\nvar colors = {\n  black: '#000000',\n  onyx: '#333538',\n  charcoal: '#5f6468',\n  concrete: '#97a0a7',\n  quicksilver: '#e4e5e6',\n  bleach: '#ffffff',\n  rich_brown: '#372820',\n  mushroom: '#716257',\n  sand: '#bab3a0',\n  natural: '#f9f4ec',\n  navy: '#081e2c',\n  ultramarine: '#29217d',\n  lagoon: '#003e66',\n  cerulean: '#0169ca',\n  cornflower: '#529afc',\n  cyan: '#009ff1',\n  peacock: '#01aec9',\n  aruba: '#9dfbe7',\n  lake: '#6ac4dd',\n  seafoam: '#4ca696',\n  reef: '#00947d',\n  teal: '#007171',\n  pine: '#2b4423',\n  kelly: '#21772f',\n  jade: '#14b25a',\n  turf: '#60933b',\n  lime: '#a0ce3e',\n  goldenrod: '#d5d03a',\n  yellow: '#fff71b',\n  sunflower: '#ffc938',\n  carmel: '#d8a15e',\n  clementine: '#ff9a23',\n  living_coral: '#fb686d',\n  persimmon: '#fd5130',\n  red_orange: '#db1d3c',\n  red: '#c50f2d',\n  burnt_orange: '#a84c28',\n  rust: '#763742',\n  maroon: '#581c32',\n  deep_pink: '#c40876',\n  hibiscus: '#de4b9b',\n  blush: '#fdaeca',\n  peach: '#f7bfab',\n  lavender: '#a08dd6',\n  iris: '#77479f',\n  purple: '#5d1e5c',\n  royal_purple: '#401e72',\n  moose: '#653c2c',\n  violet: '#6753b2',\n  green_apple: '#76c727',\n  carrot: '#fd673e',\n  lapis: '#3c2f8f',\n  parrot: '#2fd078',\n  french_blue: '#638ee4',\n};\n\nvar firstrun = true;\n\n//TODO: Move initialization of arrays to seperate function\nvar colorsFreq = new Array(54);\nvar colorsArray = new Array(54);\n\n//Initialize colorsArray\n//load only hex values of colors into an array\nfor (var i = 0; i < colorsArray.length; i++){\n  colorsArray[i] = Object.values(colors)[i];\n}\n\n//make colorsFreq into a 2D array\nfor (var i = 0; i < colorsFreq.length; i++){\n  colorsFreq[i] = new Array(2);\n}\n\n//Initialize colorsFreq\n//copy array into new 2d array, starting with 0 for all frequencies\nfor (var i = 0; i < colorsFreq.length; i++){\n  colorsFreq[i][0] = colorsArray[i];\n  colorsFreq[i][1] = 0;\n}\n\nvar nearestColor = require('nearest-color').from(colors);\n\n//initialize the default image\nconst src = require(\"./test2.jpg\");\n//janky way around CORS policy for getting from dropbox link, pass through cors-anywhere server\n//var dropboxURL = \"0\"\n//var imgFinal = (\"https://cors-anywhere.herokuapp.com/\" + dropboxURL.slice(0, -1) + \"1\");\n\n//-------------------------------------------------------------\n//Main classes for displaying the output image array\n//-------------------------------------------------------------\nclass DisplayLogoImg extends React.Component{\n  render(){\n    return(\n      <div className=\"workDisplay\">\n        <div className=\"gallery\">\n        Source\n          <img className=\"workImage\" src={this.props.output[0]} alt=\"Source\" />\n        </div>\n        <div className=\"gallery\">\n        Results\n          <img className=\"workImage\" src={this.props.output[1]} alt=\"Result #1\" />\n          <img className=\"workImage\" src={this.props.output[2]} alt=\"Result #1\" />\n          <img className=\"workImage\" src={this.props.output[3]} alt=\"Result #1\" />\n          <img className=\"workImage\" src={this.props.output[3]} alt=\"Result #1\" />\n          <img className=\"workImage\" src={this.props.output[2]} alt=\"Result #3\" />\n          <img className=\"workImage\" src={this.props.output[3]} alt=\"Result #4\" />\n          <img className=\"workImage\" src={this.props.output[4]} alt=\"Result #5\" />\n          <img className=\"workImage\" src={this.props.output[5]} alt=\"Result #6\" />\n          <img className=\"workImage\" src={this.props.output[6]} alt=\"Result #7\" />\n          <img className=\"workImage\" src={this.props.output[7]} alt=\"Result #8\" />\n          <img className=\"workImage\" src={this.props.output[8]} alt=\"Result #9\" />\n          <img className=\"workImage\" src={this.props.output[9]} alt=\"Result #10\" />\n          <img className=\"workImage\" src={this.props.output[10]} alt=\"Result #11\" />\n          <img className=\"workImage\" src={this.props.output[11]} alt=\"Result #12\" />\n          <img className=\"workImage\" src={this.props.output[12]} alt=\"Result #13\" />\n          <img className=\"workImage\" src={this.props.output[13]} alt=\"Result #14\" />\n          <img className=\"workImage\" src={this.props.output[14]} alt=\"Result #15\" />\n          <img className=\"workImage\" src={this.props.output[15]} alt=\"Result #16\" />\n          <img className=\"workImage\" src={this.props.output[16]} alt=\"Result #17\" />\n          <img className=\"workImage\" src={this.props.output[17]} alt=\"Result #18\" />\n          <img className=\"workImage\" src={this.props.output[18]} alt=\"Result #19\" />\n          <img className=\"workImage\" src={this.props.output[19]} alt=\"Result #20\" />\n          <img className=\"workImage\" src={this.props.output[20]} alt=\"Result #21\" />\n          <img className=\"workImage\" src={this.props.output[21]} alt=\"Result #22\" />\n          <img className=\"workImage\" src={this.props.output[22]} alt=\"Result #23\" />\n          <img className=\"workImage\" src={this.props.output[23]} alt=\"Result #24\" />\n          <img className=\"workImage\" src={this.props.output[24]} alt=\"Result #25\" />\n          <img className=\"workImage\" src={this.props.output[25]} alt=\"Result #26\" />\n        </div>\n        {/*\n        <div className=\"gallery\">\n        Scale : Color Correction\n          <img className=\"workImage\" src={this.props.output[1]} alt=\"Result #1\" />\n        </div>\n        <div className=\"gallery\">\n        Scale : Greyscale : Color Correction\n          <img className=\"workImage\" src={this.props.output[2]} alt=\"Result #2\" />\n        </div>\n        <div className=\"gallery\">\n        Scale : Posterize : Color Correction\n          <img className=\"workImage\" src={this.props.output[3]} alt=\"Result #3\" />\n          <img className=\"workImage\" src={this.props.output[4]} alt=\"Result #4\" />\n          <img className=\"workImage\" src={this.props.output[5]} alt=\"Result #5\" />\n          <img className=\"workImage\" src={this.props.output[6]} alt=\"Result #6\" />\n        </div>\n        <div className=\"gallery\">\n        Scale : Color Correction (Reduction)\n          <img className=\"workImage\" src={this.props.output[7]} alt=\"Result #7\" />\n          <img className=\"workImage\" src={this.props.output[8]} alt=\"Result #8\" />\n          <img className=\"workImage\" src={this.props.output[9]} alt=\"Result #9\" />\n          <img className=\"workImage\" src={this.props.output[10]} alt=\"Result #10\" />\n        </div>\n        <div className=\"gallery\">\n        Scale : Posterize : Color Correction (Reduction)\n          <img className=\"workImage\" src={this.props.output[11]} alt=\"Result #11\" />\n          <img className=\"workImage\" src={this.props.output[12]} alt=\"Result #12\" />\n          <img className=\"workImage\" src={this.props.output[13]} alt=\"Result #13\" />\n          <img className=\"workImage\" src={this.props.output[14]} alt=\"Result #14\" />\n        </div>\n        */}\n      </div>\n    )\n  }\n}\n\n//-------------------------------------------------------------\n//Custom classes for each button, passes state up\n//TODO:   Merge all of one type into a single class? [buttons, forms, etc]\n//        Transfer classes into seperate file and import it\n//-------------------------------------------------------------\n\nclass Linkform extends React.Component {\n  render() {\n    return (\n      <form className=\"myForm\">\n        <label>\n          Dropbox Link:\n          <input type=\"text\" onChange={this.props.onChange}/>\n        </label>\n      </form>\n    );\n  }\n}\n\nclass ScaleForm extends React.Component{\n  render(){\n    return(\n      <form className=\"myForm\">\n        <label>\n          Resize X:\n          <input type=\"number\" onChange={this.props.onChangeX} />\n        </label>\n        <label>\n          Resize Y:\n          <input type=\"number\" onChange={this.props.onChangeY} />\n        </label>\n        Leave blank to keep aspect ratio\n      </form>\n    )\n  }\n}\n\n//TODO: Change hardcoded max images to variable\nclass ProcessButton extends React.Component{\n  render(){\n    return(\n      <div>\n        <button className=\"myButton\" onClick={() => this.props.onClick()}>Process Logo</button>\n        Loaded {this.props.imagesLoaded}/26 images\n      </div>\n    )\n  }\n}\n\nclass SubmitButton extends React.Component{\n  render(){\n    return(\n      <button className=\"myButton\" onClick={() => this.props.onClick()}>Submit Link</button>\n    )\n  }\n}\n\nclass DownloadButton extends React.Component{\n  render(){\n    return(\n      <button onClick={() => this.props.onClick()}>Download BMP</button>\n    )\n  }\n}\n\nclass ConvertButton extends React.Component{\n  render(){\n    return(\n      <button onClick={() => this.props.onClick()}>Debug v2</button>\n    )\n  }\n}\n\n//-------------------------------------------------------------\n//Main editor app class, contains most info in state\n//-------------------------------------------------------------\nclass Editor extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      //value that holds the path to default image, then the base64 data of render\n      //base64 used by Jimp, since it is a web-based app. Local files caused issues.\n      picture: src,\n      //Array of output pictures\n      output: [],\n      dropboxLink: \"\",\n      scaleX: 0,\n      scaleY: 0,\n      imagesLoaded: 0,\n    };\n    this.myRef = React.createRef();\n    //TODO: Bind these functions in their declaration, similar to handleX functions\n    this.onDrop = this.onDrop.bind(this);\n    this.onScaleFormChangeX = this.onScaleFormChangeX.bind(this);\n    this.onScaleFormChangeY = this.onScaleFormChangeY.bind(this);\n  }\n\n  componentDidUpdate(prevProps, prevState){\n    if (prevState.output !== this.state.output){\n      console.log(\"output state has changed: \" + this.state.output[0]);\n    }\n  }\n\n  //-------------------------------------------------------------\n  //Functions to handle events when different buttons are clicked\n  //or values are changed\n  //-------------------------------------------------------------\n  handleProcessButtonClick = () => {\n      //Format: posterize[bool], posterize value, scale[bool], scaleX, scaleY, greyscale[bool], numColors\n      //TODO: format better, into a function or something\n      //      these function calls end up being \"jumbled\", i think due to the async setState,\n      //      so it is difficult to know which is what output in the array\n\n      //Scale : Color Correction\n      this.jimpLogoCreation(this.state.output[0], false, 0, true, this.state.scaleX, this.state.scaleY);\n      //Scale : Greyscale : Color Correction\n      this.jimpLogoCreation(this.state.output[0], false, 0, true, this.state.scaleX, this.state.scaleY, true);\n      //Scale : Color Correction (Reduction)\n      this.jimpLogoCreation(this.state.output[0], false, 0, true, this.state.scaleX, this.state.scaleY, false, 5);\n      this.jimpLogoCreation(this.state.output[0], false, 0, true, this.state.scaleX, this.state.scaleY, false, 4);\n      this.jimpLogoCreation(this.state.output[0], false, 0, true, this.state.scaleX, this.state.scaleY, false, 3);\n      this.jimpLogoCreation(this.state.output[0], false, 0, true, this.state.scaleX, this.state.scaleY, false, 2);\n      //Scale : Posterize : Color Correction\n      this.jimpLogoCreation(this.state.output[0], true, 7, true, this.state.scaleX, this.state.scaleY);\n      this.jimpLogoCreation(this.state.output[0], true, 5, true, this.state.scaleX, this.state.scaleY);\n      this.jimpLogoCreation(this.state.output[0], true, 3, true, this.state.scaleX, this.state.scaleY);\n      this.jimpLogoCreation(this.state.output[0], true, 2, true, this.state.scaleX, this.state.scaleY);\n      //Scale : Posterize : Color Correction (Reduction)\n      this.jimpLogoCreation(this.state.output[0], true, 7, true, this.state.scaleX, this.state.scaleY, false, 5);\n      this.jimpLogoCreation(this.state.output[0], true, 7, true, this.state.scaleX, this.state.scaleY, false, 4);\n      this.jimpLogoCreation(this.state.output[0], true, 7, true, this.state.scaleX, this.state.scaleY, false, 3);\n      this.jimpLogoCreation(this.state.output[0], true, 7, true, this.state.scaleX, this.state.scaleY, false, 2);\n      this.jimpLogoCreation(this.state.output[0], true, 5, true, this.state.scaleX, this.state.scaleY, false, 5);\n      this.jimpLogoCreation(this.state.output[0], true, 5, true, this.state.scaleX, this.state.scaleY, false, 4);\n      this.jimpLogoCreation(this.state.output[0], true, 5, true, this.state.scaleX, this.state.scaleY, false, 4);\n      this.jimpLogoCreation(this.state.output[0], true, 5, true, this.state.scaleX, this.state.scaleY, false, 3);\n      this.jimpLogoCreation(this.state.output[0], true, 3, true, this.state.scaleX, this.state.scaleY, false, 5);\n      this.jimpLogoCreation(this.state.output[0], true, 3, true, this.state.scaleX, this.state.scaleY, false, 4);\n      this.jimpLogoCreation(this.state.output[0], true, 3, true, this.state.scaleX, this.state.scaleY, false, 3);\n      this.jimpLogoCreation(this.state.output[0], true, 3, true, this.state.scaleX, this.state.scaleY, false, 3);\n      this.jimpLogoCreation(this.state.output[0], true, 2, true, this.state.scaleX, this.state.scaleY, false, 5);\n      this.jimpLogoCreation(this.state.output[0], true, 2, true, this.state.scaleX, this.state.scaleY, false, 4);\n      this.jimpLogoCreation(this.state.output[0], true, 2, true, this.state.scaleX, this.state.scaleY, false, 3);\n      this.jimpLogoCreation(this.state.output[0], true, 2, true, this.state.scaleX, this.state.scaleY, false, 2);\n  }\n\n  handleConvertButtonClick = (i) => {\n    //NOTE - THIS RETURNS THE VALUE, NO NEED FOR .VALUE\n    console.log(colorsArray);\n    console.log(colorsFreq);\n\n  }\n\n  handleSubmitButtonClick = (i) => {\n    console.log(\"Submit Button Clicked\");\n    this.setState({\n      output: [this.state.dropboxLink],\n    });\n  }\n\n  handleDownloadButtonClick = (i) => {\n    console.log(\"Download Button Clicked\");\n  }\n\n  handleLinkChange = (i) => {\n    this.setState({\n      dropboxLink: \"https://cors-anywhere.herokuapp.com/\" + i.target.value.slice(0, -1) + \"1\",\n    });\n  }\n\n  //picture is an array passed from image uploader\n  //pull most recently uploaded picture from current session\n  //TODO: reformat these functions into handleDrop and handleLinkChange\n  onDrop(picture){\n    //TODO: Insert function calls directly here to auto work on image\n    var localImg = URL.createObjectURL(picture[picture.length - 1]);\n    //Set state for display\n    this.setState({\n      output: [URL.createObjectURL(picture[picture.length - 1])],\n    });\n  }\n\n  onScaleFormChangeX(event){\n    //form takes in a string, need to parse into an Int for use in Jimp\n    this.setState({\n      scaleX: parseInt(event.target.value, 10)\n    });\n  }\n\n  onScaleFormChangeY(event){\n    //form takes in a string, need to parse into an Int for use in Jimp\n    this.setState({\n      scaleY: parseInt(event.target.value, 10)\n    });\n  }\n\n  //-------------------------------------------------------------\n  //render functions for each visible element\n  //TODO: combine everything in the same div into one render function\n  //like buttons for control panel and such\n  //-------------------------------------------------------------\n\n  renderLogoImage(){\n    if (this.state.output[0] !== undefined)\n    return (\n      <div>\n        <DisplayLogoImg\n          picture={this.state.picture}\n          output={this.state.output}\n        />\n      </div>\n    )\n  }\n\n  renderProcessButton(i){\n    return(\n      <ProcessButton\n        onClick={this.handleProcessButtonClick}\n        imagesLoaded={this.state.imagesLoaded}\n      />\n    )\n  }\n\n  renderSubmitButton(i){\n    return(\n      <SubmitButton\n        onClick={this.handleSubmitButtonClick}\n      />\n    )\n  }\n\n  renderDownloadButton(i){\n    return(\n      <DownloadButton\n        onClick={this.handleDownloadButtonClick}\n      />\n    )\n  }\n\n  renderConvertButton(i){\n    return(\n      <ConvertButton\n        onClick={this.handleConvertButtonClick}\n      />\n    )\n  }\n\n  renderScaleForm(i){\n    return(\n      <ScaleForm\n        onChangeX={this.onScaleFormChangeX}\n        onChangeY={this.onScaleFormChangeY}\n      />\n    )\n  }\n\n  renderImageUploader(){\n    return(\n      <ImageUploader\n        withIcon={true}\n        buttonText='Choose image'\n        label=\"Max file size: 5mb, Filetypes accepted: .bmp | .jpg | .png\"\n        fileContainerStyle={{backgroundColor: \"grey\"}}\n        singleImage={true}\n        onChange={this.onDrop}\n        imgExtension={['.jpg', '.gif', '.png', '.bmp']}\n        maxFileSize={5242880}\n      />\n    )\n  }\n\n  renderLinkForm(){\n    return(\n      <Linkform onChange={this.handleLinkChange}/>\n    )\n  }\n\n\n  //-------------------------------------------------------------\n  //Functions to do the actual editing on the image\n  //-------------------------------------------------------------\n  jimpLogoCreation(path, posBool, pos, scale, scaleX, scaleY, grayscale, numColors){\n    jimp.read(path, function(err, image) {\n      //create local array of colors and populate it from global\n      //TODO: Check if need to unallocate memory here\n      var localColors = new Array(54);\n      if (localColors[0] === undefined){\n        for (var i = 0; i < colorsArray.length; i++){\n          localColors[i] = colorsArray[i];\n        }\n      }\n\n      if (scale){\n        if (scaleX === 0){\n          if (scaleY === 0){\n            //if both fields are not input, scale to 100 X and scale Y according to aspect ratio\n            console.log(\"Found no size variables\");\n            image.resize(100, jimp.AUTO);\n          }\n          else {\n            //if only the Y vaue is input,\n            console.log(\"Only found y value\");\n            image.resize(jimp.AUTO, scaleY);\n          }\n        }\n        else if (scaleY === 0){\n          if (scaleX === 0){\n            //if both fields are not input, scale to 100 X and scale Y according to aspect ratio\n            console.log(\"Found no size variables\");\n            image.resize(100, jimp.AUTO);\n          }\n          else {\n            //if only the X vaue is input,\n            console.log(\"Only found x value\");\n            image.resize(scaleX, jimp.AUTO);\n          }\n        }\n        //if both values are input\n        else {\n          console.log(\"Found both size variables\");\n          image.resize(scaleX, scaleY);\n        }\n      }\n\n      if (posBool)\n        image.posterize(pos);\n      if (grayscale)\n        image.greyscale();\n\n      //initialize getNewColor with new colorsArray\n      var getFirstColor = nearestColor.from(colorsArray);\n\n      //function to scan for most popular colors in image, only do on first run\n      if (firstrun){\n        console.log('Calculating most popular colors....')\n        image.scan(0, 0, image.bitmap.width, image.bitmap.height, function(x, y, idx) {\n          //First log RGB value of current pixel, toString(16) converts\n          //into hex form, padStart for 1 digit values\n          //var position = [x, y];\n          //red\n          var red = this.bitmap.data[idx];\n          var redHex = red.toString(16).padStart(2, \"0\");\n          //green\n          var green = this.bitmap.data[idx + 1];\n          var greenHex = green.toString(16).padStart(2, \"0\");\n          //blue\n          var blue = this.bitmap.data[idx + 2];\n          var blueHex = blue.toString(16).padStart(2, \"0\");\n\n          //Run nearestColor on this pixel\n          var close = getFirstColor('#' + redHex + greenHex + blueHex);\n\n          //future timesave: Don't run this every time, only log frequency\n          //the first time you parse the image\n          for (var i = 0; i < colorsFreq.length; i++){\n            if (colorsFreq[i][0] === close){\n              colorsFreq[i][1]++;\n            }\n          }\n        })\n        firstrun = false;\n\n        //sort colorsFreq by frequency\n        colorsFreq.sort(sortFunction);\n        function sortFunction(a, b){\n          if (a[1] === b[1]) {\n            return 0;\n          }\n          else {\n            return (a[1] > b[1]) ? -1 : 1;\n          }\n        }\n      }\n\n      if (numColors !== undefined){\n        localColors.length = numColors;\n        //update colorsArray with new color order,\n        //important for removing correct colors when downsizing\n        for (var i = 0; i < numColors; i++){\n          localColors[i] = colorsFreq[i][0];\n        }\n        console.log(\"localColors Updated: \" + localColors);\n      }\n\n      //\n      var getNewColor = nearestColor.from(localColors);\n\n      //Function to replace colors with our palette\n      image.scan(0, 0, image.bitmap.width, image.bitmap.height, function(x, y, idx) {\n        //First log RGB value of current pixel, toString(16) converts\n        //into hex form, padStart for 1 digit values\n        //var position = [x, y];\n        //red\n        var red = this.bitmap.data[idx];\n        var redHex = red.toString(16).padStart(2, \"0\");\n        //green\n        var green = this.bitmap.data[idx + 1];\n        var greenHex = green.toString(16).padStart(2, \"0\");\n        //blue\n        var blue = this.bitmap.data[idx + 2];\n        var blueHex = blue.toString(16).padStart(2, \"0\");\n\n        //Run nearestColor on this pixel\n        var close = getNewColor('#' + redHex + greenHex + blueHex);\n\n        var closeRed = parseInt(close.substr(1,2), 16);\n        var closeGreen = parseInt(close.substr(3,2), 16);\n        var closeBlue = parseInt(close.substr(5,2), 16);\n\n        //Change pixel colors into nearest from our palette\n        //red\n        this.bitmap.data[idx] = closeRed;\n        //green\n        this.bitmap.data[idx + 1] = closeGreen;\n        //blue\n        this.bitmap.data[idx + 2] = closeBlue;\n      })\n\n      //add result to output array\n      image.getBase64(Jimp.MIME_BMP, function(err, data){\n        this.setState(prevState => ({\n          output: [...prevState.output, data],\n          imagesLoaded: prevState.imagesLoaded + 1,\n        }))\n        console.log(\"image added \" + this.state.imagesLoaded);\n      }.bind(this));\n\n      //apply edited image to picture state\n      /*\n      image.getBase64(Jimp.MIME_BMP, function(err, data){\n        this.setState({\n          picture: data,\n        });\n      }.bind(this));\n      */\n\n\n    }.bind(this));\n  }\n  //-------------------------------------------------------------\n  //Final render of the application\n  //-------------------------------------------------------------\n  render() {\n    return (\n      <div>\n        <div className=\"panelDisplay\">\n          {this.renderLinkForm()}\n          {this.renderSubmitButton()}\n          {this.renderImageUploader()}\n          {this.renderScaleForm()}\n          {this.renderProcessButton()}\n        </div>\n        <div className=\"workDisplay\">\n          {this.renderLogoImage()}\n        </div>\n      </div>\n    );\n  }\n}\n\n\n//-------------------------------------------------------------\n//Overreaching App class, not nessecary at the moment but may be used later\n//-------------------------------------------------------------\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"app-img\">\n          <Editor />\n        </div>\n        <div className=\"img-fields\">\n          <div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n\n//-------------------------------------------------------------\n//Final DOM render, required by React\n//-------------------------------------------------------------\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}