{"version":3,"sources":["test2.jpg","index.js"],"names":["module","exports","jimp","require","colors","black","onyx","charcoal","concrete","quicksilver","bleach","rich_brown","mushroom","sand","natural","navy","ultramarine","lagoon","cerulean","cornflower","cyan","peacock","aruba","lake","seafoam","reef","teal","pine","kelly","jade","turf","lime","goldenrod","yellow","sunflower","carmel","clementine","living_coral","persimmon","red_orange","red","burnt_orange","rust","maroon","deep_pink","hibiscus","blush","peach","lavender","iris","purple","royal_purple","moose","violet","green_apple","carrot","lapis","parrot","french_blue","outputImages","Array","firstrun","sourceImg","sourceColorChange","colorsFreq","colorsArray","i","length","Object","values","nearestColor","from","src","DisplayLogoImg","className","alt","React","Component","Linkform","type","onChange","this","props","ScaleForm","onChangeX","onChangeY","StretchForm","ProcessButton","onClick","SubmitButton","DownloadButton","ColorChangeButton","Editor","handleSubmitButtonClick","console","log","state","dropboxLink","handleDownloadButtonClick","handleLinkChange","setState","target","value","slice","picture","output","scaleX","scaleY","imagesLoaded","stretch","myRef","createRef","onDrop","bind","onScaleFormChangeX","onScaleFormChangeY","onStretchFormChange","onProcessButtonClick","onColorChangeButtonClick","prevProps","prevState","localImg","URL","createObjectURL","push","event","parseInt","checked","jimpResize","jimpLogoCreationAsync","undefined","withIcon","buttonText","label","fileContainerStyle","backgroundColor","singleImage","imgExtension","maxFileSize","path","scale","read","image","resize","AUTO","RESIZE_BEZIER","newHeight","Math","round","bitmap","height","width","getBase64Async","Jimp","MIME_BMP","data","posBool","pos","grayscale","numColors","onlyColorBool","sortFunction","localColors","posterize","greyscale","getFirstColor","a","b","scan","x","y","idx","redHex","toString","padStart","greenHex","blueHex","close","sort","getNewColor","closeRed","substr","closeGreen","closeBlue","forceUpdate","renderLinkForm","renderSubmitButton","renderImageUploader","renderScaleForm","renderStretchForm","renderProcessButton","renderColorChangeButton","renderLogoImage","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cb208bf6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/test2.8b1bda72.jpg\";","//TODO/NOTES:\n//instead of storing results in state, use global array\n//maybe 2d array for properties? idk\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.css';\n//import './style/_buttons.scss';\nimport ImageUploader from 'react-images-upload';\nimport Jimp from 'jimp/es';\n\nvar jimp = require('jimp');\n\n\n//Three global color data structures, one a map of objects, one an array,\n//and one a 2D array\n//TODO: Downscale to remove map of objects, unneeded\nvar colors = {\n  black: '#000000',\n  onyx: '#333538',\n  charcoal: '#5f6468',\n  concrete: '#97a0a7',\n  quicksilver: '#e4e5e6',\n  bleach: '#ffffff',\n  rich_brown: '#372820',\n  mushroom: '#716257',\n  sand: '#bab3a0',\n  natural: '#f9f4ec',\n  navy: '#081e2c',\n  ultramarine: '#29217d',\n  lagoon: '#003e66',\n  cerulean: '#0169ca',\n  cornflower: '#529afc',\n  cyan: '#009ff1',\n  peacock: '#01aec9',\n  aruba: '#9dfbe7',\n  lake: '#6ac4dd',\n  seafoam: '#4ca696',\n  reef: '#00947d',\n  teal: '#007171',\n  pine: '#2b4423',\n  kelly: '#21772f',\n  jade: '#14b25a',\n  turf: '#60933b',\n  lime: '#a0ce3e',\n  goldenrod: '#d5d03a',\n  yellow: '#fff71b',\n  sunflower: '#ffc938',\n  carmel: '#d8a15e',\n  clementine: '#ff9a23',\n  living_coral: '#fb686d',\n  persimmon: '#fd5130',\n  red_orange: '#db1d3c',\n  red: '#c50f2d',\n  burnt_orange: '#a84c28',\n  rust: '#763742',\n  maroon: '#581c32',\n  deep_pink: '#c40876',\n  hibiscus: '#de4b9b',\n  blush: '#fdaeca',\n  peach: '#f7bfab',\n  lavender: '#a08dd6',\n  iris: '#77479f',\n  purple: '#5d1e5c',\n  royal_purple: '#401e72',\n  moose: '#653c2c',\n  violet: '#6753b2',\n  green_apple: '#76c727',\n  carrot: '#fd673e',\n  lapis: '#3c2f8f',\n  parrot: '#2fd078',\n  french_blue: '#638ee4',\n};\n\nvar outputImages = new Array();\nvar firstrun = true;\nvar sourceImg = \"\";\nvar sourceColorChange = \"\";\n\n//TODO: Move initialization of arrays to seperate function\nvar colorsFreq = new Array(54);\nvar colorsArray = new Array(54);\n\n//Initialize colorsArray\n//load only hex values of colors into an array\nfor (var i = 0; i < colorsArray.length; i++){\n  colorsArray[i] = Object.values(colors)[i];\n}\n\n//make colorsFreq into a 2D array\nfor (var i = 0; i < colorsFreq.length; i++){\n  colorsFreq[i] = new Array(2);\n}\n\n//Initialize colorsFreq\n//copy array into new 2d array, starting with 0 for all frequencies\nfor (var i = 0; i < colorsFreq.length; i++){\n  colorsFreq[i][0] = colorsArray[i];\n  colorsFreq[i][1] = 0;\n}\n\nvar nearestColor = require('nearest-color').from(colors);\n\n//initialize the default image\nconst src = require(\"./test2.jpg\");\n//janky way around CORS policy for getting from dropbox link, pass through cors-anywhere server\n//var dropboxURL = \"0\"\n//var imgFinal = (\"https://cors-anywhere.herokuapp.com/\" + dropboxURL.slice(0, -1) + \"1\");\n\n//-------------------------------------------------------------\n//Main classes for displaying the output image array\n//-------------------------------------------------------------\nclass DisplayLogoImg extends React.Component{\n  render(){\n    return(\n      <div className=\"workDisplay\">\n        <div className=\"gallery\">\n          <h1>Source</h1>\n          <img className=\"workImage\" src={sourceImg} alt=\"Source\" />\n        </div>\n        <div className=\"gallery\">\n          <h1>Results</h1>\n          <h2>Scaled</h2>\n          <img className=\"workImage\" src={outputImages[0]} alt=\"Result #1\" />\n          <h2>Scaled + Our Colors</h2>\n          <img className=\"workImage\" src={outputImages[1]} alt=\"Result #1\" />\n          <h2>Scaled + Greyscale + Our Colors</h2>\n          <img className=\"workImage\" src={outputImages[2]} alt=\"Result #1\" />\n          <h2>Scaled + Our Colors (Max 5,4,3,2)</h2>\n          <img className=\"workImage\" src={outputImages[3]} alt=\"Result #1\" />\n          <img className=\"workImage\" src={outputImages[4]} alt=\"Result #1\" />\n          <img className=\"workImage\" src={outputImages[5]} alt=\"Result #1\" />\n          <img className=\"workImage\" src={outputImages[6]} alt=\"Result #1\" />\n          <h2>Scaled + Posterized (Values 7-5-3-2) + Our Colors</h2>\n          <img className=\"workImage\" src={outputImages[7]} alt=\"Result #1\" />\n          <img className=\"workImage\" src={outputImages[8]} alt=\"Result #1\" />\n          <img className=\"workImage\" src={outputImages[9]} alt=\"Result #1\" />\n          <img className=\"workImage\" src={outputImages[10]} alt=\"Result #1\" />\n          <h2>Scaled + Posterized (Value 7) + Our Colors (Max 5,4,3,2)</h2>\n          <img className=\"workImage\" src={outputImages[11]} alt=\"Result #1\" />\n          <img className=\"workImage\" src={outputImages[12]} alt=\"Result #1\" />\n          <img className=\"workImage\" src={outputImages[13]} alt=\"Result #1\" />\n          <img className=\"workImage\" src={outputImages[14]} alt=\"Result #1\" />\n          <h2>Scaled + Posterized (Value 5) + Our Colors (Max 5,4,3,2)</h2>\n          <img className=\"workImage\" src={outputImages[15]} alt=\"Result #1\" />\n          <img className=\"workImage\" src={outputImages[16]} alt=\"Result #1\" />\n          <img className=\"workImage\" src={outputImages[17]} alt=\"Result #1\" />\n          <img className=\"workImage\" src={outputImages[18]} alt=\"Result #1\" />\n          <h2>Scaled + Posterized (Value 3) + Our Colors (Max 5,4,3,2)</h2>\n          <img className=\"workImage\" src={outputImages[19]} alt=\"Result #1\" />\n          <img className=\"workImage\" src={outputImages[20]} alt=\"Result #1\" />\n          <img className=\"workImage\" src={outputImages[21]} alt=\"Result #1\" />\n          <img className=\"workImage\" src={outputImages[22]} alt=\"Result #1\" />\n          <h2>Scaled + Posterized (Value 2) + Our Colors (Max 5,4,3,2)</h2>\n          <img className=\"workImage\" src={outputImages[23]} alt=\"Result #1\" />\n          <img className=\"workImage\" src={outputImages[24]} alt=\"Result #1\" />\n          <img className=\"workImage\" src={outputImages[25]} alt=\"Result #1\" />\n          <img className=\"workImage\" src={outputImages[26]} alt=\"Result #1\" />\n        </div>\n      </div>\n    )\n  }\n}\n\n//-------------------------------------------------------------\n//Custom classes for each button, passes state up\n//TODO:   Merge all of one type into a single class? [buttons, forms, etc]\n//        Transfer classes into seperate file and import it\n//-------------------------------------------------------------\n\nclass Linkform extends React.Component {\n  render() {\n    return (\n      <form className=\"myForm\">\n        <label>\n          Dropbox Link:\n          <input type=\"text\" onChange={this.props.onChange}/>\n        </label>\n      </form>\n    );\n  }\n}\n\nclass ScaleForm extends React.Component{\n  render(){\n    return(\n      <form className=\"myForm\">\n        <label>\n          Resize X:\n          <input type=\"number\" onChange={this.props.onChangeX} />\n        </label>\n        <label>\n          Resize Y:\n          <input type=\"number\" onChange={this.props.onChangeY} />\n        </label>\n        Leave blank to keep aspect ratio\n      </form>\n    )\n  }\n}\n\nclass StretchForm extends React.Component{\n  render(){\n    return(\n      <form className=\"myForm\">\n        <label>\n          Stretch 25% vertically?:\n          <input type=\"checkbox\" onChange={this.props.onChange} />\n        </label>\n      </form>\n    )\n  }\n}\n\n//TODO: Change hardcoded max images for loading to variable\nclass ProcessButton extends React.Component{\n  render(){\n    return(\n      <div>\n        <button className=\"myButton\" onClick={() => this.props.onClick()}>BMP My Logo!</button>\n      </div>\n    )\n  }\n}\n\nclass SubmitButton extends React.Component{\n  render(){\n    return(\n      <button className=\"myButton\" onClick={() => this.props.onClick()}>Submit Link</button>\n    )\n  }\n}\n\nclass DownloadButton extends React.Component{\n  render(){\n    return(\n      <button onClick={() => this.props.onClick()}>Download BMP</button>\n    )\n  }\n}\n\nclass ColorChangeButton extends React.Component{\n  render(){\n    return(\n      <button className=\"myButton\" onClick={() => this.props.onClick()}>Replace Colors Only</button>\n    )\n  }\n}\n\n//-------------------------------------------------------------\n//Main editor app class, contains most info in state\n//-------------------------------------------------------------\nclass Editor extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      //value that holds the path to default image, then the base64 data of render\n      //base64 used by Jimp, since it is a web-based app. Local files caused issues.\n      picture: src,\n      //Array of output pictures\n      output: [],\n      dropboxLink: \"\",\n      scaleX: 0,\n      scaleY: 0,\n      imagesLoaded: 0,\n      stretch: false,\n    };\n    this.myRef = React.createRef();\n    //TODO: Bind these functions in their declaration, similar to handleX functions\n    this.onDrop = this.onDrop.bind(this);\n    this.onScaleFormChangeX = this.onScaleFormChangeX.bind(this);\n    this.onScaleFormChangeY = this.onScaleFormChangeY.bind(this);\n    this.onStretchFormChange = this.onStretchFormChange.bind(this);\n    this.onProcessButtonClick = this.onProcessButtonClick.bind(this);\n    this.onColorChangeButtonClick = this.onColorChangeButtonClick.bind(this);\n  }\n\n  componentDidUpdate(prevProps, prevState){\n    if (prevState.output !== this.state.output){\n      //console.log(\"output state has changed: \" + this.state.output[0]);\n    }\n  }\n\n  //-------------------------------------------------------------\n  //Functions to handle events when different buttons are clicked\n  //or values are changed\n  //-------------------------------------------------------------\n  handleSubmitButtonClick = (i) => {\n    console.log(\"Submit Button Clicked\");\n    outputImages[0] = this.state.dropboxLink;\n    sourceImg = this.state.dropboxLink;\n    console.log(sourceImg);\n  }\n\n  handleDownloadButtonClick = (i) => {\n    console.log(\"Download Button Clicked\");\n  }\n\n  handleLinkChange = (i) => {\n    this.setState({\n      dropboxLink: \"https://cors-anywhere.herokuapp.com/\" + i.target.value.slice(0, -1) + \"1\",\n    });\n  }\n\n  //picture is an array passed from image uploader\n  //pull most recently uploaded picture from current session\n  //TODO: reformat these functions into handleDrop and handleLinkChange\n\n  onDrop(picture){\n    //TODO: Insert function calls directly here to auto work on image\n    var localImg = URL.createObjectURL(picture[picture.length - 1]);\n    //Set state for display\n    outputImages.push(localImg);\n    sourceImg = localImg;\n    /*\n    this.setState({\n      output: [URL.createObjectURL(picture[picture.length - 1])],\n    });\n    */\n  }\n\n  onScaleFormChangeX(event){\n    //form takes in a string, need to parse into an Int for use in Jimp\n    this.setState({\n      scaleX: parseInt(event.target.value, 10)\n    });\n  }\n\n  onScaleFormChangeY(event){\n    //form takes in a string, need to parse into an Int for use in Jimp\n    this.setState({\n      scaleY: parseInt(event.target.value, 10)\n    });\n  }\n\n  onStretchFormChange(event){\n    //console.log(event.target.checked);\n    this.setState({\n      stretch: event.target.checked,\n    });\n  }\n\n  async onProcessButtonClick(){\n    //Scale image first\n    await this.jimpResize(outputImages[0], true, this.state.scaleX, this.state.scaleY, this.state.stretch);\n    //Scale : Color Correction\n    await this.jimpLogoCreationAsync(outputImages[0], false, 0);\n    //Scale : Greyscale : Color Correction\n    await this.jimpLogoCreationAsync(outputImages[0], false, 0, true);\n    //Scale : Color Correction (Reduction)\n    await this.jimpLogoCreationAsync(outputImages[0], false, 0, false, 5);\n    await this.jimpLogoCreationAsync(outputImages[0], false, 0, false, 4);\n    await this.jimpLogoCreationAsync(outputImages[0], false, 0, false, 3);\n    await this.jimpLogoCreationAsync(outputImages[0], false, 0, false, 2);\n    //Scale : Posterize : Color Correction\n    await this.jimpLogoCreationAsync(outputImages[0], true, 7);\n    await this.jimpLogoCreationAsync(outputImages[0], true, 5);\n    await this.jimpLogoCreationAsync(outputImages[0], true, 3);\n    await this.jimpLogoCreationAsync(outputImages[0], true, 2);\n    //Scale : Posterize : Color Correction (Reduction)\n    await this.jimpLogoCreationAsync(outputImages[0], true, 7, false, 5);\n    await this.jimpLogoCreationAsync(outputImages[0], true, 7, false, 4);\n    await this.jimpLogoCreationAsync(outputImages[0], true, 7, false, 3);\n    await this.jimpLogoCreationAsync(outputImages[0], true, 7, false, 2);\n    await this.jimpLogoCreationAsync(outputImages[0], true, 5, false, 5);\n    await this.jimpLogoCreationAsync(outputImages[0], true, 5, false, 4);\n    await this.jimpLogoCreationAsync(outputImages[0], true, 5, false, 3);\n    await this.jimpLogoCreationAsync(outputImages[0], true, 5, false, 2);\n    await this.jimpLogoCreationAsync(outputImages[0], true, 3, false, 5);\n    await this.jimpLogoCreationAsync(outputImages[0], true, 3, false, 4);\n    await this.jimpLogoCreationAsync(outputImages[0], true, 3, false, 3);\n    await this.jimpLogoCreationAsync(outputImages[0], true, 3, false, 2);\n    await this.jimpLogoCreationAsync(outputImages[0], true, 2, false, 5);\n    await this.jimpLogoCreationAsync(outputImages[0], true, 2, false, 4);\n    await this.jimpLogoCreationAsync(outputImages[0], true, 2, false, 3);\n    await this.jimpLogoCreationAsync(outputImages[0], true, 2, false, 2);\n  }\n\n  async onColorChangeButtonClick(){\n    await this.jimpLogoCreationAsync(outputImages[0], false, 0, false, undefined, true);\n  }\n\n  //-------------------------------------------------------------\n  //render functions for each visible element\n  //TODO: combine everything in the same div into one render function\n  //like buttons for control panel and such\n  //-------------------------------------------------------------\n\n  renderLogoImage(){\n    if (outputImages[25] !== undefined)\n      return (\n        <div>\n          <DisplayLogoImg\n            picture={this.state.picture}\n            output={this.state.output}\n          />\n        </div>\n      )\n    else if (sourceColorChange !== \"\")\n      return (\n        <div className=\"workDisplay\">\n          <img src={sourceColorChange} alt=\"sourceColorChange\"/>\n        </div>\n      )\n  }\n\n  renderProcessButton(i){\n    return(\n      <ProcessButton\n        onClick={this.onProcessButtonClick}\n        imagesLoaded={this.state.imagesLoaded}\n      />\n    )\n  }\n\n  renderSubmitButton(i){\n    return(\n      <SubmitButton\n        onClick={this.handleSubmitButtonClick}\n      />\n    )\n  }\n\n  renderDownloadButton(i){\n    return(\n      <DownloadButton\n        onClick={this.handleDownloadButtonClick}\n      />\n    )\n  }\n\n  renderColorChangeButton(i){\n    return(\n      <ColorChangeButton\n        onClick={this.onColorChangeButtonClick}\n      />\n    )\n  }\n\n  renderScaleForm(i){\n    return(\n      <ScaleForm\n        onChangeX={this.onScaleFormChangeX}\n        onChangeY={this.onScaleFormChangeY}\n      />\n    )\n  }\n\n  renderStretchForm(i){\n    return(\n      <StretchForm\n        onChange={this.onStretchFormChange}\n      />\n    )\n  }\n\n  renderImageUploader(){\n    return(\n      <ImageUploader\n        withIcon={false}\n        buttonText='Choose image'\n        label=\"Max file size: 5mb, Filetypes accepted: .bmp | .jpg | .png\"\n        fileContainerStyle={{backgroundColor: \"EDEEF0\"}}\n        singleImage={true}\n        onChange={this.onDrop}\n        imgExtension={['.jpg', '.gif', '.png', '.bmp']}\n        maxFileSize={5242880}\n      />\n    )\n  }\n\n  renderLinkForm(){\n    return(\n      <Linkform onChange={this.handleLinkChange}/>\n    )\n  }\n\n\n  //-------------------------------------------------------------\n  //Functions to do the actual editing on the image\n  //-------------------------------------------------------------\n  //TODO: Update to using promise\n  async jimpResize(path, scale, scaleX, scaleY, stretch){\n    let image = await jimp.read(path);\n\n    if (scale){\n      if (scaleX === 0){\n        if (scaleY === 0){\n          //if both fields are not input, scale to 100 X and scale Y according to aspect ratio\n          console.log(\"Found no size variables\");\n          image.resize(100, jimp.AUTO, jimp.RESIZE_BEZIER);\n        }\n        else {\n          //if only the Y vaue is input,\n          console.log(\"Only found y value\");\n          image.resize(jimp.AUTO, scaleY, jimp.RESIZE_BEZIER);\n        }\n      }\n      else if (scaleY === 0){\n        if (scaleX === 0){\n          //if both fields are not input, scale to 100 X and scale Y according to aspect ratio\n          console.log(\"Found no size variables\");\n          image.resize(100, jimp.AUTO, jimp.RESIZE_BEZIER);\n        }\n        else {\n          //if only the X vaue is input,\n          console.log(\"Only found x value\");\n          image.resize(scaleX, jimp.AUTO, jimp.RESIZE_BEZIER);\n        }\n      }\n      //if both values are input\n      else {\n        console.log(\"Found both size variables\");\n        image.resize(scaleX, scaleY, jimp.RESIZE_BEZIER);\n      }\n    }\n    if (stretch){\n      var newHeight = Math.round(image.bitmap.height * 1.25);\n      image.resize(image.bitmap.width, newHeight, jimp.RESIZE_BEZIER);\n      console.log(\"Image stretched\");\n    }\n\n    let data = await image.getBase64Async(Jimp.MIME_BMP);\n    outputImages[0] = data;\n  }\n\n  async jimpLogoCreationAsync(path, posBool, pos, grayscale, numColors, onlyColorBool){\n    let image = await jimp.read(path);\n    console.log(\"Image read\");\n\n    //create local array of colors and populate it from global\n    //TODO: Check if need to unallocate memory here\n    var localColors = new Array(54);\n    if (localColors[0] === undefined){\n      for (var i = 0; i < colorsArray.length; i++){\n        localColors[i] = colorsArray[i];\n      }\n    }\n    console.log(\"localColors Initialized\");\n    if (posBool)\n      image.posterize(pos);\n    if (grayscale)\n      image.greyscale();\n\n    //initialize getNewColor with new colorsArray\n    var getFirstColor = nearestColor.from(colorsArray);\n\n    //function to scan for most popular colors in image, only do on first run\n    if (firstrun){\n      console.log('Calculating most popular colors....');\n      image.scan(0, 0, image.bitmap.width, image.bitmap.height, function(x, y, idx) {\n        //First log RGB value of current pixel, toString(16) converts\n        //into hex form, padStart for 1 digit values\n        //var position = [x, y];\n        //red\n        var red = this.bitmap.data[idx];\n        var redHex = red.toString(16).padStart(2, \"0\");\n        //green\n        var green = this.bitmap.data[idx + 1];\n        var greenHex = green.toString(16).padStart(2, \"0\");\n        //blue\n        var blue = this.bitmap.data[idx + 2];\n        var blueHex = blue.toString(16).padStart(2, \"0\");\n\n        //Run nearestColor on this pixel\n        var close = getFirstColor('#' + redHex + greenHex + blueHex);\n\n        //future timesave: Don't run this every time, only log frequency\n        //the first time you parse the image\n        for (var i = 0; i < colorsFreq.length; i++){\n          if (colorsFreq[i][0] === close){\n            colorsFreq[i][1]++;\n          }\n        }\n      })\n      firstrun = false;\n\n      //sort colorsFreq by frequency\n      colorsFreq.sort(sortFunction);\n      function sortFunction(a, b){\n        if (a[1] === b[1]) {\n          return 0;\n        }\n        else {\n          return (a[1] > b[1]) ? -1 : 1;\n        }\n      }\n    }\n\n    console.log(\"Colors Calculated\");\n\n    if (numColors !== undefined){\n      localColors.length = numColors;\n      //update colorsArray with new color order,\n      //important for removing correct colors when downsizing\n      for (var i = 0; i < numColors; i++){\n        localColors[i] = colorsFreq[i][0];\n      }\n      //console.log(\"localColors Updated: \" + localColors);\n    }\n\n    //\n    var getNewColor = nearestColor.from(localColors);\n\n    //Function to replace colors with our palette\n    console.log(\"Replacing colors...\");\n    image.scan(0, 0, image.bitmap.width, image.bitmap.height, function(x, y, idx) {\n      //First log RGB value of current pixel, toString(16) converts\n      //into hex form, padStart for 1 digit values\n      //var position = [x, y];\n      //red\n      var red = this.bitmap.data[idx];\n      var redHex = red.toString(16).padStart(2, \"0\");\n      //green\n      var green = this.bitmap.data[idx + 1];\n      var greenHex = green.toString(16).padStart(2, \"0\");\n      //blue\n      var blue = this.bitmap.data[idx + 2];\n      var blueHex = blue.toString(16).padStart(2, \"0\");\n\n      //Run nearestColor on this pixel\n      var close = getNewColor('#' + redHex + greenHex + blueHex);\n\n      var closeRed = parseInt(close.substr(1,2), 16);\n      var closeGreen = parseInt(close.substr(3,2), 16);\n      var closeBlue = parseInt(close.substr(5,2), 16);\n\n      //Change pixel colors into nearest from our palette\n      //red\n      this.bitmap.data[idx] = closeRed;\n      //green\n      this.bitmap.data[idx + 1] = closeGreen;\n      //blue\n      this.bitmap.data[idx + 2] = closeBlue;\n    })\n\n    console.log(\"Colors Replaced\");\n\n    //add result to output array\n    let data = await image.getBase64Async(Jimp.MIME_BMP);\n    outputImages.push(data);\n\n    if (onlyColorBool)\n      sourceColorChange = data;\n    this.forceUpdate();\n  }\n  //-------------------------------------------------------------\n  //Final render of the application\n  //-------------------------------------------------------------\n  render() {\n    return (\n      <div>\n        <div className=\"selectImageDisplay\">\n          <h1>Select Your Image</h1>\n          {this.renderLinkForm()}\n          {this.renderSubmitButton()}\n          <br></br>\n          <p className=\"or\"> OR</p>\n          <br></br>\n          {this.renderImageUploader()}\n        </div>\n        <div className=\"optionsDisplay\">\n          <h1>Options</h1>\n          {this.renderScaleForm()}\n          {this.renderStretchForm()}\n        </div>\n        <div className=\"buttonDisplay\">\n          {this.renderProcessButton()}\n          <br></br>\n          <p className=\"or\"> OR</p>\n          <br></br>\n          {this.renderColorChangeButton()}\n        </div>\n        <div className=\"workDisplay\">\n          {this.renderLogoImage()}\n        </div>\n      </div>\n    );\n  }\n}\n\n\n//-------------------------------------------------------------\n//Overreaching App class, not nessecary at the moment but may be used later\n//-------------------------------------------------------------\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"app-img\">\n          <Editor />\n        </div>\n        <div className=\"img-fields\">\n          <div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n\n//-------------------------------------------------------------\n//Final DOM render, required by React\n//-------------------------------------------------------------\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}