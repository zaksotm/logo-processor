{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _utils = require(\"@jimp/utils\");\n/**\n * Flip the image horizontally\n * @param {boolean} horizontal a Boolean, if true the image will be flipped horizontally\n * @param {boolean} vertical a Boolean, if true the image will be flipped vertically\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\n\n\nfunction flipFn(horizontal, vertical, cb) {\n  if (typeof horizontal !== 'boolean' || typeof vertical !== 'boolean') return _utils.throwError.call(this, 'horizontal and vertical must be Booleans', cb);\n\n  if (horizontal && vertical) {\n    // shortcut\n    return this.rotate(180, true, cb);\n  }\n\n  var bitmap = Buffer.alloc(this.bitmap.data.length);\n  this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function (x, y, idx) {\n    var _x = horizontal ? this.bitmap.width - 1 - x : x;\n\n    var _y = vertical ? this.bitmap.height - 1 - y : y;\n\n    var _idx = this.bitmap.width * _y + _x << 2;\n\n    var data = this.bitmap.data.readUInt32BE(idx);\n    bitmap.writeUInt32BE(data, _idx);\n  });\n  this.bitmap.data = Buffer.from(bitmap);\n\n  if ((0, _utils.isNodePattern)(cb)) {\n    cb.call(this, null, this);\n  }\n\n  return this;\n}\n\nvar _default = function _default() {\n  return {\n    flip: flipFn,\n    mirror: flipFn\n  };\n};\n\nexports[\"default\"] = _default;","map":{"version":3,"sources":["../src/index.js"],"names":["throwError","horizontal","bitmap","Buffer","_x","_y","vertical","_idx","data","cb","flip","mirror","flipFn"],"mappings":";;;;;;;AAAA,IAAA,MAAA,GAAA,OAAA,CAAA,aAAA,CAAA;AAEA;;;;;;;;;AAOA,SAAA,MAAA,CAAA,UAAA,EAAA,QAAA,EAAA,EAAA,EAA0C;AACxC,MAAI,OAAA,UAAA,KAAA,SAAA,IAAmC,OAAA,QAAA,KAAvC,SAAA,EACE,OAAOA,MAAAA,CAAAA,UAAAA,CAAAA,IAAAA,CAAAA,IAAAA,EAAAA,0CAAAA,EAAP,EAAOA,CAAP;;AAMF,MAAIC,UAAU,IAAd,QAAA,EAA4B;AAC1B;AACA,WAAO,KAAA,MAAA,CAAA,GAAA,EAAA,IAAA,EAAP,EAAO,CAAP;AACD;;AAED,MAAMC,MAAM,GAAGC,MAAM,CAANA,KAAAA,CAAa,KAAA,MAAA,CAAA,IAAA,CAA5B,MAAeA,CAAf;AACA,OAAA,SAAA,CAAA,CAAA,EAAA,CAAA,EAAqB,KAAA,MAAA,CAArB,KAAA,EAAwC,KAAA,MAAA,CAAxC,MAAA,EAA4D,UAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAI1D;AACA,QAAMC,EAAE,GAAGH,UAAU,GAAG,KAAA,MAAA,CAAA,KAAA,GAAA,CAAA,GAAH,CAAA,GAArB,CAAA;;AACA,QAAMI,EAAE,GAAGC,QAAQ,GAAG,KAAA,MAAA,CAAA,MAAA,GAAA,CAAA,GAAH,CAAA,GAAnB,CAAA;;AACA,QAAMC,IAAI,GAAI,KAAA,MAAA,CAAA,KAAA,GAAA,EAAA,GAAD,EAAC,IAAd,CAAA;;AACA,QAAMC,IAAI,GAAG,KAAA,MAAA,CAAA,IAAA,CAAA,YAAA,CAAb,GAAa,CAAb;AAEAN,IAAAA,MAAM,CAANA,aAAAA,CAAAA,IAAAA,EAAAA,IAAAA;AAVF,GAAA;AAaA,OAAA,MAAA,CAAA,IAAA,GAAmBC,MAAM,CAANA,IAAAA,CAAnB,MAAmBA,CAAnB;;AAEA,MAAI,CAAA,GAAA,MAAA,CAAA,aAAA,EAAJ,EAAI,CAAJ,EAAuB;AACrBM,IAAAA,EAAE,CAAFA,IAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAAAA,IAAAA;AACD;;AAED,SAAA,IAAA;AACD;;eAEc,SAAA,QAAA,GAAA;AAAA,SAAO;AACpBC,IAAAA,IAAI,EADgB,MAAA;AAEpBC,IAAAA,MAAM,EAAEC;AAFY,GAAP","sourcesContent":["import { isNodePattern, throwError } from '@jimp/utils';\n\n/**\n * Flip the image horizontally\n * @param {boolean} horizontal a Boolean, if true the image will be flipped horizontally\n * @param {boolean} vertical a Boolean, if true the image will be flipped vertically\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nfunction flipFn(horizontal, vertical, cb) {\n  if (typeof horizontal !== 'boolean' || typeof vertical !== 'boolean')\n    return throwError.call(\n      this,\n      'horizontal and vertical must be Booleans',\n      cb\n    );\n\n  if (horizontal && vertical) {\n    // shortcut\n    return this.rotate(180, true, cb);\n  }\n\n  const bitmap = Buffer.alloc(this.bitmap.data.length);\n  this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n    x,\n    y,\n    idx\n  ) {\n    const _x = horizontal ? this.bitmap.width - 1 - x : x;\n    const _y = vertical ? this.bitmap.height - 1 - y : y;\n    const _idx = (this.bitmap.width * _y + _x) << 2;\n    const data = this.bitmap.data.readUInt32BE(idx);\n\n    bitmap.writeUInt32BE(data, _idx);\n  });\n\n  this.bitmap.data = Buffer.from(bitmap);\n\n  if (isNodePattern(cb)) {\n    cb.call(this, null, this);\n  }\n\n  return this;\n}\n\nexport default () => ({\n  flip: flipFn,\n  mirror: flipFn\n});\n"]},"metadata":{},"sourceType":"script"}