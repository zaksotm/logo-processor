{"ast":null,"code":"'use strict';\n\nmodule.exports = pixelmatch;\n\nfunction pixelmatch(img1, img2, output, width, height, options) {\n  if (!options) options = {};\n  var threshold = options.threshold === undefined ? 0.1 : options.threshold; // maximum acceptable square distance between two colors;\n  // 35215 is the maximum possible value for the YIQ difference metric\n\n  var maxDelta = 35215 * threshold * threshold,\n      diff = 0; // compare each pixel of one image against the other one\n\n  for (var y = 0; y < height; y++) {\n    for (var x = 0; x < width; x++) {\n      var pos = (y * width + x) * 4; // squared YUV distance between colors at this pixel position\n\n      var delta = colorDelta(img1, img2, pos, pos); // the color difference is above the threshold\n\n      if (delta > maxDelta) {\n        // check it's a real rendering difference or just anti-aliasing\n        if (!options.includeAA && (antialiased(img1, x, y, width, height, img2) || antialiased(img2, x, y, width, height, img1))) {\n          // one of the pixels is anti-aliasing; draw as yellow and do not count as difference\n          if (output) drawPixel(output, pos, 255, 255, 0);\n        } else {\n          // found substantial difference not caused by anti-aliasing; draw it as red\n          if (output) drawPixel(output, pos, 255, 0, 0);\n          diff++;\n        }\n      } else if (output) {\n        // pixels are similar; draw background as grayscale image blended with white\n        var val = blend(grayPixel(img1, pos), 0.1);\n        drawPixel(output, pos, val, val, val);\n      }\n    }\n  } // return the number of different pixels\n\n\n  return diff;\n} // check if a pixel is likely a part of anti-aliasing;\n// based on \"Anti-aliased Pixel and Intensity Slope Detector\" paper by V. Vysniauskas, 2009\n\n\nfunction antialiased(img, x1, y1, width, height, img2) {\n  var x0 = Math.max(x1 - 1, 0),\n      y0 = Math.max(y1 - 1, 0),\n      x2 = Math.min(x1 + 1, width - 1),\n      y2 = Math.min(y1 + 1, height - 1),\n      pos = (y1 * width + x1) * 4,\n      zeroes = 0,\n      positives = 0,\n      negatives = 0,\n      min = 0,\n      max = 0,\n      minX,\n      minY,\n      maxX,\n      maxY; // go through 8 adjacent pixels\n\n  for (var x = x0; x <= x2; x++) {\n    for (var y = y0; y <= y2; y++) {\n      if (x === x1 && y === y1) continue; // brightness delta between the center pixel and adjacent one\n\n      var delta = colorDelta(img, img, pos, (y * width + x) * 4, true); // count the number of equal, darker and brighter adjacent pixels\n\n      if (delta === 0) zeroes++;else if (delta < 0) negatives++;else if (delta > 0) positives++; // if found more than 2 equal siblings, it's definitely not anti-aliasing\n\n      if (zeroes > 2) return false;\n      if (!img2) continue; // remember the darkest pixel\n\n      if (delta < min) {\n        min = delta;\n        minX = x;\n        minY = y;\n      } // remember the brightest pixel\n\n\n      if (delta > max) {\n        max = delta;\n        maxX = x;\n        maxY = y;\n      }\n    }\n  }\n\n  if (!img2) return true; // if there are no both darker and brighter pixels among siblings, it's not anti-aliasing\n\n  if (negatives === 0 || positives === 0) return false; // if either the darkest or the brightest pixel has more than 2 equal siblings in both images\n  // (definitely not anti-aliased), this pixel is anti-aliased\n\n  return !antialiased(img, minX, minY, width, height) && !antialiased(img2, minX, minY, width, height) || !antialiased(img, maxX, maxY, width, height) && !antialiased(img2, maxX, maxY, width, height);\n} // calculate color difference according to the paper \"Measuring perceived color difference\n// using YIQ NTSC transmission color space in mobile applications\" by Y. Kotsarenko and F. Ramos\n\n\nfunction colorDelta(img1, img2, k, m, yOnly) {\n  var a1 = img1[k + 3] / 255,\n      a2 = img2[m + 3] / 255,\n      r1 = blend(img1[k + 0], a1),\n      g1 = blend(img1[k + 1], a1),\n      b1 = blend(img1[k + 2], a1),\n      r2 = blend(img2[m + 0], a2),\n      g2 = blend(img2[m + 1], a2),\n      b2 = blend(img2[m + 2], a2),\n      y = rgb2y(r1, g1, b1) - rgb2y(r2, g2, b2);\n  if (yOnly) return y; // brightness difference only\n\n  var i = rgb2i(r1, g1, b1) - rgb2i(r2, g2, b2),\n      q = rgb2q(r1, g1, b1) - rgb2q(r2, g2, b2);\n  return 0.5053 * y * y + 0.299 * i * i + 0.1957 * q * q;\n}\n\nfunction rgb2y(r, g, b) {\n  return r * 0.29889531 + g * 0.58662247 + b * 0.11448223;\n}\n\nfunction rgb2i(r, g, b) {\n  return r * 0.59597799 - g * 0.27417610 - b * 0.32180189;\n}\n\nfunction rgb2q(r, g, b) {\n  return r * 0.21147017 - g * 0.52261711 + b * 0.31114694;\n} // blend semi-transparent color with white\n\n\nfunction blend(c, a) {\n  return 255 + (c - 255) * a;\n}\n\nfunction drawPixel(output, pos, r, g, b) {\n  output[pos + 0] = r;\n  output[pos + 1] = g;\n  output[pos + 2] = b;\n  output[pos + 3] = 255;\n}\n\nfunction grayPixel(img, i) {\n  var a = img[i + 3] / 255,\n      r = blend(img[i + 0], a),\n      g = blend(img[i + 1], a),\n      b = blend(img[i + 2], a);\n  return rgb2y(r, g, b);\n}","map":{"version":3,"sources":["/Users/zakstratton/Documents/logo-processor/node_modules/pixelmatch/index.js"],"names":["module","exports","pixelmatch","img1","img2","output","width","height","options","threshold","undefined","maxDelta","diff","y","x","pos","delta","colorDelta","includeAA","antialiased","drawPixel","val","blend","grayPixel","img","x1","y1","x0","Math","max","y0","x2","min","y2","zeroes","positives","negatives","minX","minY","maxX","maxY","k","m","yOnly","a1","a2","r1","g1","b1","r2","g2","b2","rgb2y","i","rgb2i","q","rgb2q","r","g","b","c","a"],"mappings":"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","sourcesContent":["'use strict';\n\nmodule.exports = pixelmatch;\n\nfunction pixelmatch(img1, img2, output, width, height, options) {\n\n    if (!options) options = {};\n\n    var threshold = options.threshold === undefined ? 0.1 : options.threshold;\n\n    // maximum acceptable square distance between two colors;\n    // 35215 is the maximum possible value for the YIQ difference metric\n    var maxDelta = 35215 * threshold * threshold,\n        diff = 0;\n\n    // compare each pixel of one image against the other one\n    for (var y = 0; y < height; y++) {\n        for (var x = 0; x < width; x++) {\n\n            var pos = (y * width + x) * 4;\n\n            // squared YUV distance between colors at this pixel position\n            var delta = colorDelta(img1, img2, pos, pos);\n\n            // the color difference is above the threshold\n            if (delta > maxDelta) {\n                // check it's a real rendering difference or just anti-aliasing\n                if (!options.includeAA && (antialiased(img1, x, y, width, height, img2) ||\n                                   antialiased(img2, x, y, width, height, img1))) {\n                    // one of the pixels is anti-aliasing; draw as yellow and do not count as difference\n                    if (output) drawPixel(output, pos, 255, 255, 0);\n\n                } else {\n                    // found substantial difference not caused by anti-aliasing; draw it as red\n                    if (output) drawPixel(output, pos, 255, 0, 0);\n                    diff++;\n                }\n\n            } else if (output) {\n                // pixels are similar; draw background as grayscale image blended with white\n                var val = blend(grayPixel(img1, pos), 0.1);\n                drawPixel(output, pos, val, val, val);\n            }\n        }\n    }\n\n    // return the number of different pixels\n    return diff;\n}\n\n// check if a pixel is likely a part of anti-aliasing;\n// based on \"Anti-aliased Pixel and Intensity Slope Detector\" paper by V. Vysniauskas, 2009\n\nfunction antialiased(img, x1, y1, width, height, img2) {\n    var x0 = Math.max(x1 - 1, 0),\n        y0 = Math.max(y1 - 1, 0),\n        x2 = Math.min(x1 + 1, width - 1),\n        y2 = Math.min(y1 + 1, height - 1),\n        pos = (y1 * width + x1) * 4,\n        zeroes = 0,\n        positives = 0,\n        negatives = 0,\n        min = 0,\n        max = 0,\n        minX, minY, maxX, maxY;\n\n    // go through 8 adjacent pixels\n    for (var x = x0; x <= x2; x++) {\n        for (var y = y0; y <= y2; y++) {\n            if (x === x1 && y === y1) continue;\n\n            // brightness delta between the center pixel and adjacent one\n            var delta = colorDelta(img, img, pos, (y * width + x) * 4, true);\n\n            // count the number of equal, darker and brighter adjacent pixels\n            if (delta === 0) zeroes++;\n            else if (delta < 0) negatives++;\n            else if (delta > 0) positives++;\n\n            // if found more than 2 equal siblings, it's definitely not anti-aliasing\n            if (zeroes > 2) return false;\n\n            if (!img2) continue;\n\n            // remember the darkest pixel\n            if (delta < min) {\n                min = delta;\n                minX = x;\n                minY = y;\n            }\n            // remember the brightest pixel\n            if (delta > max) {\n                max = delta;\n                maxX = x;\n                maxY = y;\n            }\n        }\n    }\n\n    if (!img2) return true;\n\n    // if there are no both darker and brighter pixels among siblings, it's not anti-aliasing\n    if (negatives === 0 || positives === 0) return false;\n\n    // if either the darkest or the brightest pixel has more than 2 equal siblings in both images\n    // (definitely not anti-aliased), this pixel is anti-aliased\n    return (!antialiased(img, minX, minY, width, height) && !antialiased(img2, minX, minY, width, height)) ||\n           (!antialiased(img, maxX, maxY, width, height) && !antialiased(img2, maxX, maxY, width, height));\n}\n\n// calculate color difference according to the paper \"Measuring perceived color difference\n// using YIQ NTSC transmission color space in mobile applications\" by Y. Kotsarenko and F. Ramos\n\nfunction colorDelta(img1, img2, k, m, yOnly) {\n    var a1 = img1[k + 3] / 255,\n        a2 = img2[m + 3] / 255,\n\n        r1 = blend(img1[k + 0], a1),\n        g1 = blend(img1[k + 1], a1),\n        b1 = blend(img1[k + 2], a1),\n\n        r2 = blend(img2[m + 0], a2),\n        g2 = blend(img2[m + 1], a2),\n        b2 = blend(img2[m + 2], a2),\n\n        y = rgb2y(r1, g1, b1) - rgb2y(r2, g2, b2);\n\n    if (yOnly) return y; // brightness difference only\n\n    var i = rgb2i(r1, g1, b1) - rgb2i(r2, g2, b2),\n        q = rgb2q(r1, g1, b1) - rgb2q(r2, g2, b2);\n\n    return 0.5053 * y * y + 0.299 * i * i + 0.1957 * q * q;\n}\n\nfunction rgb2y(r, g, b) { return r * 0.29889531 + g * 0.58662247 + b * 0.11448223; }\nfunction rgb2i(r, g, b) { return r * 0.59597799 - g * 0.27417610 - b * 0.32180189; }\nfunction rgb2q(r, g, b) { return r * 0.21147017 - g * 0.52261711 + b * 0.31114694; }\n\n// blend semi-transparent color with white\nfunction blend(c, a) {\n    return 255 + (c - 255) * a;\n}\n\nfunction drawPixel(output, pos, r, g, b) {\n    output[pos + 0] = r;\n    output[pos + 1] = g;\n    output[pos + 2] = b;\n    output[pos + 3] = 255;\n}\n\nfunction grayPixel(img, i) {\n    var a = img[i + 3] / 255,\n        r = blend(img[i + 0], a),\n        g = blend(img[i + 1], a),\n        b = blend(img[i + 2], a);\n    return rgb2y(r, g, b);\n}\n"]},"metadata":{},"sourceType":"script"}