{"ast":null,"code":"var parseAttributes = require('./parse-attribs');\n\nvar parseFromString = require('xml-parse-from-string'); //In some cases element.attribute.nodeName can return\n//all lowercase values.. so we need to map them to the correct \n//case\n\n\nvar NAME_MAP = {\n  scaleh: 'scaleH',\n  scalew: 'scaleW',\n  stretchh: 'stretchH',\n  lineheight: 'lineHeight',\n  alphachnl: 'alphaChnl',\n  redchnl: 'redChnl',\n  greenchnl: 'greenChnl',\n  bluechnl: 'blueChnl'\n};\n\nmodule.exports = function parse(data) {\n  data = data.toString();\n  var xmlRoot = parseFromString(data);\n  var output = {\n    pages: [],\n    chars: [],\n    kernings: []\n  } //get config settings\n  ;\n  ['info', 'common'].forEach(function (key) {\n    var element = xmlRoot.getElementsByTagName(key)[0];\n    if (element) output[key] = parseAttributes(getAttribs(element));\n  }); //get page info\n\n  var pageRoot = xmlRoot.getElementsByTagName('pages')[0];\n  if (!pageRoot) throw new Error('malformed file -- no <pages> element');\n  var pages = pageRoot.getElementsByTagName('page');\n\n  for (var i = 0; i < pages.length; i++) {\n    var p = pages[i];\n    var id = parseInt(p.getAttribute('id'), 10);\n    var file = p.getAttribute('file');\n    if (isNaN(id)) throw new Error('malformed file -- page \"id\" attribute is NaN');\n    if (!file) throw new Error('malformed file -- needs page \"file\" attribute');\n    output.pages[parseInt(id, 10)] = file;\n  } //get kernings / chars\n\n\n  ;\n  ['chars', 'kernings'].forEach(function (key) {\n    var element = xmlRoot.getElementsByTagName(key)[0];\n    if (!element) return;\n    var childTag = key.substring(0, key.length - 1);\n    var children = element.getElementsByTagName(childTag);\n\n    for (var i = 0; i < children.length; i++) {\n      var child = children[i];\n      output[key].push(parseAttributes(getAttribs(child)));\n    }\n  });\n  return output;\n};\n\nfunction getAttribs(element) {\n  var attribs = getAttribList(element);\n  return attribs.reduce(function (dict, attrib) {\n    var key = mapName(attrib.nodeName);\n    dict[key] = attrib.nodeValue;\n    return dict;\n  }, {});\n}\n\nfunction getAttribList(element) {\n  //IE8+ and modern browsers\n  var attribs = [];\n\n  for (var i = 0; i < element.attributes.length; i++) attribs.push(element.attributes[i]);\n\n  return attribs;\n}\n\nfunction mapName(nodeName) {\n  return NAME_MAP[nodeName.toLowerCase()] || nodeName;\n}","map":{"version":3,"sources":["/Users/zakstratton/Documents/logo-processor/node_modules/parse-bmfont-xml/lib/browser.js"],"names":["parseAttributes","require","parseFromString","NAME_MAP","scaleh","scalew","stretchh","lineheight","alphachnl","redchnl","greenchnl","bluechnl","module","exports","parse","data","toString","xmlRoot","output","pages","chars","kernings","forEach","key","element","getElementsByTagName","getAttribs","pageRoot","Error","i","length","p","id","parseInt","getAttribute","file","isNaN","childTag","substring","children","child","push","attribs","getAttribList","reduce","dict","attrib","mapName","nodeName","nodeValue","attributes","toLowerCase"],"mappings":"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","sourcesContent":["var parseAttributes = require('./parse-attribs')\nvar parseFromString = require('xml-parse-from-string')\n\n//In some cases element.attribute.nodeName can return\n//all lowercase values.. so we need to map them to the correct \n//case\nvar NAME_MAP = {\n  scaleh: 'scaleH',\n  scalew: 'scaleW',\n  stretchh: 'stretchH',\n  lineheight: 'lineHeight',\n  alphachnl: 'alphaChnl',\n  redchnl: 'redChnl',\n  greenchnl: 'greenChnl',\n  bluechnl: 'blueChnl'\n}\n\nmodule.exports = function parse(data) {\n  data = data.toString()\n  \n  var xmlRoot = parseFromString(data)\n  var output = {\n    pages: [],\n    chars: [],\n    kernings: []\n  }\n\n  //get config settings\n  ;['info', 'common'].forEach(function(key) {\n    var element = xmlRoot.getElementsByTagName(key)[0]\n    if (element)\n      output[key] = parseAttributes(getAttribs(element))\n  })\n\n  //get page info\n  var pageRoot = xmlRoot.getElementsByTagName('pages')[0]\n  if (!pageRoot)\n    throw new Error('malformed file -- no <pages> element')\n  var pages = pageRoot.getElementsByTagName('page')\n  for (var i=0; i<pages.length; i++) {\n    var p = pages[i]\n    var id = parseInt(p.getAttribute('id'), 10)\n    var file = p.getAttribute('file')\n    if (isNaN(id))\n      throw new Error('malformed file -- page \"id\" attribute is NaN')\n    if (!file)\n      throw new Error('malformed file -- needs page \"file\" attribute')\n    output.pages[parseInt(id, 10)] = file\n  }\n\n  //get kernings / chars\n  ;['chars', 'kernings'].forEach(function(key) {\n    var element = xmlRoot.getElementsByTagName(key)[0]\n    if (!element)\n      return\n    var childTag = key.substring(0, key.length-1)\n    var children = element.getElementsByTagName(childTag)\n    for (var i=0; i<children.length; i++) {      \n      var child = children[i]\n      output[key].push(parseAttributes(getAttribs(child)))\n    }\n  })\n  return output\n}\n\nfunction getAttribs(element) {\n  var attribs = getAttribList(element)\n  return attribs.reduce(function(dict, attrib) {\n    var key = mapName(attrib.nodeName)\n    dict[key] = attrib.nodeValue\n    return dict\n  }, {})\n}\n\nfunction getAttribList(element) {\n  //IE8+ and modern browsers\n  var attribs = []\n  for (var i=0; i<element.attributes.length; i++)\n    attribs.push(element.attributes[i])\n  return attribs\n}\n\nfunction mapName(nodeName) {\n  return NAME_MAP[nodeName.toLowerCase()] || nodeName\n}"]},"metadata":{},"sourceType":"script"}