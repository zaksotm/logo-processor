{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getExtension = exports.getType = exports.addType = void 0;\nvar mimeTypes = {};\n\nvar findType = function findType(extension) {\n  return Object.entries(mimeTypes).find(function (type) {\n    return type[1].includes(extension);\n  }) || [];\n};\n\nvar addType = function addType(mime, extensions) {\n  mimeTypes[mime] = extensions;\n};\n/**\n * Lookup a mime type based on extension\n * @param {string} path path to find extension for\n * @returns {string} mime found mime type\n */\n\n\nexports.addType = addType;\n\nvar getType = function getType(path) {\n  var pathParts = path.split('/').slice(-1);\n  var extension = pathParts[pathParts.length - 1].split('.').pop();\n  var type = findType(extension);\n  return type[0];\n};\n/**\n * Return file extension associated with a mime type\n * @param {string} type mime type to look up\n * @returns {string} extension file extension\n */\n\n\nexports.getType = getType;\n\nvar getExtension = function getExtension(type) {\n  return (mimeTypes[type.toLowerCase()] || [])[0];\n};\n\nexports.getExtension = getExtension;","map":{"version":3,"sources":["../../src/utils/mime.js"],"names":["mimeTypes","findType","type","addType","getType","pathParts","path","extension","getExtension"],"mappings":";;;;;;AAAA,IAAMA,SAAS,GAAf,EAAA;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAA,SAAA,EAAS;AAAA,SACxB,MAAM,CAAN,OAAA,CAAA,SAAA,EAAA,IAAA,CAA+B,UAAA,IAAA,EAAI;AAAA,WAAIC,IAAI,CAAJA,CAAI,CAAJA,CAAAA,QAAAA,CAAJ,SAAIA,CAAJ;AAAnC,GAAA,KADwB,EAAA;AAA1B,CAAA;;AAGO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAAA,IAAA,EAAA,UAAA,EAAsB;AAC3CH,EAAAA,SAAS,CAATA,IAAS,CAATA,GAAAA,UAAAA;AADK,CAAA;AAIP;;;;;;;;;AAKO,IAAMI,OAAO,GAAG,SAAVA,OAAU,CAAA,IAAA,EAAQ;AAC7B,MAAMC,SAAS,GAAGC,IAAI,CAAJA,KAAAA,CAAAA,GAAAA,EAAAA,KAAAA,CAAsB,CAAxC,CAAkBA,CAAlB;AACA,MAAMC,SAAS,GAAGF,SAAS,CAACA,SAAS,CAATA,MAAAA,GAAVA,CAAS,CAATA,CAAAA,KAAAA,CAAAA,GAAAA,EAAlB,GAAkBA,EAAlB;AACA,MAAMH,IAAI,GAAGD,QAAQ,CAArB,SAAqB,CAArB;AAEA,SAAOC,IAAI,CAAX,CAAW,CAAX;AALK,CAAA;AAQP;;;;;;;;;AAKO,IAAMM,YAAY,GAAG,SAAfA,YAAe,CAAA,IAAA,EAAI;AAAA,SAAI,CAACR,SAAS,CAACE,IAAI,CAAdF,WAAUE,EAAD,CAATF,IAAD,EAAA,EAAJ,CAAI,CAAJ;AAAzB,CAAA","sourcesContent":["const mimeTypes = {};\n\nconst findType = extension =>\n  Object.entries(mimeTypes).find(type => type[1].includes(extension)) || [];\n\nexport const addType = (mime, extensions) => {\n  mimeTypes[mime] = extensions;\n};\n\n/**\n * Lookup a mime type based on extension\n * @param {string} path path to find extension for\n * @returns {string} mime found mime type\n */\nexport const getType = path => {\n  const pathParts = path.split('/').slice(-1);\n  const extension = pathParts[pathParts.length - 1].split('.').pop();\n  const type = findType(extension);\n\n  return type[0];\n};\n\n/**\n * Return file extension associated with a mime type\n * @param {string} type mime type to look up\n * @returns {string} extension file extension\n */\nexport const getExtension = type => (mimeTypes[type.toLowerCase()] || [])[0];\n"]},"metadata":{},"sourceType":"script"}