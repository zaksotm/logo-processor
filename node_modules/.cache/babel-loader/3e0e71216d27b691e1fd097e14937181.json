{"ast":null,"code":"var _jsxFileName = \"/Users/zakstratton/Documents/logo-processor/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.css'; //import './style/_buttons.scss';\n\nimport ImageUploader from 'react-images-upload';\nimport Jimp from 'jimp/es';\n\nvar jimp = require('jimp');\n\nvar colors = {\n  black: '#000000',\n  onyx: '#333538',\n  charcoal: '#5f6468',\n  concrete: '#97a0a7',\n  quicksilver: '#e4e5e6',\n  bleach: '#ffffff',\n  rich_brown: '#372820',\n  mushroom: '#716257',\n  sand: '#bab3a0',\n  natural: '#f9f4ec',\n  navy: '#081e2c',\n  ultramarine: '#29217d',\n  lagoon: '#003e66',\n  cerulean: '#0169ca',\n  cornflower: '#529afc',\n  cyan: '#009ff1',\n  peacock: '#01aec9',\n  aruba: '#9dfbe7',\n  lake: '#6ac4dd',\n  seafoam: '#4ca696',\n  reef: '#00947d',\n  teal: '#007171',\n  pine: '#2b4423',\n  kelly: '#21772f',\n  jade: '#14b25a',\n  turf: '#60933b',\n  lime: '#a0ce3e',\n  goldenrod: '#d5d03a',\n  yellow: '#fff71b',\n  sunflower: '#ffc938',\n  carmel: '#d8a15e',\n  clementine: '#ff9a23',\n  living_coral: '#fb686d',\n  persimmon: '#fd5130',\n  red_orange: '#db1d3c',\n  red: '#c50f2d',\n  burnt_orange: '#a84c28',\n  rust: '#763742',\n  maroon: '#581c32',\n  deep_pink: '#c40876',\n  hibiscus: '#de4b9b',\n  blush: '#fdaeca',\n  peach: '#f7bfab',\n  lavender: '#a08dd6',\n  iris: '#77479f',\n  purple: '#5d1e5c',\n  royal_purple: '#401e72',\n  moose: '#653c2c',\n  violet: '#6753b2',\n  green_apple: '#76c727',\n  carrot: '#fd673e',\n  lapis: '#3c2f8f',\n  parrot: '#2fd078',\n  french_blue: '#638ee4'\n};\n\nvar nearestColor = require('nearest-color').from(colors); //initialize the default image\n\n\nconst src = require(\"./color-swatch.bmp\"); //janky way around CORS policy for getting from dropbox link, pass through cors-anywhere server\n//var dropboxURL = \"0\"\n//var imgFinal = (\"https://cors-anywhere.herokuapp.com/\" + dropboxURL.slice(0, -1) + \"1\");\n//-------------------------------------------------------------\n//Main classes for displaying the image we are editing\n//as well as the resulting images after edits\n//-------------------------------------------------------------\n\n\nclass DisplayLogoImg extends React.Component {\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: \"workImage\",\n      src: this.props.picture,\n      alt: \"Uploaded logo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      className: \"workImage\",\n      src: this.props.output[0],\n      alt: \"Uploaded logo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      className: \"workImage\",\n      src: this.props.output[1],\n      alt: \"Uploaded logo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      className: \"workImage\",\n      src: this.props.output[2],\n      alt: \"Uploaded logo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }));\n  }\n\n} //-------------------------------------------------------------\n//Custom classes for each button, passes state up\n//TODO:   Merge all of one type into a single class? [buttons, forms, etc]\n//        Transfer classes into seperate file and import it\n//-------------------------------------------------------------\n\n\nclass Linkform extends React.Component {\n  render() {\n    return React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"Dropbox Link:\", React.createElement(\"input\", {\n      type: \"text\",\n      onChange: this.props.onChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    })));\n  }\n\n}\n\nclass DebugButton extends React.Component {\n  render() {\n    return React.createElement(\"button\", {\n      onClick: () => this.props.onClick(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, \"Debug\");\n  }\n\n}\n\nclass DownloadButton extends React.Component {\n  render() {\n    return React.createElement(\"button\", {\n      onClick: () => this.props.onClick(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, \"Download BMP\");\n  }\n\n}\n\nclass ConvertButton extends React.Component {\n  render() {\n    return React.createElement(\"button\", {\n      onClick: () => this.props.onClick(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, \"Convert file to BMP\");\n  }\n\n} //-------------------------------------------------------------\n//Main editor app class, contains most info in state\n//-------------------------------------------------------------\n\n\nclass Editor extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleDebugButtonClick = i => {\n      var posterizeValue = 2;\n      var pixelateValue = 10;\n      var scale = false;\n      this.jimpLogoCreation(this.state.picture, pixelateValue, posterizeValue, scale); //console.log(nearestColor('#f9f4eb'));\n    };\n\n    this.handleConvertButtonClick = i => {\n      console.log(this.output[0]);\n      console.log(this.output[1]);\n    };\n\n    this.handleDownloadButtonClick = i => {\n      console.log(\"Download Button Clicked\");\n    };\n\n    this.state = {\n      //value that holds the path to default image, then the base64 data of render\n      //base64 used by Jimp, since it is a web-based app. Local files caused issues.\n      picture: src,\n      //Scale values for scale operation\n      scaleX: 0,\n      scaleY: 0,\n      //Array of output pictures\n      output: [],\n      outputIndex: 0\n    };\n    this.myRef = React.createRef(); //TODO: Bind these functions in their declaration, similar to handleX functions\n\n    this.onDrop = this.onDrop.bind(this);\n    this.onLinkChange = this.onLinkChange.bind(this);\n    this.jimpScale = this.jimpScale.bind(this);\n    this.jimpResize = this.jimpResize.bind(this);\n    this.jimpPixelate = this.jimpPixelate.bind(this);\n    this.jimpUpdateSize = this.jimpUpdateSize.bind(this);\n  }\n\n  componentDidUpdate(prevProps, prevState) {}\n  /*\n  if (prevState.picture !== this.state.picture){\n    console.log(\"Picture state has changed: \" + this.state.picture);\n    this.setState({\n      output: this.state.picture,\n      outputIndex: this.state.outputIndex + 1,\n    });\n  }\n  */\n  //-------------------------------------------------------------\n  //Functions to handle events when different buttons are clicked\n  //or values are changed\n  //-------------------------------------------------------------\n\n\n  //picture is an array passed from image uploader\n  //pull most recently uploaded picture from current session\n  //TODO: reformat these functions into handleDrop and handleLinkChange\n  onDrop(picture) {\n    //TODO: Insert function calls directly here to auto work on image\n    var localImg = URL.createObjectURL(picture[picture.length - 1]);\n    console.log(this.jimpLogoCreation(localImg, 10, 5, true)); //Set state for display\n\n    this.setState({\n      picture: URL.createObjectURL(picture[picture.length - 1])\n    }); //this.jimpScale(localImg, 200, 200);\n    //This is very janky, waits 1 second before updating while picture state is being changed\n    //TODO: Figure out some sort of wait or confirmation,\n    //      this will introduce problems with varying connection speeds\n\n    /*\n    setTimeout(function () {\n      this.jimpUpdateSize(this.state.picture);\n    }.bind(this), 1000);\n    */\n  }\n\n  onLinkChange(event) {\n    //janky way around CORS policy for getting from dropbox link, pass through cors-anywhere server\n    this.setState({\n      picture: \"https://cors-anywhere.herokuapp.com/\" + event.target.value.slice(0, -1) + \"1\"\n    });\n  } //-------------------------------------------------------------\n  //render functions for each visible element\n  //TODO: combine everything in the same div into one render function\n  //like buttons for control panel and such\n  //-------------------------------------------------------------\n\n\n  renderLogoImage() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }, React.createElement(DisplayLogoImg, {\n      picture: this.state.picture,\n      output: this.state.output,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }));\n  }\n\n  renderDebugButton(i) {\n    return React.createElement(DebugButton, {\n      onClick: this.handleDebugButtonClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    });\n  }\n\n  renderDownloadButton(i) {\n    return React.createElement(DownloadButton, {\n      onClick: this.handleDownloadButtonClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    });\n  }\n\n  renderConvertButton(i) {\n    return React.createElement(ConvertButton, {\n      onClick: this.handleConvertButtonClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    });\n  }\n\n  renderImageUploader() {\n    return React.createElement(ImageUploader, {\n      withIcon: true,\n      buttonText: \"Choose image\",\n      label: \"Max file size: 5mb, Filetypes accepted: .bmp | .jpg | .png\",\n      fileContainerStyle: {\n        backgroundColor: \"grey\"\n      },\n      singleImage: true,\n      onChange: this.onDrop,\n      imgExtension: ['.jpg', '.gif', '.png', '.bmp'],\n      maxFileSize: 5242880,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    });\n  }\n\n  renderLinkForm() {\n    return React.createElement(Linkform, {\n      onChange: this.onLinkChange,\n      onSubmit: this.onLinkSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285\n      },\n      __self: this\n    });\n  } //-------------------------------------------------------------\n  //Functions to do the actual editing on the image\n  //-------------------------------------------------------------\n\n\n  jimpConvert(path, x, y) {\n    jimp.read(path, function (err, image) {\n      image.getBase64(Jimp.AUTO, function (err, data) {\n        this.setState({\n          picture: data.replace(\"image/png\", \"image/bmp\")\n        });\n      }.bind(this));\n    }.bind(this));\n  }\n\n  jimpLogoCreation(path, pix, pos, scale) {\n    jimp.read(path, function (err, image) {\n      image.pixelate(pix); //image.posterize(pos);\n      //console.log(path);\n\n      if (scale) image.scaleToFit(150, 150); //Function to replace colors with our palette\n\n      image.scan(0, 0, image.bitmap.width, image.bitmap.height, function (x, y, idx) {\n        //First log RGB value of current pixel, toString(16) converts\n        //into hex form, padStart for 1 digit values\n        //var position = [x, y];\n        //red\n        var red = this.bitmap.data[idx];\n        var redHex = red.toString(16).padStart(2, \"0\"); //green\n\n        var green = this.bitmap.data[idx + 1];\n        var greenHex = green.toString(16).padStart(2, \"0\"); //blue\n\n        var blue = this.bitmap.data[idx + 2];\n        var blueHex = blue.toString(16).padStart(2, \"0\"); //Run nearestColor on this pixel\n\n        var close = nearestColor('#' + redHex + greenHex + blueHex).value; //DEBUG\n        //var currentColor = '#' + redHex + greenHex + blueHex;\n        //console.log(currentColor + '\\n' + close + \"\\nPosition: \" + x + ' ' + y);\n\n        var closeRed = parseInt(close.substr(1, 2), 16);\n        var closeGreen = parseInt(close.substr(3, 2), 16);\n        var closeBlue = parseInt(close.substr(5, 2), 16); //Change pixel colors into nearest from our palette\n        //red\n\n        this.bitmap.data[idx] = closeRed; //green\n\n        this.bitmap.data[idx + 1] = closeGreen; //blue\n\n        this.bitmap.data[idx + 2] = closeBlue;\n      }); //add result to output array\n\n      image.getBase64(Jimp.MIME_BMP, function (err, data) {\n        this.setState(prevState => ({\n          output: [...prevState.output, data]\n        }));\n      }.bind(this)); //apply edited image to picture state\n\n      /*\n      image.getBase64(Jimp.MIME_BMP, function(err, data){\n        this.setState({\n          picture: data,\n        });\n      }.bind(this));\n      */\n    }.bind(this));\n  }\n\n  jimpUpdateSize(path) {\n    var localX = 0;\n    var localY = 0;\n    jimp.read(path, function (err, image) {\n      localX = image.bitmap.width;\n      localY = image.bitmap.height;\n      this.setState({\n        logoWidth: localX,\n        logoHeight: localY\n      });\n    }.bind(this));\n  }\n\n  jimpScale(path, x, y) {\n    jimp.read(path, function (err, image) {\n      image.scaleToFit(x, y);\n      image.getBase64(Jimp.AUTO, function (err, data) {\n        this.setState({\n          picture: data\n        });\n      }.bind(this));\n    }.bind(this));\n  }\n\n  jimpResize(path, x, y) {\n    jimp.read(path, function (err, image) {\n      image.resize(x, y);\n      image.getBase64(Jimp.AUTO, function (err, data) {\n        this.setState({\n          picture: data\n        });\n      }.bind(this));\n    }.bind(this));\n  }\n\n  jimpResizeBMP(path, x, y) {\n    jimp.read(path, function (err, image) {\n      image.resize(x, y);\n      image.getBase64(Jimp.AUTO, function (err, data) {\n        this.setState({\n          bmpPicture: data\n        });\n      }.bind(this));\n    }.bind(this));\n  } //map logo onto bitmap according to preset\n  //TODO: adjust for each preset\n\n  /*\n  jimpMap(path1, path2){\n    jimp.read(this.state.bmpPicture, function(err, bmpImage) {\n      jimp.read(this.state.picture, function(err, logo) {\n        bmpImage.composite(logo, 20, 20);\n        bmpImage.getBase64(Jimp.AUTO, function(err, data){\n          this.setState({\n            bmpPicture: data,\n          });\n        }.bind(this));\n      }.bind(this));\n    }.bind(this));\n  }\n  */\n\n\n  jimpPixelate(path, x) {\n    jimp.read(path, function (err, image) {\n      image.pixelate(x);\n      image.getBase64(Jimp.AUTO, function (err, data) {\n        this.setState({\n          picture: data\n        });\n      }.bind(this));\n    }.bind(this));\n  }\n\n  jimpPosterize(path, x) {\n    jimp.read(path, function (err, image) {\n      image.posterize(x);\n      image.getBase64(Jimp.AUTO, function (err, data) {\n        this.setState({\n          picture: data\n        });\n      }.bind(this));\n    }.bind(this));\n  } //-------------------------------------------------------------\n  //Final render of the application\n  //-------------------------------------------------------------\n\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 460\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"workDisplay\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 461\n      },\n      __self: this\n    }, this.renderLogoImage()), React.createElement(\"div\", {\n      className: \"panelDisplay\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 464\n      },\n      __self: this\n    }, this.renderLinkForm(), this.renderImageUploader(), this.renderDebugButton(), this.renderConvertButton()));\n  }\n\n} //-------------------------------------------------------------\n//Overreaching App class, not nessecary at the moment but may be used later\n//-------------------------------------------------------------\n\n\nclass App extends React.Component {\n  render() {\n    return React.createElement(\"div\", {\n      className: \"app\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 482\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"app-img\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 483\n      },\n      __self: this\n    }, React.createElement(Editor, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 484\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"img-fields\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 486\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 487\n      },\n      __self: this\n    })));\n  }\n\n} //-------------------------------------------------------------\n//Final DOM render, required by React\n//-------------------------------------------------------------\n\n\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 500\n  },\n  __self: this\n}), document.getElementById('root'));","map":{"version":3,"sources":["/Users/zakstratton/Documents/logo-processor/src/index.js"],"names":["React","ReactDOM","ImageUploader","Jimp","jimp","require","colors","black","onyx","charcoal","concrete","quicksilver","bleach","rich_brown","mushroom","sand","natural","navy","ultramarine","lagoon","cerulean","cornflower","cyan","peacock","aruba","lake","seafoam","reef","teal","pine","kelly","jade","turf","lime","goldenrod","yellow","sunflower","carmel","clementine","living_coral","persimmon","red_orange","red","burnt_orange","rust","maroon","deep_pink","hibiscus","blush","peach","lavender","iris","purple","royal_purple","moose","violet","green_apple","carrot","lapis","parrot","french_blue","nearestColor","from","src","DisplayLogoImg","Component","render","props","picture","output","Linkform","onChange","DebugButton","onClick","DownloadButton","ConvertButton","Editor","constructor","handleDebugButtonClick","i","posterizeValue","pixelateValue","scale","jimpLogoCreation","state","handleConvertButtonClick","console","log","handleDownloadButtonClick","scaleX","scaleY","outputIndex","myRef","createRef","onDrop","bind","onLinkChange","jimpScale","jimpResize","jimpPixelate","jimpUpdateSize","componentDidUpdate","prevProps","prevState","localImg","URL","createObjectURL","length","setState","event","target","value","slice","renderLogoImage","renderDebugButton","renderDownloadButton","renderConvertButton","renderImageUploader","backgroundColor","renderLinkForm","onLinkSubmit","jimpConvert","path","x","y","read","err","image","getBase64","AUTO","data","replace","pix","pos","pixelate","scaleToFit","scan","bitmap","width","height","idx","redHex","toString","padStart","green","greenHex","blue","blueHex","close","closeRed","parseInt","substr","closeGreen","closeBlue","MIME_BMP","localX","localY","logoWidth","logoHeight","resize","jimpResizeBMP","bmpPicture","jimpPosterize","posterize","App","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.css';\n//import './style/_buttons.scss';\nimport ImageUploader from 'react-images-upload';\nimport Jimp from 'jimp/es';\n\nvar jimp = require('jimp');\n\nvar colors = {\n  black: '#000000',\n  onyx: '#333538',\n  charcoal: '#5f6468',\n  concrete: '#97a0a7',\n  quicksilver: '#e4e5e6',\n  bleach: '#ffffff',\n  rich_brown: '#372820',\n  mushroom: '#716257',\n  sand: '#bab3a0',\n  natural: '#f9f4ec',\n  navy: '#081e2c',\n  ultramarine: '#29217d',\n  lagoon: '#003e66',\n  cerulean: '#0169ca',\n  cornflower: '#529afc',\n  cyan: '#009ff1',\n  peacock: '#01aec9',\n  aruba: '#9dfbe7',\n  lake: '#6ac4dd',\n  seafoam: '#4ca696',\n  reef: '#00947d',\n  teal: '#007171',\n  pine: '#2b4423',\n  kelly: '#21772f',\n  jade: '#14b25a',\n  turf: '#60933b',\n  lime: '#a0ce3e',\n  goldenrod: '#d5d03a',\n  yellow: '#fff71b',\n  sunflower: '#ffc938',\n  carmel: '#d8a15e',\n  clementine: '#ff9a23',\n  living_coral: '#fb686d',\n  persimmon: '#fd5130',\n  red_orange: '#db1d3c',\n  red: '#c50f2d',\n  burnt_orange: '#a84c28',\n  rust: '#763742',\n  maroon: '#581c32',\n  deep_pink: '#c40876',\n  hibiscus: '#de4b9b',\n  blush: '#fdaeca',\n  peach: '#f7bfab',\n  lavender: '#a08dd6',\n  iris: '#77479f',\n  purple: '#5d1e5c',\n  royal_purple: '#401e72',\n  moose: '#653c2c',\n  violet: '#6753b2',\n  green_apple: '#76c727',\n  carrot: '#fd673e',\n  lapis: '#3c2f8f',\n  parrot: '#2fd078',\n  french_blue: '#638ee4',\n};\n\nvar nearestColor = require('nearest-color').from(colors);\n\n\n//initialize the default image\nconst src = require(\"./color-swatch.bmp\");\n//janky way around CORS policy for getting from dropbox link, pass through cors-anywhere server\n//var dropboxURL = \"0\"\n//var imgFinal = (\"https://cors-anywhere.herokuapp.com/\" + dropboxURL.slice(0, -1) + \"1\");\n\n//-------------------------------------------------------------\n//Main classes for displaying the image we are editing\n//as well as the resulting images after edits\n//-------------------------------------------------------------\nclass DisplayLogoImg extends React.Component{\n  render(){\n    return(\n      <div>\n        <img className=\"workImage\" src={this.props.picture} alt=\"Uploaded logo\" />\n        <img className=\"workImage\" src={this.props.output[0]} alt=\"Uploaded logo\" />\n        <img className=\"workImage\" src={this.props.output[1]} alt=\"Uploaded logo\" />\n        <img className=\"workImage\" src={this.props.output[2]} alt=\"Uploaded logo\" />\n      </div>\n    )\n  }\n}\n\n//-------------------------------------------------------------\n//Custom classes for each button, passes state up\n//TODO:   Merge all of one type into a single class? [buttons, forms, etc]\n//        Transfer classes into seperate file and import it\n//-------------------------------------------------------------\n\nclass Linkform extends React.Component {\n  render() {\n    return (\n      <form>\n        <label>\n          Dropbox Link:\n          <input type=\"text\" onChange={this.props.onChange} />\n        </label>\n      </form>\n    );\n  }\n}\n\nclass DebugButton extends React.Component{\n  render(){\n    return(\n      <button onClick={() => this.props.onClick()}>Debug</button>\n    )\n  }\n}\n\nclass DownloadButton extends React.Component{\n  render(){\n    return(\n      <button onClick={() => this.props.onClick()}>Download BMP</button>\n    )\n  }\n}\n\nclass ConvertButton extends React.Component{\n  render(){\n    return(\n      <button onClick={() => this.props.onClick()}>Convert file to BMP</button>\n    )\n  }\n}\n\n//-------------------------------------------------------------\n//Main editor app class, contains most info in state\n//-------------------------------------------------------------\nclass Editor extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      //value that holds the path to default image, then the base64 data of render\n      //base64 used by Jimp, since it is a web-based app. Local files caused issues.\n      picture: src,\n      //Scale values for scale operation\n      scaleX: 0,\n      scaleY: 0,\n      //Array of output pictures\n      output: [],\n      outputIndex: 0,\n    };\n    this.myRef = React.createRef();\n    //TODO: Bind these functions in their declaration, similar to handleX functions\n    this.onDrop = this.onDrop.bind(this);\n    this.onLinkChange = this.onLinkChange.bind(this);\n    this.jimpScale = this.jimpScale.bind(this);\n    this.jimpResize = this.jimpResize.bind(this);\n    this.jimpPixelate = this.jimpPixelate.bind(this);\n    this.jimpUpdateSize = this.jimpUpdateSize.bind(this);\n  }\n\n  componentDidUpdate(prevProps, prevState){\n    /*\n    if (prevState.picture !== this.state.picture){\n      console.log(\"Picture state has changed: \" + this.state.picture);\n      this.setState({\n        output: this.state.picture,\n        outputIndex: this.state.outputIndex + 1,\n      });\n    }\n    */\n  }\n\n  //-------------------------------------------------------------\n  //Functions to handle events when different buttons are clicked\n  //or values are changed\n  //-------------------------------------------------------------\n  handleDebugButtonClick = (i) => {\n      var posterizeValue = 2;\n      var pixelateValue = 10;\n      var scale = false;\n      this.jimpLogoCreation(this.state.picture, pixelateValue, posterizeValue, scale);\n      //console.log(nearestColor('#f9f4eb'));\n  }\n\n  handleConvertButtonClick = (i) => {\n      console.log(this.output[0]);\n      console.log(this.output[1]);\n  }\n\n  handleDownloadButtonClick = (i) => {\n    console.log(\"Download Button Clicked\");\n  }\n\n  //picture is an array passed from image uploader\n  //pull most recently uploaded picture from current session\n  //TODO: reformat these functions into handleDrop and handleLinkChange\n  onDrop(picture){\n    //TODO: Insert function calls directly here to auto work on image\n    var localImg = URL.createObjectURL(picture[picture.length - 1]);\n\n    console.log(this.jimpLogoCreation(localImg, 10, 5, true));\n\n    //Set state for display\n    this.setState({\n      picture: URL.createObjectURL(picture[picture.length - 1]),\n    });\n    //this.jimpScale(localImg, 200, 200);\n    //This is very janky, waits 1 second before updating while picture state is being changed\n    //TODO: Figure out some sort of wait or confirmation,\n    //      this will introduce problems with varying connection speeds\n    /*\n    setTimeout(function () {\n      this.jimpUpdateSize(this.state.picture);\n    }.bind(this), 1000);\n    */\n  }\n\n  onLinkChange(event){\n    //janky way around CORS policy for getting from dropbox link, pass through cors-anywhere server\n    this.setState({\n      picture: \"https://cors-anywhere.herokuapp.com/\" + event.target.value.slice(0, -1) + \"1\"\n    });\n  }\n\n  //-------------------------------------------------------------\n  //render functions for each visible element\n  //TODO: combine everything in the same div into one render function\n  //like buttons for control panel and such\n  //-------------------------------------------------------------\n\n  renderLogoImage(){\n    return (\n      <div>\n        <DisplayLogoImg\n          picture={this.state.picture}\n          output={this.state.output}\n        />\n      </div>\n    )\n  }\n\n  renderDebugButton(i){\n    return(\n      <DebugButton\n        onClick={this.handleDebugButtonClick}\n      />\n    )\n  }\n\n  renderDownloadButton(i){\n    return(\n      <DownloadButton\n        onClick={this.handleDownloadButtonClick}\n      />\n    )\n  }\n\n  renderConvertButton(i){\n    return(\n      <ConvertButton\n        onClick={this.handleConvertButtonClick}\n      />\n    )\n  }\n\n  renderImageUploader(){\n    return(\n      <ImageUploader\n        withIcon={true}\n        buttonText='Choose image'\n        label=\"Max file size: 5mb, Filetypes accepted: .bmp | .jpg | .png\"\n        fileContainerStyle={{backgroundColor: \"grey\"}}\n        singleImage={true}\n        onChange={this.onDrop}\n        imgExtension={['.jpg', '.gif', '.png', '.bmp']}\n        maxFileSize={5242880}\n      />\n    )\n  }\n\n  renderLinkForm(){\n    return(\n      <Linkform onChange={this.onLinkChange} onSubmit={this.onLinkSubmit}/>\n    )\n  }\n\n\n  //-------------------------------------------------------------\n  //Functions to do the actual editing on the image\n  //-------------------------------------------------------------\n  jimpConvert(path, x, y){\n    jimp.read(path, function(err, image) {\n      image.getBase64(Jimp.AUTO, function(err, data){\n        this.setState({\n          picture: data.replace(\"image/png\", \"image/bmp\"),\n        });\n      }.bind(this));\n    }.bind(this));\n  }\n\n\n  jimpLogoCreation(path, pix, pos, scale){\n    jimp.read(path, function(err, image) {\n      image.pixelate(pix);\n      //image.posterize(pos);\n      //console.log(path);\n\n      if (scale)\n        image.scaleToFit(150,150);\n\n      //Function to replace colors with our palette\n      image.scan(0, 0, image.bitmap.width, image.bitmap.height, function(x, y, idx) {\n        //First log RGB value of current pixel, toString(16) converts\n        //into hex form, padStart for 1 digit values\n        //var position = [x, y];\n        //red\n        var red = this.bitmap.data[idx];\n        var redHex = red.toString(16).padStart(2, \"0\");\n        //green\n        var green = this.bitmap.data[idx + 1];\n        var greenHex = green.toString(16).padStart(2, \"0\");\n        //blue\n        var blue = this.bitmap.data[idx + 2];\n        var blueHex = blue.toString(16).padStart(2, \"0\");\n\n        //Run nearestColor on this pixel\n        var close = nearestColor('#' + redHex + greenHex + blueHex).value;\n        //DEBUG\n        //var currentColor = '#' + redHex + greenHex + blueHex;\n        //console.log(currentColor + '\\n' + close + \"\\nPosition: \" + x + ' ' + y);\n\n\n        var closeRed = parseInt(close.substr(1,2), 16);\n        var closeGreen = parseInt(close.substr(3,2), 16);\n        var closeBlue = parseInt(close.substr(5,2), 16);\n\n        //Change pixel colors into nearest from our palette\n        //red\n        this.bitmap.data[idx] = closeRed;\n        //green\n        this.bitmap.data[idx + 1] = closeGreen;\n        //blue\n        this.bitmap.data[idx + 2] = closeBlue;\n      })\n\n      //add result to output array\n      image.getBase64(Jimp.MIME_BMP, function(err, data){\n        this.setState(prevState => ({\n          output: [...prevState.output, data]\n        }))\n      }.bind(this));\n\n      //apply edited image to picture state\n      /*\n      image.getBase64(Jimp.MIME_BMP, function(err, data){\n        this.setState({\n          picture: data,\n        });\n      }.bind(this));\n      */\n\n\n    }.bind(this));\n  }\n\n\n  jimpUpdateSize(path){\n    var localX = 0;\n    var localY = 0;\n    jimp.read(path, function(err, image) {\n      localX = image.bitmap.width;\n      localY = image.bitmap.height;\n      this.setState({\n        logoWidth: localX,\n        logoHeight: localY,\n      });\n    }.bind(this));\n  }\n\n  jimpScale(path, x, y){\n    jimp.read(path, function(err, image) {\n      image.scaleToFit(x,y);\n      image.getBase64(Jimp.AUTO, function(err, data){\n        this.setState({\n          picture: data,\n        });\n      }.bind(this));\n    }.bind(this));\n  }\n\n  jimpResize(path, x, y){\n    jimp.read(path, function(err, image) {\n      image.resize(x,y);\n      image.getBase64(Jimp.AUTO, function(err, data){\n        this.setState({\n          picture: data,\n        });\n      }.bind(this));\n    }.bind(this));\n  }\n\n  jimpResizeBMP(path, x, y){\n    jimp.read(path, function(err, image) {\n      image.resize(x,y);\n      image.getBase64(Jimp.AUTO, function(err, data){\n        this.setState({\n          bmpPicture: data,\n        });\n      }.bind(this));\n    }.bind(this));\n  }\n\n  //map logo onto bitmap according to preset\n  //TODO: adjust for each preset\n\n  /*\n  jimpMap(path1, path2){\n    jimp.read(this.state.bmpPicture, function(err, bmpImage) {\n      jimp.read(this.state.picture, function(err, logo) {\n        bmpImage.composite(logo, 20, 20);\n        bmpImage.getBase64(Jimp.AUTO, function(err, data){\n          this.setState({\n            bmpPicture: data,\n          });\n        }.bind(this));\n      }.bind(this));\n    }.bind(this));\n  }\n  */\n\n  jimpPixelate(path, x){\n    jimp.read(path, function(err, image) {\n      image.pixelate(x);\n      image.getBase64(Jimp.AUTO, function(err, data){\n        this.setState({\n          picture: data,\n        });\n      }.bind(this));\n    }.bind(this));\n  }\n\n  jimpPosterize(path, x){\n    jimp.read(path, function(err, image) {\n      image.posterize(x);\n      image.getBase64(Jimp.AUTO, function(err, data){\n        this.setState({\n          picture: data,\n        });\n      }.bind(this));\n    }.bind(this));\n  }\n\n  //-------------------------------------------------------------\n  //Final render of the application\n  //-------------------------------------------------------------\n  render() {\n    return (\n      <div>\n        <div className=\"workDisplay\">\n          {this.renderLogoImage()}\n        </div>\n        <div className=\"panelDisplay\">\n          {this.renderLinkForm()}\n          {this.renderImageUploader()}\n          {this.renderDebugButton()}\n          {this.renderConvertButton()}\n        </div>\n      </div>\n    );\n  }\n}\n\n\n//-------------------------------------------------------------\n//Overreaching App class, not nessecary at the moment but may be used later\n//-------------------------------------------------------------\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"app-img\">\n          <Editor />\n        </div>\n        <div className=\"img-fields\">\n          <div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n\n//-------------------------------------------------------------\n//Final DOM render, required by React\n//-------------------------------------------------------------\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"]},"metadata":{},"sourceType":"module"}