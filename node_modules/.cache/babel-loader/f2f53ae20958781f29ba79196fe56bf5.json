{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _utils = require(\"@jimp/utils\");\n/**\n * Apply a ordered dithering effect\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\n\n\nfunction dither(cb) {\n  var rgb565Matrix = [1, 9, 3, 11, 13, 5, 15, 7, 4, 12, 2, 10, 16, 8, 14, 6];\n  this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function (x, y, idx) {\n    var thresholdId = ((y & 3) << 2) + x % 4;\n    var dither = rgb565Matrix[thresholdId];\n    this.bitmap.data[idx] = Math.min(this.bitmap.data[idx] + dither, 0xff);\n    this.bitmap.data[idx + 1] = Math.min(this.bitmap.data[idx + 1] + dither, 0xff);\n    this.bitmap.data[idx + 2] = Math.min(this.bitmap.data[idx + 2] + dither, 0xff);\n  });\n\n  if ((0, _utils.isNodePattern)(cb)) {\n    cb.call(this, null, this);\n  }\n\n  return this;\n}\n\nvar _default = function _default() {\n  return {\n    dither565: dither,\n    dither16: dither\n  };\n};\n\nexports[\"default\"] = _default;","map":{"version":3,"sources":["../src/index.js"],"names":["rgb565Matrix","thresholdId","y","x","dither","Math","idx","cb","dither565","dither16"],"mappings":";;;;;;;AAAA,IAAA,MAAA,GAAA,OAAA,CAAA,aAAA,CAAA;AAEA;;;;;;;AAKA,SAAA,MAAA,CAAA,EAAA,EAAoB;AAClB,MAAMA,YAAY,GAAG,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA,EAAA,EAAA,EAArB,CAAqB,CAArB;AACA,OAAA,SAAA,CAAA,CAAA,EAAA,CAAA,EAAqB,KAAA,MAAA,CAArB,KAAA,EAAwC,KAAA,MAAA,CAAxC,MAAA,EAA4D,UAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAI1D;AACA,QAAMC,WAAW,GAAG,CAAC,CAACC,CAAC,GAAF,CAAA,KAAD,CAAA,IAAkBC,CAAC,GAAvC,CAAA;AACA,QAAMC,MAAM,GAAGJ,YAAY,CAA3B,WAA2B,CAA3B;AACA,SAAA,MAAA,CAAA,IAAA,CAAA,GAAA,IAAwBK,IAAI,CAAJA,GAAAA,CAAS,KAAA,MAAA,CAAA,IAAA,CAAA,GAAA,IAATA,MAAAA,EAAxB,IAAwBA,CAAxB;AACA,SAAA,MAAA,CAAA,IAAA,CAAiBC,GAAG,GAApB,CAAA,IAA4BD,IAAI,CAAJA,GAAAA,CAC1B,KAAA,MAAA,CAAA,IAAA,CAAiBC,GAAG,GAApB,CAAA,IAD0BD,MAAAA,EAA5B,IAA4BA,CAA5B;AAIA,SAAA,MAAA,CAAA,IAAA,CAAiBC,GAAG,GAApB,CAAA,IAA4BD,IAAI,CAAJA,GAAAA,CAC1B,KAAA,MAAA,CAAA,IAAA,CAAiBC,GAAG,GAApB,CAAA,IAD0BD,MAAAA,EAA5B,IAA4BA,CAA5B;AAZF,GAAA;;AAkBA,MAAI,CAAA,GAAA,MAAA,CAAA,aAAA,EAAJ,EAAI,CAAJ,EAAuB;AACrBE,IAAAA,EAAE,CAAFA,IAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAAAA,IAAAA;AACD;;AAED,SAAA,IAAA;AACD;;eAEc,SAAA,QAAA,GAAA;AAAA,SAAO;AACpBC,IAAAA,SAAS,EADW,MAAA;AAEpBC,IAAAA,QAAQ,EAAEL;AAFU,GAAP","sourcesContent":["import { isNodePattern } from '@jimp/utils';\n\n/**\n * Apply a ordered dithering effect\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nfunction dither(cb) {\n  const rgb565Matrix = [1, 9, 3, 11, 13, 5, 15, 7, 4, 12, 2, 10, 16, 8, 14, 6];\n  this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n    x,\n    y,\n    idx\n  ) {\n    const thresholdId = ((y & 3) << 2) + (x % 4);\n    const dither = rgb565Matrix[thresholdId];\n    this.bitmap.data[idx] = Math.min(this.bitmap.data[idx] + dither, 0xff);\n    this.bitmap.data[idx + 1] = Math.min(\n      this.bitmap.data[idx + 1] + dither,\n      0xff\n    );\n    this.bitmap.data[idx + 2] = Math.min(\n      this.bitmap.data[idx + 2] + dither,\n      0xff\n    );\n  });\n\n  if (isNodePattern(cb)) {\n    cb.call(this, null, this);\n  }\n\n  return this;\n}\n\nexport default () => ({\n  dither565: dither,\n  dither16: dither\n});\n"]},"metadata":{},"sourceType":"script"}