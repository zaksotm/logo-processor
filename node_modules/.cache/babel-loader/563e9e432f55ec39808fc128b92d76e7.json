{"ast":null,"code":"var _jsxFileName = \"/Users/zakstratton/Documents/logo-processor/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.css'; //import './style/_buttons.scss';\n\nimport ImageUploader from 'react-images-upload';\nimport Jimp from 'jimp/es';\n\nvar jimp = require('jimp');\n\nvar basicColors = {\n  black: '#000000',\n  bleach: '#ffffff',\n  red: '#c50f2d',\n  cerulean: '#0169ca',\n  kelly: '#21772f',\n  yellow: '#fff71b',\n  teal: '#007171',\n  deep_pink: '#c40876',\n  hibiscus: '#de4b9b',\n  purple: '#5d1e5c',\n  lagoon: '#003e66',\n  reef: '#00947d',\n  clementine: '#ff9a23',\n  green_apple: '#76c727'\n};\nvar colors = {\n  black: '#000000',\n  onyx: '#333538',\n  charcoal: '#5f6468',\n  concrete: '#97a0a7',\n  quicksilver: '#e4e5e6',\n  bleach: '#ffffff',\n  rich_brown: '#372820',\n  mushroom: '#716257',\n  sand: '#bab3a0',\n  natural: '#f9f4ec',\n  navy: '#081e2c',\n  ultramarine: '#29217d',\n  lagoon: '#003e66',\n  cerulean: '#0169ca',\n  cornflower: '#529afc',\n  cyan: '#009ff1',\n  peacock: '#01aec9',\n  aruba: '#9dfbe7',\n  lake: '#6ac4dd',\n  seafoam: '#4ca696',\n  reef: '#00947d',\n  teal: '#007171',\n  pine: '#2b4423',\n  kelly: '#21772f',\n  jade: '#14b25a',\n  turf: '#60933b',\n  lime: '#a0ce3e',\n  goldenrod: '#d5d03a',\n  yellow: '#fff71b',\n  sunflower: '#ffc938',\n  carmel: '#d8a15e',\n  clementine: '#ff9a23',\n  living_coral: '#fb686d',\n  persimmon: '#fd5130',\n  red_orange: '#db1d3c',\n  red: '#c50f2d',\n  burnt_orange: '#a84c28',\n  rust: '#763742',\n  maroon: '#581c32',\n  deep_pink: '#c40876',\n  hibiscus: '#de4b9b',\n  blush: '#fdaeca',\n  peach: '#f7bfab',\n  lavender: '#a08dd6',\n  iris: '#77479f',\n  purple: '#5d1e5c',\n  royal_purple: '#401e72',\n  moose: '#653c2c',\n  violet: '#6753b2',\n  green_apple: '#76c727',\n  carrot: '#fd673e',\n  lapis: '#3c2f8f',\n  parrot: '#2fd078',\n  french_blue: '#638ee4'\n};\n\nvar nearestColor = require('nearest-color').from(colors); //initialize the default image\n\n\nconst src = require(\"./test3.jpg\"); //janky way around CORS policy for getting from dropbox link, pass through cors-anywhere server\n//var dropboxURL = \"0\"\n//var imgFinal = (\"https://cors-anywhere.herokuapp.com/\" + dropboxURL.slice(0, -1) + \"1\");\n//-------------------------------------------------------------\n//Main classes for displaying the output image array\n//-------------------------------------------------------------\n\n\nclass DisplayLogoImg extends React.Component {\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      width: \"300\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, \"Source\", React.createElement(\"img\", {\n      className: \"workImage\",\n      src: this.props.output[0],\n      alt: \"Source\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, \"Color Correction\", React.createElement(\"img\", {\n      className: \"workImage\",\n      src: this.props.output[1],\n      alt: \"Result #1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, \"Scale : Color Correction\", React.createElement(\"img\", {\n      className: \"workImage\",\n      src: this.props.output[2],\n      alt: \"Result #2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, \"Scale : Greyscale : Color Correction\", React.createElement(\"img\", {\n      className: \"workImage\",\n      src: this.props.output[3],\n      alt: \"Result #2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, \"Scale : Posterize : Color Correction\", React.createElement(\"img\", {\n      className: \"workImage\",\n      src: this.props.output[4],\n      alt: \"Result #4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      className: \"workImage\",\n      src: this.props.output[5],\n      alt: \"Result #5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      className: \"workImage\",\n      src: this.props.output[6],\n      alt: \"Result #6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      className: \"workImage\",\n      src: this.props.output[7],\n      alt: \"Result #7\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      className: \"workImage\",\n      src: this.props.output[8],\n      alt: \"Result #8\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      className: \"workImage\",\n      src: this.props.output[9],\n      alt: \"Result #9\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    })));\n  }\n\n} //-------------------------------------------------------------\n//Custom classes for each button, passes state up\n//TODO:   Merge all of one type into a single class? [buttons, forms, etc]\n//        Transfer classes into seperate file and import it\n//-------------------------------------------------------------\n\n\nclass Linkform extends React.Component {\n  render() {\n    return React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \"Dropbox Link:\", React.createElement(\"input\", {\n      type: \"text\",\n      onChange: this.props.onChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    })));\n  }\n\n}\n\nclass DebugButton extends React.Component {\n  render() {\n    return React.createElement(\"button\", {\n      onClick: () => this.props.onClick(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, \"Debug\");\n  }\n\n}\n\nclass DownloadButton extends React.Component {\n  render() {\n    return React.createElement(\"button\", {\n      onClick: () => this.props.onClick(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, \"Download BMP\");\n  }\n\n}\n\nclass ConvertButton extends React.Component {\n  render() {\n    return React.createElement(\"button\", {\n      onClick: () => this.props.onClick(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, \"Debug v2\");\n  }\n\n} //-------------------------------------------------------------\n//Main editor app class, contains most info in state\n//-------------------------------------------------------------\n\n\nclass Editor extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleDebugButtonClick = i => {\n      //Format: pixelate[bool], pixelate value, posterize[bool], posterize value, scale[bool]\n      //TODO: format better, into a function or something\n      //Color Correction\n      this.jimpLogoCreation(this.state.output[0], false, 0, false); //Scale : Color Correction\n\n      this.jimpLogoCreation(this.state.output[0], false, 0, true); //Scale : Greyscale : Color Correction\n\n      this.jimpLogoCreation(this.state.output[0], false, 0, true, true); //Scale : Posterize : Color Correction\n\n      this.jimpLogoCreation(this.state.output[0], true, 7, true);\n      this.jimpLogoCreation(this.state.output[0], true, 6, true);\n      this.jimpLogoCreation(this.state.output[0], true, 5, true);\n      this.jimpLogoCreation(this.state.output[0], true, 4, true);\n      this.jimpLogoCreation(this.state.output[0], true, 3, true);\n      this.jimpLogoCreation(this.state.output[0], true, 2, true);\n    };\n\n    this.handleConvertButtonClick = i => {\n      console.log(\"debug2\");\n      console.log(this.jimpTest(this.state.picture));\n    };\n\n    this.handleDownloadButtonClick = i => {\n      console.log(\"Download Button Clicked\");\n    };\n\n    this.state = {\n      //value that holds the path to default image, then the base64 data of render\n      //base64 used by Jimp, since it is a web-based app. Local files caused issues.\n      picture: src,\n      //Array of output pictures\n      output: [src],\n      outputIndex: 0\n    };\n    this.myRef = React.createRef(); //TODO: Bind these functions in their declaration, similar to handleX functions\n\n    this.onDrop = this.onDrop.bind(this);\n    this.onLinkChange = this.onLinkChange.bind(this);\n    this.jimpScale = this.jimpScale.bind(this);\n    this.jimpResize = this.jimpResize.bind(this);\n    this.jimpTest = this.jimpTest.bind(this);\n  }\n\n  componentDidUpdate(prevProps, prevState) {}\n  /*\n  if (prevState.picture !== this.state.picture){\n    console.log(\"Picture state has changed: \" + this.state.picture);\n    this.setState({\n      output: this.state.picture,\n      outputIndex: this.state.outputIndex + 1,\n    });\n  }\n  */\n  //-------------------------------------------------------------\n  //Functions to handle events when different buttons are clicked\n  //or values are changed\n  //-------------------------------------------------------------\n\n\n  //picture is an array passed from image uploader\n  //pull most recently uploaded picture from current session\n  //TODO: reformat these functions into handleDrop and handleLinkChange\n  onDrop(picture) {\n    //TODO: Insert function calls directly here to auto work on image\n    var localImg = URL.createObjectURL(picture[picture.length - 1]);\n    console.log(this.jimpLogoCreation(localImg, 10, 5, true)); //Set state for display\n\n    this.setState({\n      picture: URL.createObjectURL(picture[picture.length - 1])\n    }); //this.jimpScale(localImg, 200, 200);\n    //This is very janky, waits 1 second before updating while picture state is being changed\n    //TODO: Figure out some sort of wait or confirmation,\n    //      this will introduce problems with varying connection speeds\n\n    /*\n    setTimeout(function () {\n      this.jimpUpdateSize(this.state.picture);\n    }.bind(this), 1000);\n    */\n  }\n\n  onLinkChange(event) {\n    //janky way around CORS policy for getting from dropbox link, pass through cors-anywhere server\n    this.setState({\n      picture: \"https://cors-anywhere.herokuapp.com/\" + event.target.value.slice(0, -1) + \"1\"\n    });\n  } //-------------------------------------------------------------\n  //render functions for each visible element\n  //TODO: combine everything in the same div into one render function\n  //like buttons for control panel and such\n  //-------------------------------------------------------------\n\n\n  renderLogoImage() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280\n      },\n      __self: this\n    }, React.createElement(DisplayLogoImg, {\n      picture: this.state.picture,\n      output: this.state.output,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281\n      },\n      __self: this\n    }));\n  }\n\n  renderDebugButton(i) {\n    return React.createElement(DebugButton, {\n      onClick: this.handleDebugButtonClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291\n      },\n      __self: this\n    });\n  }\n\n  renderDownloadButton(i) {\n    return React.createElement(DownloadButton, {\n      onClick: this.handleDownloadButtonClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299\n      },\n      __self: this\n    });\n  }\n\n  renderConvertButton(i) {\n    return React.createElement(ConvertButton, {\n      onClick: this.handleConvertButtonClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    });\n  }\n\n  renderImageUploader() {\n    return React.createElement(ImageUploader, {\n      withIcon: true,\n      buttonText: \"Choose image\",\n      label: \"Max file size: 5mb, Filetypes accepted: .bmp | .jpg | .png\",\n      fileContainerStyle: {\n        backgroundColor: \"grey\"\n      },\n      singleImage: true,\n      onChange: this.onDrop,\n      imgExtension: ['.jpg', '.gif', '.png', '.bmp'],\n      maxFileSize: 5242880,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    });\n  }\n\n  renderLinkForm() {\n    return React.createElement(Linkform, {\n      onChange: this.onLinkChange,\n      onSubmit: this.onLinkSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330\n      },\n      __self: this\n    });\n  } //-------------------------------------------------------------\n  //Functions to do the actual editing on the image\n  //-------------------------------------------------------------\n\n\n  jimpConvert(path, x, y) {\n    jimp.read(path, function (err, image) {\n      image.getBase64(Jimp.AUTO, function (err, data) {\n        this.setState({\n          picture: data.replace(\"image/png\", \"image/bmp\")\n        });\n      }.bind(this));\n    }.bind(this));\n  }\n\n  jimpLogoCreation(path, posBool, pos, scale, grayscale) {\n    jimp.read(path, function (err, image) {\n      if (scale) image.resize(161, jimp.AUTO); //  image.scaleToFit(70,300);\n\n      if (posBool) image.posterize(pos);\n      if (grayscale) image.greyscale(); //Function to replace colors with our palette\n\n      image.scan(0, 0, image.bitmap.width, image.bitmap.height, function (x, y, idx) {\n        //First log RGB value of current pixel, toString(16) converts\n        //into hex form, padStart for 1 digit values\n        //var position = [x, y];\n        //red\n        var red = this.bitmap.data[idx];\n        var redHex = red.toString(16).padStart(2, \"0\"); //green\n\n        var green = this.bitmap.data[idx + 1];\n        var greenHex = green.toString(16).padStart(2, \"0\"); //blue\n\n        var blue = this.bitmap.data[idx + 2];\n        var blueHex = blue.toString(16).padStart(2, \"0\"); //Run nearestColor on this pixel\n\n        var close = nearestColor('#' + redHex + greenHex + blueHex).value; //DEBUG\n        //var currentColor = '#' + redHex + greenHex + blueHex;\n        //console.log(currentColor + '\\n' + close + \"\\nPosition: \" + x + ' ' + y);\n\n        var closeRed = parseInt(close.substr(1, 2), 16);\n        var closeGreen = parseInt(close.substr(3, 2), 16);\n        var closeBlue = parseInt(close.substr(5, 2), 16); //Change pixel colors into nearest from our palette\n        //red\n\n        this.bitmap.data[idx] = closeRed; //green\n\n        this.bitmap.data[idx + 1] = closeGreen; //blue\n\n        this.bitmap.data[idx + 2] = closeBlue;\n      }); //add result to output array\n\n      image.getBase64(Jimp.MIME_BMP, function (err, data) {\n        this.setState(prevState => ({\n          output: [...prevState.output, data]\n        }));\n        console.log(\"image added\");\n      }.bind(this)); //apply edited image to picture state\n\n      /*\n      image.getBase64(Jimp.MIME_BMP, function(err, data){\n        this.setState({\n          picture: data,\n        });\n      }.bind(this));\n      */\n    }.bind(this));\n  }\n\n  jimpScale(path, x, y) {\n    jimp.read(path, function (err, image) {\n      //image.scaleToFit(x,y);\n      image.getBase64(Jimp.MIME_BMP, function (err, data) {\n        this.setState(prevState => ({\n          output: [...prevState.output, data]\n        }));\n        console.log(\"image scaled\");\n      }.bind(this));\n    }.bind(this));\n  }\n\n  jimpResize(path, x, y) {\n    jimp.read(path, function (err, image) {\n      image.resize(x, y);\n      image.getBase64(Jimp.MIME_BMP, function (err, data) {\n        this.setState({\n          picture: data\n        });\n      }.bind(this));\n    }.bind(this));\n  }\n\n  jimpResizeBMP(path, x, y) {\n    jimp.read(path, function (err, image) {\n      image.resize(x, y);\n      image.getBase64(Jimp.MIME_BMP, function (err, data) {\n        this.setState({\n          bmpPicture: data\n        });\n      }.bind(this));\n    }.bind(this));\n  } //map logo onto bitmap according to preset\n  //TODO: adjust for each preset\n\n  /*\n  jimpMap(path1, path2){\n    jimp.read(this.state.bmpPicture, function(err, bmpImage) {\n      jimp.read(this.state.picture, function(err, logo) {\n        bmpImage.composite(logo, 20, 20);\n        bmpImage.getBase64(Jimp.AUTO, function(err, data){\n          this.setState({\n            bmpPicture: data,\n          });\n        }.bind(this));\n      }.bind(this));\n    }.bind(this));\n  }\n  */\n\n\n  jimpTest(path) {\n    jimp.read(path, function (err, image) {\n      console.log(image);\n    }.bind(this));\n  }\n\n  jimpPosterize(path, x) {\n    jimp.read(path, function (err, image) {\n      image.posterize(x);\n      image.getBase64(Jimp.MIME_BMP, function (err, data) {\n        this.setState({\n          picture: data\n        });\n      }.bind(this));\n    }.bind(this));\n  } //-------------------------------------------------------------\n  //Final render of the application\n  //-------------------------------------------------------------\n\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 489\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"workDisplay\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 490\n      },\n      __self: this\n    }, this.renderLogoImage()), React.createElement(\"div\", {\n      className: \"panelDisplay\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 493\n      },\n      __self: this\n    }, this.renderLinkForm(), this.renderImageUploader(), this.renderDebugButton(), this.renderConvertButton()));\n  }\n\n} //-------------------------------------------------------------\n//Overreaching App class, not nessecary at the moment but may be used later\n//-------------------------------------------------------------\n\n\nclass App extends React.Component {\n  render() {\n    return React.createElement(\"div\", {\n      className: \"app\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 511\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"app-img\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 512\n      },\n      __self: this\n    }, React.createElement(Editor, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 513\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"img-fields\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 515\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 516\n      },\n      __self: this\n    })));\n  }\n\n} //-------------------------------------------------------------\n//Final DOM render, required by React\n//-------------------------------------------------------------\n\n\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 529\n  },\n  __self: this\n}), document.getElementById('root'));","map":{"version":3,"sources":["/Users/zakstratton/Documents/logo-processor/src/index.js"],"names":["React","ReactDOM","ImageUploader","Jimp","jimp","require","basicColors","black","bleach","red","cerulean","kelly","yellow","teal","deep_pink","hibiscus","purple","lagoon","reef","clementine","green_apple","colors","onyx","charcoal","concrete","quicksilver","rich_brown","mushroom","sand","natural","navy","ultramarine","cornflower","cyan","peacock","aruba","lake","seafoam","pine","jade","turf","lime","goldenrod","sunflower","carmel","living_coral","persimmon","red_orange","burnt_orange","rust","maroon","blush","peach","lavender","iris","royal_purple","moose","violet","carrot","lapis","parrot","french_blue","nearestColor","from","src","DisplayLogoImg","Component","render","props","output","Linkform","onChange","DebugButton","onClick","DownloadButton","ConvertButton","Editor","constructor","handleDebugButtonClick","i","jimpLogoCreation","state","handleConvertButtonClick","console","log","jimpTest","picture","handleDownloadButtonClick","outputIndex","myRef","createRef","onDrop","bind","onLinkChange","jimpScale","jimpResize","componentDidUpdate","prevProps","prevState","localImg","URL","createObjectURL","length","setState","event","target","value","slice","renderLogoImage","renderDebugButton","renderDownloadButton","renderConvertButton","renderImageUploader","backgroundColor","renderLinkForm","onLinkSubmit","jimpConvert","path","x","y","read","err","image","getBase64","AUTO","data","replace","posBool","pos","scale","grayscale","resize","posterize","greyscale","scan","bitmap","width","height","idx","redHex","toString","padStart","green","greenHex","blue","blueHex","close","closeRed","parseInt","substr","closeGreen","closeBlue","MIME_BMP","jimpResizeBMP","bmpPicture","jimpPosterize","App","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.css';\n//import './style/_buttons.scss';\nimport ImageUploader from 'react-images-upload';\nimport Jimp from 'jimp/es';\n\nvar jimp = require('jimp');\n\nvar basicColors = {\n  black: '#000000',\n  bleach: '#ffffff',\n  red: '#c50f2d',\n  cerulean: '#0169ca',\n  kelly: '#21772f',\n\n  yellow: '#fff71b',\n  teal: '#007171',\n  deep_pink: '#c40876',\n\n  hibiscus: '#de4b9b',\n  purple: '#5d1e5c',\n  lagoon: '#003e66',\n  reef: '#00947d',\n  clementine: '#ff9a23',\n  green_apple: '#76c727',\n}\n\nvar colors = {\n  black: '#000000',\n  onyx: '#333538',\n  charcoal: '#5f6468',\n  concrete: '#97a0a7',\n  quicksilver: '#e4e5e6',\n  bleach: '#ffffff',\n  rich_brown: '#372820',\n  mushroom: '#716257',\n  sand: '#bab3a0',\n  natural: '#f9f4ec',\n  navy: '#081e2c',\n  ultramarine: '#29217d',\n  lagoon: '#003e66',\n  cerulean: '#0169ca',\n  cornflower: '#529afc',\n  cyan: '#009ff1',\n  peacock: '#01aec9',\n  aruba: '#9dfbe7',\n  lake: '#6ac4dd',\n  seafoam: '#4ca696',\n  reef: '#00947d',\n  teal: '#007171',\n  pine: '#2b4423',\n  kelly: '#21772f',\n  jade: '#14b25a',\n  turf: '#60933b',\n  lime: '#a0ce3e',\n  goldenrod: '#d5d03a',\n  yellow: '#fff71b',\n  sunflower: '#ffc938',\n  carmel: '#d8a15e',\n  clementine: '#ff9a23',\n  living_coral: '#fb686d',\n  persimmon: '#fd5130',\n  red_orange: '#db1d3c',\n  red: '#c50f2d',\n  burnt_orange: '#a84c28',\n  rust: '#763742',\n  maroon: '#581c32',\n  deep_pink: '#c40876',\n  hibiscus: '#de4b9b',\n  blush: '#fdaeca',\n  peach: '#f7bfab',\n  lavender: '#a08dd6',\n  iris: '#77479f',\n  purple: '#5d1e5c',\n  royal_purple: '#401e72',\n  moose: '#653c2c',\n  violet: '#6753b2',\n  green_apple: '#76c727',\n  carrot: '#fd673e',\n  lapis: '#3c2f8f',\n  parrot: '#2fd078',\n  french_blue: '#638ee4',\n};\n\nvar nearestColor = require('nearest-color').from(colors);\n\n\n//initialize the default image\nconst src = require(\"./test3.jpg\");\n//janky way around CORS policy for getting from dropbox link, pass through cors-anywhere server\n//var dropboxURL = \"0\"\n//var imgFinal = (\"https://cors-anywhere.herokuapp.com/\" + dropboxURL.slice(0, -1) + \"1\");\n\n//-------------------------------------------------------------\n//Main classes for displaying the output image array\n//-------------------------------------------------------------\nclass DisplayLogoImg extends React.Component{\n  render(){\n    return(\n      <div>\n        <div width=\"300\">\n        Source\n          <img className=\"workImage\" src={this.props.output[0]} alt=\"Source\" />\n        </div>\n        <div>\n        Color Correction\n          <img className=\"workImage\" src={this.props.output[1]} alt=\"Result #1\" />\n        </div>\n        <div>\n        Scale : Color Correction\n          <img className=\"workImage\" src={this.props.output[2]} alt=\"Result #2\" />\n        </div>\n        <div>\n        Scale : Greyscale : Color Correction\n          <img className=\"workImage\" src={this.props.output[3]} alt=\"Result #2\" />\n        </div>\n        <div>\n        Scale : Posterize : Color Correction\n          <img className=\"workImage\" src={this.props.output[4]} alt=\"Result #4\" />\n          <img className=\"workImage\" src={this.props.output[5]} alt=\"Result #5\" />\n          <img className=\"workImage\" src={this.props.output[6]} alt=\"Result #6\" />\n          <img className=\"workImage\" src={this.props.output[7]} alt=\"Result #7\" />\n          <img className=\"workImage\" src={this.props.output[8]} alt=\"Result #8\" />\n          <img className=\"workImage\" src={this.props.output[9]} alt=\"Result #9\" />\n        </div>\n      </div>\n    )\n  }\n}\n\n//-------------------------------------------------------------\n//Custom classes for each button, passes state up\n//TODO:   Merge all of one type into a single class? [buttons, forms, etc]\n//        Transfer classes into seperate file and import it\n//-------------------------------------------------------------\n\nclass Linkform extends React.Component {\n  render() {\n    return (\n      <form>\n        <label>\n          Dropbox Link:\n          <input type=\"text\" onChange={this.props.onChange} />\n        </label>\n      </form>\n    );\n  }\n}\n\nclass DebugButton extends React.Component{\n  render(){\n    return(\n      <button onClick={() => this.props.onClick()}>Debug</button>\n    )\n  }\n}\n\nclass DownloadButton extends React.Component{\n  render(){\n    return(\n      <button onClick={() => this.props.onClick()}>Download BMP</button>\n    )\n  }\n}\n\nclass ConvertButton extends React.Component{\n  render(){\n    return(\n      <button onClick={() => this.props.onClick()}>Debug v2</button>\n    )\n  }\n}\n\n//-------------------------------------------------------------\n//Main editor app class, contains most info in state\n//-------------------------------------------------------------\nclass Editor extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      //value that holds the path to default image, then the base64 data of render\n      //base64 used by Jimp, since it is a web-based app. Local files caused issues.\n      picture: src,\n      //Array of output pictures\n      output: [src],\n      outputIndex: 0,\n    };\n    this.myRef = React.createRef();\n    //TODO: Bind these functions in their declaration, similar to handleX functions\n    this.onDrop = this.onDrop.bind(this);\n    this.onLinkChange = this.onLinkChange.bind(this);\n    this.jimpScale = this.jimpScale.bind(this);\n    this.jimpResize = this.jimpResize.bind(this);\n    this.jimpTest = this.jimpTest.bind(this);\n  }\n\n  componentDidUpdate(prevProps, prevState){\n    /*\n    if (prevState.picture !== this.state.picture){\n      console.log(\"Picture state has changed: \" + this.state.picture);\n      this.setState({\n        output: this.state.picture,\n        outputIndex: this.state.outputIndex + 1,\n      });\n    }\n    */\n  }\n\n  //-------------------------------------------------------------\n  //Functions to handle events when different buttons are clicked\n  //or values are changed\n  //-------------------------------------------------------------\n  handleDebugButtonClick = (i) => {\n      //Format: pixelate[bool], pixelate value, posterize[bool], posterize value, scale[bool]\n      //TODO: format better, into a function or something\n      //Color Correction\n      this.jimpLogoCreation(this.state.output[0], false, 0, false);\n      //Scale : Color Correction\n      this.jimpLogoCreation(this.state.output[0], false, 0, true);\n      //Scale : Greyscale : Color Correction\n      this.jimpLogoCreation(this.state.output[0], false, 0, true, true);\n      //Scale : Posterize : Color Correction\n      this.jimpLogoCreation(this.state.output[0], true, 7, true);\n      this.jimpLogoCreation(this.state.output[0], true, 6, true);\n      this.jimpLogoCreation(this.state.output[0], true, 5, true);\n      this.jimpLogoCreation(this.state.output[0], true, 4, true);\n      this.jimpLogoCreation(this.state.output[0], true, 3, true);\n      this.jimpLogoCreation(this.state.output[0], true, 2, true);\n  }\n\n  handleConvertButtonClick = (i) => {\n    console.log(\"debug2\");\n    console.log(this.jimpTest(this.state.picture));\n  }\n\n  handleDownloadButtonClick = (i) => {\n    console.log(\"Download Button Clicked\");\n  }\n\n  //picture is an array passed from image uploader\n  //pull most recently uploaded picture from current session\n  //TODO: reformat these functions into handleDrop and handleLinkChange\n  onDrop(picture){\n    //TODO: Insert function calls directly here to auto work on image\n    var localImg = URL.createObjectURL(picture[picture.length - 1]);\n\n    console.log(this.jimpLogoCreation(localImg, 10, 5, true));\n\n    //Set state for display\n    this.setState({\n      picture: URL.createObjectURL(picture[picture.length - 1]),\n    });\n    //this.jimpScale(localImg, 200, 200);\n    //This is very janky, waits 1 second before updating while picture state is being changed\n    //TODO: Figure out some sort of wait or confirmation,\n    //      this will introduce problems with varying connection speeds\n    /*\n    setTimeout(function () {\n      this.jimpUpdateSize(this.state.picture);\n    }.bind(this), 1000);\n    */\n  }\n\n  onLinkChange(event){\n    //janky way around CORS policy for getting from dropbox link, pass through cors-anywhere server\n    this.setState({\n      picture: \"https://cors-anywhere.herokuapp.com/\" + event.target.value.slice(0, -1) + \"1\"\n    });\n  }\n\n  //-------------------------------------------------------------\n  //render functions for each visible element\n  //TODO: combine everything in the same div into one render function\n  //like buttons for control panel and such\n  //-------------------------------------------------------------\n\n  renderLogoImage(){\n    return (\n      <div>\n        <DisplayLogoImg\n          picture={this.state.picture}\n          output={this.state.output}\n        />\n      </div>\n    )\n  }\n\n  renderDebugButton(i){\n    return(\n      <DebugButton\n        onClick={this.handleDebugButtonClick}\n      />\n    )\n  }\n\n  renderDownloadButton(i){\n    return(\n      <DownloadButton\n        onClick={this.handleDownloadButtonClick}\n      />\n    )\n  }\n\n  renderConvertButton(i){\n    return(\n      <ConvertButton\n        onClick={this.handleConvertButtonClick}\n      />\n    )\n  }\n\n  renderImageUploader(){\n    return(\n      <ImageUploader\n        withIcon={true}\n        buttonText='Choose image'\n        label=\"Max file size: 5mb, Filetypes accepted: .bmp | .jpg | .png\"\n        fileContainerStyle={{backgroundColor: \"grey\"}}\n        singleImage={true}\n        onChange={this.onDrop}\n        imgExtension={['.jpg', '.gif', '.png', '.bmp']}\n        maxFileSize={5242880}\n      />\n    )\n  }\n\n  renderLinkForm(){\n    return(\n      <Linkform onChange={this.onLinkChange} onSubmit={this.onLinkSubmit}/>\n    )\n  }\n\n\n  //-------------------------------------------------------------\n  //Functions to do the actual editing on the image\n  //-------------------------------------------------------------\n  jimpConvert(path, x, y){\n    jimp.read(path, function(err, image) {\n      image.getBase64(Jimp.AUTO, function(err, data){\n        this.setState({\n          picture: data.replace(\"image/png\", \"image/bmp\"),\n        });\n      }.bind(this));\n    }.bind(this));\n  }\n\n\n  jimpLogoCreation(path, posBool, pos, scale, grayscale){\n    jimp.read(path, function(err, image) {\n      if (scale)\n        image.resize(161, jimp.AUTO);\n      //  image.scaleToFit(70,300);\n      if (posBool)\n        image.posterize(pos);\n      if (grayscale)\n        image.greyscale();\n\n      //Function to replace colors with our palette\n      image.scan(0, 0, image.bitmap.width, image.bitmap.height, function(x, y, idx) {\n        //First log RGB value of current pixel, toString(16) converts\n        //into hex form, padStart for 1 digit values\n        //var position = [x, y];\n        //red\n        var red = this.bitmap.data[idx];\n        var redHex = red.toString(16).padStart(2, \"0\");\n        //green\n        var green = this.bitmap.data[idx + 1];\n        var greenHex = green.toString(16).padStart(2, \"0\");\n        //blue\n        var blue = this.bitmap.data[idx + 2];\n        var blueHex = blue.toString(16).padStart(2, \"0\");\n\n        //Run nearestColor on this pixel\n        var close = nearestColor('#' + redHex + greenHex + blueHex).value;\n        //DEBUG\n        //var currentColor = '#' + redHex + greenHex + blueHex;\n        //console.log(currentColor + '\\n' + close + \"\\nPosition: \" + x + ' ' + y);\n\n\n        var closeRed = parseInt(close.substr(1,2), 16);\n        var closeGreen = parseInt(close.substr(3,2), 16);\n        var closeBlue = parseInt(close.substr(5,2), 16);\n\n        //Change pixel colors into nearest from our palette\n        //red\n        this.bitmap.data[idx] = closeRed;\n        //green\n        this.bitmap.data[idx + 1] = closeGreen;\n        //blue\n        this.bitmap.data[idx + 2] = closeBlue;\n      })\n\n      //add result to output array\n      image.getBase64(Jimp.MIME_BMP, function(err, data){\n        this.setState(prevState => ({\n          output: [...prevState.output, data]\n        }))\n        console.log(\"image added\");\n      }.bind(this));\n\n      //apply edited image to picture state\n      /*\n      image.getBase64(Jimp.MIME_BMP, function(err, data){\n        this.setState({\n          picture: data,\n        });\n      }.bind(this));\n      */\n\n\n    }.bind(this));\n  }\n\n  jimpScale(path, x, y){\n    jimp.read(path, function(err, image) {\n      //image.scaleToFit(x,y);\n      image.getBase64(Jimp.MIME_BMP, function(err, data){\n        this.setState(prevState => ({\n          output: [...prevState.output, data]\n        }))\n        console.log(\"image scaled\");\n      }.bind(this));\n    }.bind(this));\n  }\n\n  jimpResize(path, x, y){\n    jimp.read(path, function(err, image) {\n      image.resize(x,y);\n      image.getBase64(Jimp.MIME_BMP, function(err, data){\n        this.setState({\n          picture: data,\n        });\n      }.bind(this));\n    }.bind(this));\n  }\n\n  jimpResizeBMP(path, x, y){\n    jimp.read(path, function(err, image) {\n      image.resize(x,y);\n      image.getBase64(Jimp.MIME_BMP, function(err, data){\n        this.setState({\n          bmpPicture: data,\n        });\n      }.bind(this));\n    }.bind(this));\n  }\n\n  //map logo onto bitmap according to preset\n  //TODO: adjust for each preset\n\n  /*\n  jimpMap(path1, path2){\n    jimp.read(this.state.bmpPicture, function(err, bmpImage) {\n      jimp.read(this.state.picture, function(err, logo) {\n        bmpImage.composite(logo, 20, 20);\n        bmpImage.getBase64(Jimp.AUTO, function(err, data){\n          this.setState({\n            bmpPicture: data,\n          });\n        }.bind(this));\n      }.bind(this));\n    }.bind(this));\n  }\n  */\n\n  jimpTest(path){\n    jimp.read(path, function(err, image) {\n      console.log(image);\n    }.bind(this));\n  }\n\n  jimpPosterize(path, x){\n    jimp.read(path, function(err, image) {\n      image.posterize(x);\n      image.getBase64(Jimp.MIME_BMP, function(err, data){\n        this.setState({\n          picture: data,\n        });\n      }.bind(this));\n    }.bind(this));\n  }\n\n  //-------------------------------------------------------------\n  //Final render of the application\n  //-------------------------------------------------------------\n  render() {\n    return (\n      <div>\n        <div className=\"workDisplay\">\n          {this.renderLogoImage()}\n        </div>\n        <div className=\"panelDisplay\">\n          {this.renderLinkForm()}\n          {this.renderImageUploader()}\n          {this.renderDebugButton()}\n          {this.renderConvertButton()}\n        </div>\n      </div>\n    );\n  }\n}\n\n\n//-------------------------------------------------------------\n//Overreaching App class, not nessecary at the moment but may be used later\n//-------------------------------------------------------------\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"app-img\">\n          <Editor />\n        </div>\n        <div className=\"img-fields\">\n          <div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n\n//-------------------------------------------------------------\n//Final DOM render, required by React\n//-------------------------------------------------------------\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"]},"metadata":{},"sourceType":"module"}