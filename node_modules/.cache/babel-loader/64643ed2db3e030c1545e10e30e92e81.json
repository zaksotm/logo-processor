{"ast":null,"code":"var _jsxFileName = \"/Users/zakstratton/Documents/logo-processor/src/index.js\";\n//TODO/NOTES:\n//instead of storing results in state, use global array\n//maybe 2d array for properties? idk\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.css'; //import './style/_buttons.scss';\n\nimport ImageUploader from 'react-images-upload';\nimport Jimp from 'jimp/es';\n\nvar jimp = require('jimp'); //Three global color data structures, one a map of objects, one an array,\n//and one a 2D array\n//TODO: Downscale to remove map of objects, unneeded\n\n\nvar colors = {\n  black: '#000000',\n  onyx: '#333538',\n  charcoal: '#5f6468',\n  concrete: '#97a0a7',\n  quicksilver: '#e4e5e6',\n  bleach: '#ffffff',\n  rich_brown: '#372820',\n  mushroom: '#716257',\n  sand: '#bab3a0',\n  natural: '#f9f4ec',\n  navy: '#081e2c',\n  ultramarine: '#29217d',\n  lagoon: '#003e66',\n  cerulean: '#0169ca',\n  cornflower: '#529afc',\n  cyan: '#009ff1',\n  peacock: '#01aec9',\n  aruba: '#9dfbe7',\n  lake: '#6ac4dd',\n  seafoam: '#4ca696',\n  reef: '#00947d',\n  teal: '#007171',\n  pine: '#2b4423',\n  kelly: '#21772f',\n  jade: '#14b25a',\n  turf: '#60933b',\n  lime: '#a0ce3e',\n  goldenrod: '#d5d03a',\n  yellow: '#fff71b',\n  sunflower: '#ffc938',\n  carmel: '#d8a15e',\n  clementine: '#ff9a23',\n  living_coral: '#fb686d',\n  persimmon: '#fd5130',\n  red_orange: '#db1d3c',\n  red: '#c50f2d',\n  burnt_orange: '#a84c28',\n  rust: '#763742',\n  maroon: '#581c32',\n  deep_pink: '#c40876',\n  hibiscus: '#de4b9b',\n  blush: '#fdaeca',\n  peach: '#f7bfab',\n  lavender: '#a08dd6',\n  iris: '#77479f',\n  purple: '#5d1e5c',\n  royal_purple: '#401e72',\n  moose: '#653c2c',\n  violet: '#6753b2',\n  green_apple: '#76c727',\n  carrot: '#fd673e',\n  lapis: '#3c2f8f',\n  parrot: '#2fd078',\n  french_blue: '#638ee4'\n};\nvar outputImages = new Array();\nvar firstrun = true;\nvar sourceImg = \"\";\nvar sourceColorChange = \"\"; //TODO: Move initialization of arrays to seperate function\n\nvar colorsFreq = new Array(54);\nvar colorsArray = new Array(54); //Initialize colorsArray\n//load only hex values of colors into an array\n\nfor (var i = 0; i < colorsArray.length; i++) {\n  colorsArray[i] = Object.values(colors)[i];\n} //make colorsFreq into a 2D array\n\n\nfor (var i = 0; i < colorsFreq.length; i++) {\n  colorsFreq[i] = new Array(2);\n} //Initialize colorsFreq\n//copy array into new 2d array, starting with 0 for all frequencies\n\n\nfor (var i = 0; i < colorsFreq.length; i++) {\n  colorsFreq[i][0] = colorsArray[i];\n  colorsFreq[i][1] = 0;\n}\n\nvar nearestColor = require('nearest-color').from(colors); //initialize the default image\n\n\nconst src = require(\"./test2.jpg\"); //janky way around CORS policy for getting from dropbox link, pass through cors-anywhere server\n//var dropboxURL = \"0\"\n//var imgFinal = (\"https://cors-anywhere.herokuapp.com/\" + dropboxURL.slice(0, -1) + \"1\");\n//-------------------------------------------------------------\n//Main classes for displaying the output image array\n//-------------------------------------------------------------\n\n\nclass DisplayLogoImg extends React.Component {\n  render() {\n    return React.createElement(\"div\", {\n      className: \"workDisplay\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"gallery\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, \"Source\"), React.createElement(\"img\", {\n      className: \"workImage\",\n      src: sourceImg,\n      alt: \"Source\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"gallery\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, \"Results\"), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, \"Scaled\"), React.createElement(\"img\", {\n      className: \"workImage\",\n      src: outputImages[0],\n      alt: \"Result #1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, \"Scaled + Our Colors\"), React.createElement(\"img\", {\n      className: \"workImage\",\n      src: outputImages[1],\n      alt: \"Result #1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, \"Scaled + Greyscale + Our Colors\"), React.createElement(\"img\", {\n      className: \"workImage\",\n      src: outputImages[2],\n      alt: \"Result #1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, \"Scaled + Our Colors (Reduced)\"), React.createElement(\"img\", {\n      className: \"workImage\",\n      src: outputImages[3],\n      alt: \"Result #1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      className: \"workImage\",\n      src: outputImages[4],\n      alt: \"Result #1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      className: \"workImage\",\n      src: outputImages[5],\n      alt: \"Result #1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      className: \"workImage\",\n      src: outputImages[6],\n      alt: \"Result #1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, \"Scaled + Posterized (Values 7-5-3-2) + Our Colors\"), React.createElement(\"img\", {\n      className: \"workImage\",\n      src: outputImages[7],\n      alt: \"Result #1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      className: \"workImage\",\n      src: outputImages[8],\n      alt: \"Result #1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      className: \"workImage\",\n      src: outputImages[9],\n      alt: \"Result #1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      className: \"workImage\",\n      src: outputImages[10],\n      alt: \"Result #1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, \"Scaled + Posterized (Value 7) + Our Colors (Max 5,4,3,2)\"), React.createElement(\"img\", {\n      className: \"workImage\",\n      src: outputImages[11],\n      alt: \"Result #1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      className: \"workImage\",\n      src: outputImages[12],\n      alt: \"Result #1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      className: \"workImage\",\n      src: outputImages[13],\n      alt: \"Result #1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      className: \"workImage\",\n      src: outputImages[14],\n      alt: \"Result #1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, \"Scaled + Posterized (Value 5) + Our Colors (Max 5,4,3,2)\"), React.createElement(\"img\", {\n      className: \"workImage\",\n      src: outputImages[15],\n      alt: \"Result #1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      className: \"workImage\",\n      src: outputImages[16],\n      alt: \"Result #1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      className: \"workImage\",\n      src: outputImages[17],\n      alt: \"Result #1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      className: \"workImage\",\n      src: outputImages[18],\n      alt: \"Result #1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, \"Scaled + Posterized (Value 3) + Our Colors (Max 5,4,3,2)\"), React.createElement(\"img\", {\n      className: \"workImage\",\n      src: outputImages[19],\n      alt: \"Result #1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      className: \"workImage\",\n      src: outputImages[20],\n      alt: \"Result #1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      className: \"workImage\",\n      src: outputImages[21],\n      alt: \"Result #1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      className: \"workImage\",\n      src: outputImages[22],\n      alt: \"Result #1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, \"Scaled + Posterized (Value 2) + Our Colors (Max 5,4,3,2)\"), React.createElement(\"img\", {\n      className: \"workImage\",\n      src: outputImages[23],\n      alt: \"Result #1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      className: \"workImage\",\n      src: outputImages[24],\n      alt: \"Result #1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      className: \"workImage\",\n      src: outputImages[25],\n      alt: \"Result #1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      className: \"workImage\",\n      src: outputImages[26],\n      alt: \"Result #1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    })));\n  }\n\n} //-------------------------------------------------------------\n//Custom classes for each button, passes state up\n//TODO:   Merge all of one type into a single class? [buttons, forms, etc]\n//        Transfer classes into seperate file and import it\n//-------------------------------------------------------------\n\n\nclass Linkform extends React.Component {\n  render() {\n    return React.createElement(\"form\", {\n      className: \"myForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, \"Dropbox Link:\", React.createElement(\"input\", {\n      type: \"text\",\n      onChange: this.props.onChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    })));\n  }\n\n}\n\nclass ScaleForm extends React.Component {\n  render() {\n    return React.createElement(\"form\", {\n      className: \"myForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, \"Resize X:\", React.createElement(\"input\", {\n      type: \"number\",\n      onChange: this.props.onChangeX,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    })), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, \"Resize Y:\", React.createElement(\"input\", {\n      type: \"number\",\n      onChange: this.props.onChangeY,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    })), \"Leave blank to keep aspect ratio\");\n  }\n\n}\n\nclass StretchForm extends React.Component {\n  render() {\n    return React.createElement(\"form\", {\n      className: \"myForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, \"Stretch 25% vertically?:\", React.createElement(\"input\", {\n      type: \"checkbox\",\n      onChange: this.props.onChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    })));\n  }\n\n} //TODO: Change hardcoded max images for loading to variable\n\n\nclass ProcessButton extends React.Component {\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"myButton\",\n      onClick: () => this.props.onClick(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, \"BMP My Logo!\"));\n  }\n\n}\n\nclass SubmitButton extends React.Component {\n  render() {\n    return React.createElement(\"button\", {\n      className: \"myButton\",\n      onClick: () => this.props.onClick(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, \"Submit Link\");\n  }\n\n}\n\nclass DownloadButton extends React.Component {\n  render() {\n    return React.createElement(\"button\", {\n      onClick: () => this.props.onClick(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }, \"Download BMP\");\n  }\n\n}\n\nclass ColorChangeButton extends React.Component {\n  render() {\n    return React.createElement(\"button\", {\n      className: \"myButton\",\n      onClick: () => this.props.onClick(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }, \"Replace Colors Only\");\n  }\n\n} //-------------------------------------------------------------\n//Main editor app class, contains most info in state\n//-------------------------------------------------------------\n\n\nclass Editor extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmitButtonClick = i => {\n      console.log(\"Submit Button Clicked\");\n      outputImages[0] = this.state.dropboxLink;\n      sourceImg = this.state.dropboxLink;\n      console.log(sourceImg);\n    };\n\n    this.handleDownloadButtonClick = i => {\n      console.log(\"Download Button Clicked\");\n    };\n\n    this.handleLinkChange = i => {\n      this.setState({\n        dropboxLink: \"https://cors-anywhere.herokuapp.com/\" + i.target.value.slice(0, -1) + \"1\"\n      });\n    };\n\n    this.state = {\n      //value that holds the path to default image, then the base64 data of render\n      //base64 used by Jimp, since it is a web-based app. Local files caused issues.\n      picture: src,\n      //Array of output pictures\n      output: [],\n      dropboxLink: \"\",\n      scaleX: 0,\n      scaleY: 0,\n      imagesLoaded: 0,\n      stretch: false\n    };\n    this.myRef = React.createRef(); //TODO: Bind these functions in their declaration, similar to handleX functions\n\n    this.onDrop = this.onDrop.bind(this);\n    this.onScaleFormChangeX = this.onScaleFormChangeX.bind(this);\n    this.onScaleFormChangeY = this.onScaleFormChangeY.bind(this);\n    this.onStretchFormChange = this.onStretchFormChange.bind(this);\n    this.onProcessButtonClick = this.onProcessButtonClick.bind(this);\n    this.onColorChangeButtonClick = this.onColorChangeButtonClick.bind(this);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.output !== this.state.output) {//console.log(\"output state has changed: \" + this.state.output[0]);\n    }\n  } //-------------------------------------------------------------\n  //Functions to handle events when different buttons are clicked\n  //or values are changed\n  //-------------------------------------------------------------\n\n\n  //picture is an array passed from image uploader\n  //pull most recently uploaded picture from current session\n  //TODO: reformat these functions into handleDrop and handleLinkChange\n  onDrop(picture) {\n    //TODO: Insert function calls directly here to auto work on image\n    var localImg = URL.createObjectURL(picture[picture.length - 1]); //Set state for display\n\n    outputImages.push(localImg);\n    sourceImg = localImg;\n    /*\n    this.setState({\n      output: [URL.createObjectURL(picture[picture.length - 1])],\n    });\n    */\n  }\n\n  onScaleFormChangeX(event) {\n    //form takes in a string, need to parse into an Int for use in Jimp\n    this.setState({\n      scaleX: parseInt(event.target.value, 10)\n    });\n  }\n\n  onScaleFormChangeY(event) {\n    //form takes in a string, need to parse into an Int for use in Jimp\n    this.setState({\n      scaleY: parseInt(event.target.value, 10)\n    });\n  }\n\n  onStretchFormChange(event) {\n    //console.log(event.target.checked);\n    this.setState({\n      stretch: event.target.checked\n    });\n  }\n\n  async onProcessButtonClick() {\n    //Scale image first\n    await this.jimpResize(outputImages[0], true, this.state.scaleX, this.state.scaleY, this.state.stretch); //Scale : Color Correction\n\n    await this.jimpLogoCreationAsync(outputImages[0], false, 0); //Scale : Greyscale : Color Correction\n\n    await this.jimpLogoCreationAsync(outputImages[0], false, 0, true); //Scale : Color Correction (Reduction)\n\n    await this.jimpLogoCreationAsync(outputImages[0], false, 0, false, 5);\n    await this.jimpLogoCreationAsync(outputImages[0], false, 0, false, 4);\n    await this.jimpLogoCreationAsync(outputImages[0], false, 0, false, 3);\n    await this.jimpLogoCreationAsync(outputImages[0], false, 0, false, 2); //Scale : Posterize : Color Correction\n\n    await this.jimpLogoCreationAsync(outputImages[0], true, 7);\n    await this.jimpLogoCreationAsync(outputImages[0], true, 5);\n    await this.jimpLogoCreationAsync(outputImages[0], true, 3);\n    await this.jimpLogoCreationAsync(outputImages[0], true, 2); //Scale : Posterize : Color Correction (Reduction)\n\n    await this.jimpLogoCreationAsync(outputImages[0], true, 7, false, 5);\n    await this.jimpLogoCreationAsync(outputImages[0], true, 7, false, 4);\n    await this.jimpLogoCreationAsync(outputImages[0], true, 7, false, 3);\n    await this.jimpLogoCreationAsync(outputImages[0], true, 7, false, 2);\n    await this.jimpLogoCreationAsync(outputImages[0], true, 5, false, 5);\n    await this.jimpLogoCreationAsync(outputImages[0], true, 5, false, 4);\n    await this.jimpLogoCreationAsync(outputImages[0], true, 5, false, 3);\n    await this.jimpLogoCreationAsync(outputImages[0], true, 5, false, 2);\n    await this.jimpLogoCreationAsync(outputImages[0], true, 3, false, 5);\n    await this.jimpLogoCreationAsync(outputImages[0], true, 3, false, 4);\n    await this.jimpLogoCreationAsync(outputImages[0], true, 3, false, 3);\n    await this.jimpLogoCreationAsync(outputImages[0], true, 3, false, 2);\n    await this.jimpLogoCreationAsync(outputImages[0], true, 2, false, 5);\n    await this.jimpLogoCreationAsync(outputImages[0], true, 2, false, 4);\n    await this.jimpLogoCreationAsync(outputImages[0], true, 2, false, 3);\n    await this.jimpLogoCreationAsync(outputImages[0], true, 2, false, 2);\n  }\n\n  async onColorChangeButtonClick() {\n    await this.jimpLogoCreationAsync(outputImages[0], false, 0, false, undefined, true);\n  } //-------------------------------------------------------------\n  //render functions for each visible element\n  //TODO: combine everything in the same div into one render function\n  //like buttons for control panel and such\n  //-------------------------------------------------------------\n\n\n  renderLogoImage() {\n    if (outputImages[25] !== undefined) return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392\n      },\n      __self: this\n    }, React.createElement(DisplayLogoImg, {\n      picture: this.state.picture,\n      output: this.state.output,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393\n      },\n      __self: this\n    }));else if (sourceColorChange !== \"\") return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: sourceColorChange,\n      alt: \"sourceColorChange\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402\n      },\n      __self: this\n    }));\n  }\n\n  renderProcessButton(i) {\n    return React.createElement(ProcessButton, {\n      onClick: this.onProcessButtonClick,\n      imagesLoaded: this.state.imagesLoaded,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409\n      },\n      __self: this\n    });\n  }\n\n  renderSubmitButton(i) {\n    return React.createElement(SubmitButton, {\n      onClick: this.handleSubmitButtonClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418\n      },\n      __self: this\n    });\n  }\n\n  renderDownloadButton(i) {\n    return React.createElement(DownloadButton, {\n      onClick: this.handleDownloadButtonClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426\n      },\n      __self: this\n    });\n  }\n\n  renderColorChangeButton(i) {\n    return React.createElement(ColorChangeButton, {\n      onClick: this.onColorChangeButtonClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 434\n      },\n      __self: this\n    });\n  }\n\n  renderScaleForm(i) {\n    return React.createElement(ScaleForm, {\n      onChangeX: this.onScaleFormChangeX,\n      onChangeY: this.onScaleFormChangeY,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 442\n      },\n      __self: this\n    });\n  }\n\n  renderStretchForm(i) {\n    return React.createElement(StretchForm, {\n      onChange: this.onStretchFormChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 451\n      },\n      __self: this\n    });\n  }\n\n  renderImageUploader() {\n    return React.createElement(ImageUploader, {\n      withIcon: false,\n      buttonText: \"Choose image\",\n      label: \"Max file size: 5mb, Filetypes accepted: .bmp | .jpg | .png\",\n      fileContainerStyle: {\n        backgroundColor: \"EDEEF0\"\n      },\n      singleImage: true,\n      onChange: this.onDrop,\n      imgExtension: ['.jpg', '.gif', '.png', '.bmp'],\n      maxFileSize: 5242880,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459\n      },\n      __self: this\n    });\n  }\n\n  renderLinkForm() {\n    return React.createElement(Linkform, {\n      onChange: this.handleLinkChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 474\n      },\n      __self: this\n    });\n  } //-------------------------------------------------------------\n  //Functions to do the actual editing on the image\n  //-------------------------------------------------------------\n  //TODO: Update to using promise\n\n\n  async jimpResize(path, scale, scaleX, scaleY, stretch) {\n    let image = await jimp.read(path);\n\n    if (scale) {\n      if (scaleX === 0) {\n        if (scaleY === 0) {\n          //if both fields are not input, scale to 100 X and scale Y according to aspect ratio\n          console.log(\"Found no size variables\");\n          image.resize(100, jimp.AUTO, jimp.RESIZE_BEZIER);\n        } else {\n          //if only the Y vaue is input,\n          console.log(\"Only found y value\");\n          image.resize(jimp.AUTO, scaleY, jimp.RESIZE_BEZIER);\n        }\n      } else if (scaleY === 0) {\n        if (scaleX === 0) {\n          //if both fields are not input, scale to 100 X and scale Y according to aspect ratio\n          console.log(\"Found no size variables\");\n          image.resize(100, jimp.AUTO, jimp.RESIZE_BEZIER);\n        } else {\n          //if only the X vaue is input,\n          console.log(\"Only found x value\");\n          image.resize(scaleX, jimp.AUTO, jimp.RESIZE_BEZIER);\n        }\n      } //if both values are input\n      else {\n          console.log(\"Found both size variables\");\n          image.resize(scaleX, scaleY, jimp.RESIZE_BEZIER);\n        }\n    }\n\n    if (stretch) {\n      var newHeight = Math.round(image.bitmap.height * 1.25);\n      image.resize(image.bitmap.width, newHeight, jimp.RESIZE_BEZIER);\n      console.log(\"Image stretched\");\n    }\n\n    let data = await image.getBase64Async(Jimp.MIME_BMP);\n    outputImages[0] = data;\n  }\n\n  async jimpLogoCreationAsync(path, posBool, pos, grayscale, numColors, onlyColorBool) {\n    let image = await jimp.read(path);\n    console.log(\"Image read\"); //create local array of colors and populate it from global\n    //TODO: Check if need to unallocate memory here\n\n    var localColors = new Array(54);\n\n    if (localColors[0] === undefined) {\n      for (var i = 0; i < colorsArray.length; i++) {\n        localColors[i] = colorsArray[i];\n      }\n    }\n\n    console.log(\"localColors Initialized\");\n    if (posBool) image.posterize(pos);\n    if (grayscale) image.greyscale(); //initialize getNewColor with new colorsArray\n\n    var getFirstColor = nearestColor.from(colorsArray); //function to scan for most popular colors in image, only do on first run\n\n    if (firstrun) {\n      console.log('Calculating most popular colors....');\n      image.scan(0, 0, image.bitmap.width, image.bitmap.height, function (x, y, idx) {\n        //First log RGB value of current pixel, toString(16) converts\n        //into hex form, padStart for 1 digit values\n        //var position = [x, y];\n        //red\n        var red = this.bitmap.data[idx];\n        var redHex = red.toString(16).padStart(2, \"0\"); //green\n\n        var green = this.bitmap.data[idx + 1];\n        var greenHex = green.toString(16).padStart(2, \"0\"); //blue\n\n        var blue = this.bitmap.data[idx + 2];\n        var blueHex = blue.toString(16).padStart(2, \"0\"); //Run nearestColor on this pixel\n\n        var close = getFirstColor('#' + redHex + greenHex + blueHex); //future timesave: Don't run this every time, only log frequency\n        //the first time you parse the image\n\n        for (var i = 0; i < colorsFreq.length; i++) {\n          if (colorsFreq[i][0] === close) {\n            colorsFreq[i][1]++;\n          }\n        }\n      });\n      firstrun = false; //sort colorsFreq by frequency\n\n      colorsFreq.sort(sortFunction);\n\n      function sortFunction(a, b) {\n        if (a[1] === b[1]) {\n          return 0;\n        } else {\n          return a[1] > b[1] ? -1 : 1;\n        }\n      }\n    }\n\n    console.log(\"Colors Calculated\");\n\n    if (numColors !== undefined) {\n      localColors.length = numColors; //update colorsArray with new color order,\n      //important for removing correct colors when downsizing\n\n      for (var i = 0; i < numColors; i++) {\n        localColors[i] = colorsFreq[i][0];\n      } //console.log(\"localColors Updated: \" + localColors);\n\n    } //\n\n\n    var getNewColor = nearestColor.from(localColors); //Function to replace colors with our palette\n\n    console.log(\"Replacing colors...\");\n    image.scan(0, 0, image.bitmap.width, image.bitmap.height, function (x, y, idx) {\n      //First log RGB value of current pixel, toString(16) converts\n      //into hex form, padStart for 1 digit values\n      //var position = [x, y];\n      //red\n      var red = this.bitmap.data[idx];\n      var redHex = red.toString(16).padStart(2, \"0\"); //green\n\n      var green = this.bitmap.data[idx + 1];\n      var greenHex = green.toString(16).padStart(2, \"0\"); //blue\n\n      var blue = this.bitmap.data[idx + 2];\n      var blueHex = blue.toString(16).padStart(2, \"0\"); //Run nearestColor on this pixel\n\n      var close = getNewColor('#' + redHex + greenHex + blueHex);\n      var closeRed = parseInt(close.substr(1, 2), 16);\n      var closeGreen = parseInt(close.substr(3, 2), 16);\n      var closeBlue = parseInt(close.substr(5, 2), 16); //Change pixel colors into nearest from our palette\n      //red\n\n      this.bitmap.data[idx] = closeRed; //green\n\n      this.bitmap.data[idx + 1] = closeGreen; //blue\n\n      this.bitmap.data[idx + 2] = closeBlue;\n    });\n    console.log(\"Colors Replaced\"); //add result to output array\n\n    let data = await image.getBase64Async(Jimp.MIME_BMP);\n    outputImages.push(data);\n    if (onlyColorBool) sourceColorChange = data;\n    this.forceUpdate();\n  } //-------------------------------------------------------------\n  //Final render of the application\n  //-------------------------------------------------------------\n\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 652\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"selectImageDisplay\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 653\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 654\n      },\n      __self: this\n    }, \"Select Your Image\"), this.renderLinkForm(), this.renderSubmitButton(), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 657\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      className: \"or\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 658\n      },\n      __self: this\n    }, \" OR\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 659\n      },\n      __self: this\n    }), this.renderImageUploader()), React.createElement(\"div\", {\n      className: \"optionsDisplay\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 662\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 663\n      },\n      __self: this\n    }, \"Options\"), this.renderScaleForm(), this.renderStretchForm()), React.createElement(\"div\", {\n      className: \"buttonDisplay\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 667\n      },\n      __self: this\n    }, this.renderProcessButton(), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 669\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      className: \"or\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 670\n      },\n      __self: this\n    }, \" OR\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 671\n      },\n      __self: this\n    }), this.renderColorChangeButton()), React.createElement(\"div\", {\n      className: \"workDisplay\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 674\n      },\n      __self: this\n    }, this.renderLogoImage()));\n  }\n\n} //-------------------------------------------------------------\n//Overreaching App class, not nessecary at the moment but may be used later\n//-------------------------------------------------------------\n\n\nclass App extends React.Component {\n  render() {\n    return React.createElement(\"div\", {\n      className: \"app\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 689\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"app-img\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 690\n      },\n      __self: this\n    }, React.createElement(Editor, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 691\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"img-fields\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 693\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 694\n      },\n      __self: this\n    })));\n  }\n\n} //-------------------------------------------------------------\n//Final DOM render, required by React\n//-------------------------------------------------------------\n\n\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 707\n  },\n  __self: this\n}), document.getElementById('root'));","map":{"version":3,"sources":["/Users/zakstratton/Documents/logo-processor/src/index.js"],"names":["React","ReactDOM","ImageUploader","Jimp","jimp","require","colors","black","onyx","charcoal","concrete","quicksilver","bleach","rich_brown","mushroom","sand","natural","navy","ultramarine","lagoon","cerulean","cornflower","cyan","peacock","aruba","lake","seafoam","reef","teal","pine","kelly","jade","turf","lime","goldenrod","yellow","sunflower","carmel","clementine","living_coral","persimmon","red_orange","red","burnt_orange","rust","maroon","deep_pink","hibiscus","blush","peach","lavender","iris","purple","royal_purple","moose","violet","green_apple","carrot","lapis","parrot","french_blue","outputImages","Array","firstrun","sourceImg","sourceColorChange","colorsFreq","colorsArray","i","length","Object","values","nearestColor","from","src","DisplayLogoImg","Component","render","Linkform","props","onChange","ScaleForm","onChangeX","onChangeY","StretchForm","ProcessButton","onClick","SubmitButton","DownloadButton","ColorChangeButton","Editor","constructor","handleSubmitButtonClick","console","log","state","dropboxLink","handleDownloadButtonClick","handleLinkChange","setState","target","value","slice","picture","output","scaleX","scaleY","imagesLoaded","stretch","myRef","createRef","onDrop","bind","onScaleFormChangeX","onScaleFormChangeY","onStretchFormChange","onProcessButtonClick","onColorChangeButtonClick","componentDidUpdate","prevProps","prevState","localImg","URL","createObjectURL","push","event","parseInt","checked","jimpResize","jimpLogoCreationAsync","undefined","renderLogoImage","renderProcessButton","renderSubmitButton","renderDownloadButton","renderColorChangeButton","renderScaleForm","renderStretchForm","renderImageUploader","backgroundColor","renderLinkForm","path","scale","image","read","resize","AUTO","RESIZE_BEZIER","newHeight","Math","round","bitmap","height","width","data","getBase64Async","MIME_BMP","posBool","pos","grayscale","numColors","onlyColorBool","localColors","posterize","greyscale","getFirstColor","scan","x","y","idx","redHex","toString","padStart","green","greenHex","blue","blueHex","close","sort","sortFunction","a","b","getNewColor","closeRed","substr","closeGreen","closeBlue","forceUpdate","App","document","getElementById"],"mappings":"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","sourcesContent":["//TODO/NOTES:\n//instead of storing results in state, use global array\n//maybe 2d array for properties? idk\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.css';\n//import './style/_buttons.scss';\nimport ImageUploader from 'react-images-upload';\nimport Jimp from 'jimp/es';\n\nvar jimp = require('jimp');\n\n\n//Three global color data structures, one a map of objects, one an array,\n//and one a 2D array\n//TODO: Downscale to remove map of objects, unneeded\nvar colors = {\n  black: '#000000',\n  onyx: '#333538',\n  charcoal: '#5f6468',\n  concrete: '#97a0a7',\n  quicksilver: '#e4e5e6',\n  bleach: '#ffffff',\n  rich_brown: '#372820',\n  mushroom: '#716257',\n  sand: '#bab3a0',\n  natural: '#f9f4ec',\n  navy: '#081e2c',\n  ultramarine: '#29217d',\n  lagoon: '#003e66',\n  cerulean: '#0169ca',\n  cornflower: '#529afc',\n  cyan: '#009ff1',\n  peacock: '#01aec9',\n  aruba: '#9dfbe7',\n  lake: '#6ac4dd',\n  seafoam: '#4ca696',\n  reef: '#00947d',\n  teal: '#007171',\n  pine: '#2b4423',\n  kelly: '#21772f',\n  jade: '#14b25a',\n  turf: '#60933b',\n  lime: '#a0ce3e',\n  goldenrod: '#d5d03a',\n  yellow: '#fff71b',\n  sunflower: '#ffc938',\n  carmel: '#d8a15e',\n  clementine: '#ff9a23',\n  living_coral: '#fb686d',\n  persimmon: '#fd5130',\n  red_orange: '#db1d3c',\n  red: '#c50f2d',\n  burnt_orange: '#a84c28',\n  rust: '#763742',\n  maroon: '#581c32',\n  deep_pink: '#c40876',\n  hibiscus: '#de4b9b',\n  blush: '#fdaeca',\n  peach: '#f7bfab',\n  lavender: '#a08dd6',\n  iris: '#77479f',\n  purple: '#5d1e5c',\n  royal_purple: '#401e72',\n  moose: '#653c2c',\n  violet: '#6753b2',\n  green_apple: '#76c727',\n  carrot: '#fd673e',\n  lapis: '#3c2f8f',\n  parrot: '#2fd078',\n  french_blue: '#638ee4',\n};\n\nvar outputImages = new Array();\nvar firstrun = true;\nvar sourceImg = \"\";\nvar sourceColorChange = \"\";\n\n//TODO: Move initialization of arrays to seperate function\nvar colorsFreq = new Array(54);\nvar colorsArray = new Array(54);\n\n//Initialize colorsArray\n//load only hex values of colors into an array\nfor (var i = 0; i < colorsArray.length; i++){\n  colorsArray[i] = Object.values(colors)[i];\n}\n\n//make colorsFreq into a 2D array\nfor (var i = 0; i < colorsFreq.length; i++){\n  colorsFreq[i] = new Array(2);\n}\n\n//Initialize colorsFreq\n//copy array into new 2d array, starting with 0 for all frequencies\nfor (var i = 0; i < colorsFreq.length; i++){\n  colorsFreq[i][0] = colorsArray[i];\n  colorsFreq[i][1] = 0;\n}\n\nvar nearestColor = require('nearest-color').from(colors);\n\n//initialize the default image\nconst src = require(\"./test2.jpg\");\n//janky way around CORS policy for getting from dropbox link, pass through cors-anywhere server\n//var dropboxURL = \"0\"\n//var imgFinal = (\"https://cors-anywhere.herokuapp.com/\" + dropboxURL.slice(0, -1) + \"1\");\n\n//-------------------------------------------------------------\n//Main classes for displaying the output image array\n//-------------------------------------------------------------\nclass DisplayLogoImg extends React.Component{\n  render(){\n    return(\n      <div className=\"workDisplay\">\n        <div className=\"gallery\">\n          <h1>Source</h1>\n          <img className=\"workImage\" src={sourceImg} alt=\"Source\" />\n        </div>\n        <div className=\"gallery\">\n          <h1>Results</h1>\n          <h2>Scaled</h2>\n          <img className=\"workImage\" src={outputImages[0]} alt=\"Result #1\" />\n          <h2>Scaled + Our Colors</h2>\n          <img className=\"workImage\" src={outputImages[1]} alt=\"Result #1\" />\n          <h2>Scaled + Greyscale + Our Colors</h2>\n          <img className=\"workImage\" src={outputImages[2]} alt=\"Result #1\" />\n          <h2>Scaled + Our Colors (Reduced)</h2>\n          <img className=\"workImage\" src={outputImages[3]} alt=\"Result #1\" />\n          <img className=\"workImage\" src={outputImages[4]} alt=\"Result #1\" />\n          <img className=\"workImage\" src={outputImages[5]} alt=\"Result #1\" />\n          <img className=\"workImage\" src={outputImages[6]} alt=\"Result #1\" />\n          <h2>Scaled + Posterized (Values 7-5-3-2) + Our Colors</h2>\n          <img className=\"workImage\" src={outputImages[7]} alt=\"Result #1\" />\n          <img className=\"workImage\" src={outputImages[8]} alt=\"Result #1\" />\n          <img className=\"workImage\" src={outputImages[9]} alt=\"Result #1\" />\n          <img className=\"workImage\" src={outputImages[10]} alt=\"Result #1\" />\n          <h2>Scaled + Posterized (Value 7) + Our Colors (Max 5,4,3,2)</h2>\n          <img className=\"workImage\" src={outputImages[11]} alt=\"Result #1\" />\n          <img className=\"workImage\" src={outputImages[12]} alt=\"Result #1\" />\n          <img className=\"workImage\" src={outputImages[13]} alt=\"Result #1\" />\n          <img className=\"workImage\" src={outputImages[14]} alt=\"Result #1\" />\n          <h2>Scaled + Posterized (Value 5) + Our Colors (Max 5,4,3,2)</h2>\n          <img className=\"workImage\" src={outputImages[15]} alt=\"Result #1\" />\n          <img className=\"workImage\" src={outputImages[16]} alt=\"Result #1\" />\n          <img className=\"workImage\" src={outputImages[17]} alt=\"Result #1\" />\n          <img className=\"workImage\" src={outputImages[18]} alt=\"Result #1\" />\n          <h2>Scaled + Posterized (Value 3) + Our Colors (Max 5,4,3,2)</h2>\n          <img className=\"workImage\" src={outputImages[19]} alt=\"Result #1\" />\n          <img className=\"workImage\" src={outputImages[20]} alt=\"Result #1\" />\n          <img className=\"workImage\" src={outputImages[21]} alt=\"Result #1\" />\n          <img className=\"workImage\" src={outputImages[22]} alt=\"Result #1\" />\n          <h2>Scaled + Posterized (Value 2) + Our Colors (Max 5,4,3,2)</h2>\n          <img className=\"workImage\" src={outputImages[23]} alt=\"Result #1\" />\n          <img className=\"workImage\" src={outputImages[24]} alt=\"Result #1\" />\n          <img className=\"workImage\" src={outputImages[25]} alt=\"Result #1\" />\n          <img className=\"workImage\" src={outputImages[26]} alt=\"Result #1\" />\n        </div>\n      </div>\n    )\n  }\n}\n\n//-------------------------------------------------------------\n//Custom classes for each button, passes state up\n//TODO:   Merge all of one type into a single class? [buttons, forms, etc]\n//        Transfer classes into seperate file and import it\n//-------------------------------------------------------------\n\nclass Linkform extends React.Component {\n  render() {\n    return (\n      <form className=\"myForm\">\n        <label>\n          Dropbox Link:\n          <input type=\"text\" onChange={this.props.onChange}/>\n        </label>\n      </form>\n    );\n  }\n}\n\nclass ScaleForm extends React.Component{\n  render(){\n    return(\n      <form className=\"myForm\">\n        <label>\n          Resize X:\n          <input type=\"number\" onChange={this.props.onChangeX} />\n        </label>\n        <label>\n          Resize Y:\n          <input type=\"number\" onChange={this.props.onChangeY} />\n        </label>\n        Leave blank to keep aspect ratio\n      </form>\n    )\n  }\n}\n\nclass StretchForm extends React.Component{\n  render(){\n    return(\n      <form className=\"myForm\">\n        <label>\n          Stretch 25% vertically?:\n          <input type=\"checkbox\" onChange={this.props.onChange} />\n        </label>\n      </form>\n    )\n  }\n}\n\n//TODO: Change hardcoded max images for loading to variable\nclass ProcessButton extends React.Component{\n  render(){\n    return(\n      <div>\n        <button className=\"myButton\" onClick={() => this.props.onClick()}>BMP My Logo!</button>\n      </div>\n    )\n  }\n}\n\nclass SubmitButton extends React.Component{\n  render(){\n    return(\n      <button className=\"myButton\" onClick={() => this.props.onClick()}>Submit Link</button>\n    )\n  }\n}\n\nclass DownloadButton extends React.Component{\n  render(){\n    return(\n      <button onClick={() => this.props.onClick()}>Download BMP</button>\n    )\n  }\n}\n\nclass ColorChangeButton extends React.Component{\n  render(){\n    return(\n      <button className=\"myButton\" onClick={() => this.props.onClick()}>Replace Colors Only</button>\n    )\n  }\n}\n\n//-------------------------------------------------------------\n//Main editor app class, contains most info in state\n//-------------------------------------------------------------\nclass Editor extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      //value that holds the path to default image, then the base64 data of render\n      //base64 used by Jimp, since it is a web-based app. Local files caused issues.\n      picture: src,\n      //Array of output pictures\n      output: [],\n      dropboxLink: \"\",\n      scaleX: 0,\n      scaleY: 0,\n      imagesLoaded: 0,\n      stretch: false,\n    };\n    this.myRef = React.createRef();\n    //TODO: Bind these functions in their declaration, similar to handleX functions\n    this.onDrop = this.onDrop.bind(this);\n    this.onScaleFormChangeX = this.onScaleFormChangeX.bind(this);\n    this.onScaleFormChangeY = this.onScaleFormChangeY.bind(this);\n    this.onStretchFormChange = this.onStretchFormChange.bind(this);\n    this.onProcessButtonClick = this.onProcessButtonClick.bind(this);\n    this.onColorChangeButtonClick = this.onColorChangeButtonClick.bind(this);\n  }\n\n  componentDidUpdate(prevProps, prevState){\n    if (prevState.output !== this.state.output){\n      //console.log(\"output state has changed: \" + this.state.output[0]);\n    }\n  }\n\n  //-------------------------------------------------------------\n  //Functions to handle events when different buttons are clicked\n  //or values are changed\n  //-------------------------------------------------------------\n  handleSubmitButtonClick = (i) => {\n    console.log(\"Submit Button Clicked\");\n    outputImages[0] = this.state.dropboxLink;\n    sourceImg = this.state.dropboxLink;\n    console.log(sourceImg);\n  }\n\n  handleDownloadButtonClick = (i) => {\n    console.log(\"Download Button Clicked\");\n  }\n\n  handleLinkChange = (i) => {\n    this.setState({\n      dropboxLink: \"https://cors-anywhere.herokuapp.com/\" + i.target.value.slice(0, -1) + \"1\",\n    });\n  }\n\n  //picture is an array passed from image uploader\n  //pull most recently uploaded picture from current session\n  //TODO: reformat these functions into handleDrop and handleLinkChange\n\n  onDrop(picture){\n    //TODO: Insert function calls directly here to auto work on image\n    var localImg = URL.createObjectURL(picture[picture.length - 1]);\n    //Set state for display\n    outputImages.push(localImg);\n    sourceImg = localImg;\n    /*\n    this.setState({\n      output: [URL.createObjectURL(picture[picture.length - 1])],\n    });\n    */\n  }\n\n  onScaleFormChangeX(event){\n    //form takes in a string, need to parse into an Int for use in Jimp\n    this.setState({\n      scaleX: parseInt(event.target.value, 10)\n    });\n  }\n\n  onScaleFormChangeY(event){\n    //form takes in a string, need to parse into an Int for use in Jimp\n    this.setState({\n      scaleY: parseInt(event.target.value, 10)\n    });\n  }\n\n  onStretchFormChange(event){\n    //console.log(event.target.checked);\n    this.setState({\n      stretch: event.target.checked,\n    });\n  }\n\n  async onProcessButtonClick(){\n    //Scale image first\n    await this.jimpResize(outputImages[0], true, this.state.scaleX, this.state.scaleY, this.state.stretch);\n    //Scale : Color Correction\n    await this.jimpLogoCreationAsync(outputImages[0], false, 0);\n    //Scale : Greyscale : Color Correction\n    await this.jimpLogoCreationAsync(outputImages[0], false, 0, true);\n    //Scale : Color Correction (Reduction)\n    await this.jimpLogoCreationAsync(outputImages[0], false, 0, false, 5);\n    await this.jimpLogoCreationAsync(outputImages[0], false, 0, false, 4);\n    await this.jimpLogoCreationAsync(outputImages[0], false, 0, false, 3);\n    await this.jimpLogoCreationAsync(outputImages[0], false, 0, false, 2);\n    //Scale : Posterize : Color Correction\n    await this.jimpLogoCreationAsync(outputImages[0], true, 7);\n    await this.jimpLogoCreationAsync(outputImages[0], true, 5);\n    await this.jimpLogoCreationAsync(outputImages[0], true, 3);\n    await this.jimpLogoCreationAsync(outputImages[0], true, 2);\n    //Scale : Posterize : Color Correction (Reduction)\n    await this.jimpLogoCreationAsync(outputImages[0], true, 7, false, 5);\n    await this.jimpLogoCreationAsync(outputImages[0], true, 7, false, 4);\n    await this.jimpLogoCreationAsync(outputImages[0], true, 7, false, 3);\n    await this.jimpLogoCreationAsync(outputImages[0], true, 7, false, 2);\n    await this.jimpLogoCreationAsync(outputImages[0], true, 5, false, 5);\n    await this.jimpLogoCreationAsync(outputImages[0], true, 5, false, 4);\n    await this.jimpLogoCreationAsync(outputImages[0], true, 5, false, 3);\n    await this.jimpLogoCreationAsync(outputImages[0], true, 5, false, 2);\n    await this.jimpLogoCreationAsync(outputImages[0], true, 3, false, 5);\n    await this.jimpLogoCreationAsync(outputImages[0], true, 3, false, 4);\n    await this.jimpLogoCreationAsync(outputImages[0], true, 3, false, 3);\n    await this.jimpLogoCreationAsync(outputImages[0], true, 3, false, 2);\n    await this.jimpLogoCreationAsync(outputImages[0], true, 2, false, 5);\n    await this.jimpLogoCreationAsync(outputImages[0], true, 2, false, 4);\n    await this.jimpLogoCreationAsync(outputImages[0], true, 2, false, 3);\n    await this.jimpLogoCreationAsync(outputImages[0], true, 2, false, 2);\n  }\n\n  async onColorChangeButtonClick(){\n    await this.jimpLogoCreationAsync(outputImages[0], false, 0, false, undefined, true);\n  }\n\n  //-------------------------------------------------------------\n  //render functions for each visible element\n  //TODO: combine everything in the same div into one render function\n  //like buttons for control panel and such\n  //-------------------------------------------------------------\n\n  renderLogoImage(){\n    if (outputImages[25] !== undefined)\n      return (\n        <div>\n          <DisplayLogoImg\n            picture={this.state.picture}\n            output={this.state.output}\n          />\n        </div>\n      )\n    else if (sourceColorChange !== \"\")\n      return (\n        <div>\n          <img src={sourceColorChange} alt=\"sourceColorChange\"/>\n        </div>\n      )\n  }\n\n  renderProcessButton(i){\n    return(\n      <ProcessButton\n        onClick={this.onProcessButtonClick}\n        imagesLoaded={this.state.imagesLoaded}\n      />\n    )\n  }\n\n  renderSubmitButton(i){\n    return(\n      <SubmitButton\n        onClick={this.handleSubmitButtonClick}\n      />\n    )\n  }\n\n  renderDownloadButton(i){\n    return(\n      <DownloadButton\n        onClick={this.handleDownloadButtonClick}\n      />\n    )\n  }\n\n  renderColorChangeButton(i){\n    return(\n      <ColorChangeButton\n        onClick={this.onColorChangeButtonClick}\n      />\n    )\n  }\n\n  renderScaleForm(i){\n    return(\n      <ScaleForm\n        onChangeX={this.onScaleFormChangeX}\n        onChangeY={this.onScaleFormChangeY}\n      />\n    )\n  }\n\n  renderStretchForm(i){\n    return(\n      <StretchForm\n        onChange={this.onStretchFormChange}\n      />\n    )\n  }\n\n  renderImageUploader(){\n    return(\n      <ImageUploader\n        withIcon={false}\n        buttonText='Choose image'\n        label=\"Max file size: 5mb, Filetypes accepted: .bmp | .jpg | .png\"\n        fileContainerStyle={{backgroundColor: \"EDEEF0\"}}\n        singleImage={true}\n        onChange={this.onDrop}\n        imgExtension={['.jpg', '.gif', '.png', '.bmp']}\n        maxFileSize={5242880}\n      />\n    )\n  }\n\n  renderLinkForm(){\n    return(\n      <Linkform onChange={this.handleLinkChange}/>\n    )\n  }\n\n\n  //-------------------------------------------------------------\n  //Functions to do the actual editing on the image\n  //-------------------------------------------------------------\n  //TODO: Update to using promise\n  async jimpResize(path, scale, scaleX, scaleY, stretch){\n    let image = await jimp.read(path);\n\n    if (scale){\n      if (scaleX === 0){\n        if (scaleY === 0){\n          //if both fields are not input, scale to 100 X and scale Y according to aspect ratio\n          console.log(\"Found no size variables\");\n          image.resize(100, jimp.AUTO, jimp.RESIZE_BEZIER);\n        }\n        else {\n          //if only the Y vaue is input,\n          console.log(\"Only found y value\");\n          image.resize(jimp.AUTO, scaleY, jimp.RESIZE_BEZIER);\n        }\n      }\n      else if (scaleY === 0){\n        if (scaleX === 0){\n          //if both fields are not input, scale to 100 X and scale Y according to aspect ratio\n          console.log(\"Found no size variables\");\n          image.resize(100, jimp.AUTO, jimp.RESIZE_BEZIER);\n        }\n        else {\n          //if only the X vaue is input,\n          console.log(\"Only found x value\");\n          image.resize(scaleX, jimp.AUTO, jimp.RESIZE_BEZIER);\n        }\n      }\n      //if both values are input\n      else {\n        console.log(\"Found both size variables\");\n        image.resize(scaleX, scaleY, jimp.RESIZE_BEZIER);\n      }\n    }\n    if (stretch){\n      var newHeight = Math.round(image.bitmap.height * 1.25);\n      image.resize(image.bitmap.width, newHeight, jimp.RESIZE_BEZIER);\n      console.log(\"Image stretched\");\n    }\n\n    let data = await image.getBase64Async(Jimp.MIME_BMP);\n    outputImages[0] = data;\n  }\n\n  async jimpLogoCreationAsync(path, posBool, pos, grayscale, numColors, onlyColorBool){\n    let image = await jimp.read(path);\n    console.log(\"Image read\");\n\n    //create local array of colors and populate it from global\n    //TODO: Check if need to unallocate memory here\n    var localColors = new Array(54);\n    if (localColors[0] === undefined){\n      for (var i = 0; i < colorsArray.length; i++){\n        localColors[i] = colorsArray[i];\n      }\n    }\n    console.log(\"localColors Initialized\");\n    if (posBool)\n      image.posterize(pos);\n    if (grayscale)\n      image.greyscale();\n\n    //initialize getNewColor with new colorsArray\n    var getFirstColor = nearestColor.from(colorsArray);\n\n    //function to scan for most popular colors in image, only do on first run\n    if (firstrun){\n      console.log('Calculating most popular colors....');\n      image.scan(0, 0, image.bitmap.width, image.bitmap.height, function(x, y, idx) {\n        //First log RGB value of current pixel, toString(16) converts\n        //into hex form, padStart for 1 digit values\n        //var position = [x, y];\n        //red\n        var red = this.bitmap.data[idx];\n        var redHex = red.toString(16).padStart(2, \"0\");\n        //green\n        var green = this.bitmap.data[idx + 1];\n        var greenHex = green.toString(16).padStart(2, \"0\");\n        //blue\n        var blue = this.bitmap.data[idx + 2];\n        var blueHex = blue.toString(16).padStart(2, \"0\");\n\n        //Run nearestColor on this pixel\n        var close = getFirstColor('#' + redHex + greenHex + blueHex);\n\n        //future timesave: Don't run this every time, only log frequency\n        //the first time you parse the image\n        for (var i = 0; i < colorsFreq.length; i++){\n          if (colorsFreq[i][0] === close){\n            colorsFreq[i][1]++;\n          }\n        }\n      })\n      firstrun = false;\n\n      //sort colorsFreq by frequency\n      colorsFreq.sort(sortFunction);\n      function sortFunction(a, b){\n        if (a[1] === b[1]) {\n          return 0;\n        }\n        else {\n          return (a[1] > b[1]) ? -1 : 1;\n        }\n      }\n    }\n\n    console.log(\"Colors Calculated\");\n\n    if (numColors !== undefined){\n      localColors.length = numColors;\n      //update colorsArray with new color order,\n      //important for removing correct colors when downsizing\n      for (var i = 0; i < numColors; i++){\n        localColors[i] = colorsFreq[i][0];\n      }\n      //console.log(\"localColors Updated: \" + localColors);\n    }\n\n    //\n    var getNewColor = nearestColor.from(localColors);\n\n    //Function to replace colors with our palette\n    console.log(\"Replacing colors...\");\n    image.scan(0, 0, image.bitmap.width, image.bitmap.height, function(x, y, idx) {\n      //First log RGB value of current pixel, toString(16) converts\n      //into hex form, padStart for 1 digit values\n      //var position = [x, y];\n      //red\n      var red = this.bitmap.data[idx];\n      var redHex = red.toString(16).padStart(2, \"0\");\n      //green\n      var green = this.bitmap.data[idx + 1];\n      var greenHex = green.toString(16).padStart(2, \"0\");\n      //blue\n      var blue = this.bitmap.data[idx + 2];\n      var blueHex = blue.toString(16).padStart(2, \"0\");\n\n      //Run nearestColor on this pixel\n      var close = getNewColor('#' + redHex + greenHex + blueHex);\n\n      var closeRed = parseInt(close.substr(1,2), 16);\n      var closeGreen = parseInt(close.substr(3,2), 16);\n      var closeBlue = parseInt(close.substr(5,2), 16);\n\n      //Change pixel colors into nearest from our palette\n      //red\n      this.bitmap.data[idx] = closeRed;\n      //green\n      this.bitmap.data[idx + 1] = closeGreen;\n      //blue\n      this.bitmap.data[idx + 2] = closeBlue;\n    })\n\n    console.log(\"Colors Replaced\");\n\n    //add result to output array\n    let data = await image.getBase64Async(Jimp.MIME_BMP);\n    outputImages.push(data);\n\n    if (onlyColorBool)\n      sourceColorChange = data;\n    this.forceUpdate();\n  }\n  //-------------------------------------------------------------\n  //Final render of the application\n  //-------------------------------------------------------------\n  render() {\n    return (\n      <div>\n        <div className=\"selectImageDisplay\">\n          <h1>Select Your Image</h1>\n          {this.renderLinkForm()}\n          {this.renderSubmitButton()}\n          <br></br>\n          <p className=\"or\"> OR</p>\n          <br></br>\n          {this.renderImageUploader()}\n        </div>\n        <div className=\"optionsDisplay\">\n          <h1>Options</h1>\n          {this.renderScaleForm()}\n          {this.renderStretchForm()}\n        </div>\n        <div className=\"buttonDisplay\">\n          {this.renderProcessButton()}\n          <br></br>\n          <p className=\"or\"> OR</p>\n          <br></br>\n          {this.renderColorChangeButton()}\n        </div>\n        <div className=\"workDisplay\">\n          {this.renderLogoImage()}\n        </div>\n      </div>\n    );\n  }\n}\n\n\n//-------------------------------------------------------------\n//Overreaching App class, not nessecary at the moment but may be used later\n//-------------------------------------------------------------\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"app-img\">\n          <Editor />\n        </div>\n        <div className=\"img-fields\">\n          <div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n\n//-------------------------------------------------------------\n//Final DOM render, required by React\n//-------------------------------------------------------------\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"]},"metadata":{},"sourceType":"module"}