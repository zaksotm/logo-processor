{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = configure;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _core = _interopRequireWildcard(require(\"@jimp/core\"));\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        (0, _defineProperty2[\"default\"])(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction configure(configuration) {\n  var jimpInstance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _core[\"default\"];\n  var jimpConfig = {\n    hasAlpha: {},\n    encoders: {},\n    decoders: {},\n    \"class\": {},\n    constants: {}\n  };\n\n  function addToConfig(newConfig) {\n    Object.entries(newConfig).forEach(function (_ref) {\n      var _ref2 = (0, _slicedToArray2[\"default\"])(_ref, 2),\n          key = _ref2[0],\n          value = _ref2[1];\n\n      jimpConfig[key] = _objectSpread({}, jimpConfig[key], {}, value);\n    });\n  }\n\n  function addImageType(typeModule) {\n    var type = typeModule();\n\n    if (Array.isArray(type.mime)) {\n      _core.addType.apply(void 0, (0, _toConsumableArray2[\"default\"])(type.mime));\n    } else {\n      Object.entries(type.mime).forEach(function (mimeType) {\n        return _core.addType.apply(void 0, (0, _toConsumableArray2[\"default\"])(mimeType));\n      });\n    }\n\n    delete type.mime;\n    addToConfig(type);\n  }\n\n  function addPlugin(pluginModule) {\n    var plugin = pluginModule(_core.jimpEvChange) || {};\n\n    if (!plugin[\"class\"] && !plugin.constants) {\n      // Default to class function\n      addToConfig({\n        \"class\": plugin\n      });\n    } else {\n      addToConfig(plugin);\n    }\n  }\n\n  if (configuration.types) {\n    configuration.types.forEach(addImageType);\n    jimpInstance.decoders = _objectSpread({}, jimpInstance.decoders, {}, jimpConfig.decoders);\n    jimpInstance.encoders = _objectSpread({}, jimpInstance.encoders, {}, jimpConfig.encoders);\n    jimpInstance.hasAlpha = _objectSpread({}, jimpInstance.hasAlpha, {}, jimpConfig.hasAlpha);\n  }\n\n  if (configuration.plugins) {\n    configuration.plugins.forEach(addPlugin);\n  }\n\n  (0, _core.addJimpMethods)(jimpConfig[\"class\"], jimpInstance);\n  (0, _core.addConstants)(jimpConfig.constants, jimpInstance);\n  return _core[\"default\"];\n}","map":{"version":3,"sources":["../src/index.js"],"names":["jimpInstance","Jimp","jimpConfig","hasAlpha","encoders","decoders","constants","Object","key","value","type","typeModule","Array","addType","addToConfig","plugin","pluginModule","jimpEvChange","configuration"],"mappings":"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","sourcesContent":["import Jimp, {\n  addType,\n  addJimpMethods,\n  addConstants,\n  jimpEvChange\n} from '@jimp/core';\n\nexport default function configure(configuration, jimpInstance = Jimp) {\n  const jimpConfig = {\n    hasAlpha: {},\n    encoders: {},\n    decoders: {},\n    class: {},\n    constants: {}\n  };\n\n  function addToConfig(newConfig) {\n    Object.entries(newConfig).forEach(([key, value]) => {\n      jimpConfig[key] = {\n        ...jimpConfig[key],\n        ...value\n      };\n    });\n  }\n\n  function addImageType(typeModule) {\n    const type = typeModule();\n\n    if (Array.isArray(type.mime)) {\n      addType(...type.mime);\n    } else {\n      Object.entries(type.mime).forEach(mimeType => addType(...mimeType));\n    }\n\n    delete type.mime;\n    addToConfig(type);\n  }\n\n  function addPlugin(pluginModule) {\n    const plugin = pluginModule(jimpEvChange) || {};\n    if (!plugin.class && !plugin.constants) {\n      // Default to class function\n      addToConfig({ class: plugin });\n    } else {\n      addToConfig(plugin);\n    }\n  }\n\n  if (configuration.types) {\n    configuration.types.forEach(addImageType);\n\n    jimpInstance.decoders = {\n      ...jimpInstance.decoders,\n      ...jimpConfig.decoders\n    };\n    jimpInstance.encoders = {\n      ...jimpInstance.encoders,\n      ...jimpConfig.encoders\n    };\n    jimpInstance.hasAlpha = {\n      ...jimpInstance.hasAlpha,\n      ...jimpConfig.hasAlpha\n    };\n  }\n\n  if (configuration.plugins) {\n    configuration.plugins.forEach(addPlugin);\n  }\n\n  addJimpMethods(jimpConfig.class, jimpInstance);\n  addConstants(jimpConfig.constants, jimpInstance);\n\n  return Jimp;\n}\n"]},"metadata":{},"sourceType":"script"}