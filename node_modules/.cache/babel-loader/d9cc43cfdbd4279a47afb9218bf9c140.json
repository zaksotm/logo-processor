{"ast":null,"code":"(function (context) {\n  /**\n   * Defines an available color.\n   *\n   * @typedef {Object} ColorSpec\n   * @property {string=} name A name for the color, e.g., 'red'\n   * @property {string} source The hex-based color string, e.g., '#FF0'\n   * @property {RGB} rgb The {@link RGB} color values\n   */\n\n  /**\n   * Describes a matched color.\n   *\n   * @typedef {Object} ColorMatch\n   * @property {string} name The name of the matched color, e.g., 'red'\n   * @property {string} value The hex-based color string, e.g., '#FF0'\n   * @property {RGB} rgb The {@link RGB} color values.\n   */\n\n  /**\n   * Provides the RGB breakdown of a color.\n   *\n   * @typedef {Object} RGB\n   * @property {number} r The red component, from 0 to 255\n   * @property {number} g The green component, from 0 to 255\n   * @property {number} b The blue component, from 0 to 255\n   */\n\n  /**\n   * Gets the nearest color, from the given list of {@link ColorSpec} objects\n   * (which defaults to {@link nearestColor.DEFAULT_COLORS}).\n   *\n   * Probably you wouldn't call this method directly. Instead you'd get a custom\n   * color matcher by calling {@link nearestColor.from}.\n   *\n   * @public\n   * @param {RGB|string} needle Either an {@link RGB} color or a hex-based\n   *     string representing one, e.g., '#FF0'\n   * @param {Array.<ColorSpec>=} colors An optional list of available colors\n   *     (defaults to {@link nearestColor.DEFAULT_COLORS})\n   * @return {ColorMatch|string} If the colors in the provided list had names,\n   *     then a {@link ColorMatch} object with the name and (hex) value of the\n   *     nearest color from the list. Otherwise, simply the hex value.\n   *\n   * @example\n   * nearestColor({ r: 200, g: 50, b: 50 }); // => '#f00'\n   * nearestColor('#f11');                   // => '#f00'\n   * nearestColor('#f88');                   // => '#f80'\n   * nearestColor('#ffe');                   // => '#ff0'\n   * nearestColor('#efe');                   // => '#ff0'\n   * nearestColor('#abc');                   // => '#808'\n   * nearestColor('red');                    // => '#f00'\n   * nearestColor('foo');                    // => throws\n   */\n  function nearestColor(needle, colors) {\n    needle = parseColor(needle);\n\n    if (!needle) {\n      return null;\n    }\n\n    var distanceSq,\n        minDistanceSq = Infinity,\n        rgb,\n        value;\n    colors || (colors = nearestColor.DEFAULT_COLORS);\n\n    for (var i = 0; i < colors.length; ++i) {\n      rgb = colors[i].rgb;\n      distanceSq = Math.pow(needle.r - rgb.r, 2) + Math.pow(needle.g - rgb.g, 2) + Math.pow(needle.b - rgb.b, 2);\n\n      if (distanceSq < minDistanceSq) {\n        minDistanceSq = distanceSq;\n        value = colors[i];\n      }\n    }\n\n    if (value.name) {\n      return {\n        name: value.name,\n        value: value.source,\n        rgb: value.rgb,\n        distance: Math.sqrt(minDistanceSq)\n      };\n    }\n\n    return value.source;\n  }\n  /**\n   * Provides a matcher to find the nearest color based on the provided list of\n   * available colors.\n   *\n   * @public\n   * @param {Array.<string>|Object} availableColors An array of hex-based color\n   *     strings, or an object mapping color *names* to hex values.\n   * @return {function(string):ColorMatch|string} A function with the same\n   *     behavior as {@link nearestColor}, but with the list of colors\n   *     predefined.\n   *\n   * @example\n   * var colors = {\n   *   'maroon': '#800',\n   *   'light yellow': { r: 255, g: 255, b: 51 },\n   *   'pale blue': '#def',\n   *   'white': 'fff'\n   * };\n   *\n   * var bgColors = [\n   *   '#eee',\n   *   '#444'\n   * ];\n   *\n   * var invalidColors = {\n   *   'invalid': 'foo'\n   * };\n   *\n   * var getColor = nearestColor.from(colors);\n   * var getBGColor = getColor.from(bgColors);\n   * var getAnyColor = nearestColor.from(colors).or(bgColors);\n   *\n   * getColor('ffe');\n   * // => { name: 'white', value: 'fff', rgb: { r: 255, g: 255, b: 255 }, distance: 17}\n   *\n   * getColor('#f00');\n   * // => { name: 'maroon', value: '#800', rgb: { r: 136, g: 0, b: 0 }, distance: 119}\n   *\n   * getColor('#ff0');\n   * // => { name: 'light yellow', value: '#ffff33', rgb: { r: 255, g: 255, b: 51 }, distance: 51}\n   *\n   * getBGColor('#fff'); // => '#eee'\n   * getBGColor('#000'); // => '#444'\n   *\n   * getAnyColor('#f00');\n   * // => { name: 'maroon', value: '#800', rgb: { r: 136, g: 0, b: 0 }, distance: 119}\n   *\n   * getAnyColor('#888'); // => '#444'\n   *\n   * nearestColor.from(invalidColors); // => throws\n   */\n\n\n  nearestColor.from = function from(availableColors) {\n    var colors = mapColors(availableColors),\n        nearestColorBase = nearestColor;\n\n    var matcher = function nearestColor(hex) {\n      return nearestColorBase(hex, colors);\n    }; // Keep the 'from' method, to support changing the list of available colors\n    // multiple times without needing to keep a reference to the original\n    // nearestColor function.\n\n\n    matcher.from = from; // Also provide a way to combine multiple color lists.\n\n    matcher.or = function or(alternateColors) {\n      var extendedColors = colors.concat(mapColors(alternateColors));\n      return nearestColor.from(extendedColors);\n    };\n\n    return matcher;\n  };\n  /**\n   * Given either an array or object of colors, returns an array of\n   * {@link ColorSpec} objects (with {@link RGB} values).\n   *\n   * @private\n   * @param {Array.<string>|Object} colors An array of hex-based color strings, or\n   *     an object mapping color *names* to hex values.\n   * @return {Array.<ColorSpec>} An array of {@link ColorSpec} objects\n   *     representing the same colors passed in.\n   */\n\n\n  function mapColors(colors) {\n    if (colors instanceof Array) {\n      return colors.map(function (color) {\n        return createColorSpec(color);\n      });\n    }\n\n    return Object.keys(colors).map(function (name) {\n      return createColorSpec(colors[name], name);\n    });\n  }\n\n  ;\n  /**\n   * Parses a color from a string.\n   *\n   * @private\n   * @param {RGB|string} source\n   * @return {RGB}\n   *\n   * @example\n   * parseColor({ r: 3, g: 22, b: 111 }); // => { r: 3, g: 22, b: 111 }\n   * parseColor('#f00');                  // => { r: 255, g: 0, b: 0 }\n   * parseColor('#04fbc8');               // => { r: 4, g: 251, b: 200 }\n   * parseColor('#FF0');                  // => { r: 255, g: 255, b: 0 }\n   * parseColor('rgb(3, 10, 100)');       // => { r: 3, g: 10, b: 100 }\n   * parseColor('rgb(50%, 0%, 50%)');     // => { r: 128, g: 0, b: 128 }\n   * parseColor('aqua');                  // => { r: 0, g: 255, b: 255 }\n   * parseColor('fff');                   // => { r: 255, g: 255, b: 255 }\n   * parseColor('foo');                   // => throws\n   */\n\n  function parseColor(source) {\n    var red, green, blue;\n\n    if (typeof source === 'object') {\n      return source;\n    }\n\n    if (source in nearestColor.STANDARD_COLORS) {\n      return parseColor(nearestColor.STANDARD_COLORS[source]);\n    }\n\n    var hexMatch = source.match(/^#?((?:[0-9a-f]{3}){1,2})$/i);\n\n    if (hexMatch) {\n      hexMatch = hexMatch[1];\n\n      if (hexMatch.length === 3) {\n        hexMatch = [hexMatch.charAt(0) + hexMatch.charAt(0), hexMatch.charAt(1) + hexMatch.charAt(1), hexMatch.charAt(2) + hexMatch.charAt(2)];\n      } else {\n        hexMatch = [hexMatch.substring(0, 2), hexMatch.substring(2, 4), hexMatch.substring(4, 6)];\n      }\n\n      red = parseInt(hexMatch[0], 16);\n      green = parseInt(hexMatch[1], 16);\n      blue = parseInt(hexMatch[2], 16);\n      return {\n        r: red,\n        g: green,\n        b: blue\n      };\n    }\n\n    var rgbMatch = source.match(/^rgb\\(\\s*(\\d{1,3}%?),\\s*(\\d{1,3}%?),\\s*(\\d{1,3}%?)\\s*\\)$/i);\n\n    if (rgbMatch) {\n      red = parseComponentValue(rgbMatch[1]);\n      green = parseComponentValue(rgbMatch[2]);\n      blue = parseComponentValue(rgbMatch[3]);\n      return {\n        r: red,\n        g: green,\n        b: blue\n      };\n    }\n\n    throw Error('\"' + source + '\" is not a valid color');\n  }\n  /**\n   * Creates a {@link ColorSpec} from either a string or an {@link RGB}.\n   *\n   * @private\n   * @param {string|RGB} input\n   * @param {string=} name\n   * @return {ColorSpec}\n   *\n   * @example\n   * createColorSpec('#800'); // => {\n   *   source: '#800',\n   *   rgb: { r: 136, g: 0, b: 0 }\n   * }\n   *\n   * createColorSpec('#800', 'maroon'); // => {\n   *   name: 'maroon',\n   *   source: '#800',\n   *   rgb: { r: 136, g: 0, b: 0 }\n   * }\n   */\n\n\n  function createColorSpec(input, name) {\n    var color = {};\n\n    if (name) {\n      color.name = name;\n    }\n\n    if (typeof input === 'string') {\n      color.source = input;\n      color.rgb = parseColor(input);\n    } else if (typeof input === 'object') {\n      // This is for if/when we're concatenating lists of colors.\n      if (input.source) {\n        return createColorSpec(input.source, input.name);\n      }\n\n      color.rgb = input;\n      color.source = rgbToHex(input);\n    }\n\n    return color;\n  }\n  /**\n   * Parses a value between 0-255 from a string.\n   *\n   * @private\n   * @param {string} string\n   * @return {number}\n   *\n   * @example\n   * parseComponentValue('100');  // => 100\n   * parseComponentValue('100%'); // => 255\n   * parseComponentValue('50%');  // => 128\n   */\n\n\n  function parseComponentValue(string) {\n    if (string.charAt(string.length - 1) === '%') {\n      return Math.round(parseInt(string, 10) * 255 / 100);\n    }\n\n    return Number(string);\n  }\n  /**\n   * Converts an {@link RGB} color to its hex representation.\n   *\n   * @private\n   * @param {RGB} rgb\n   * @return {string}\n   *\n   * @example\n   * rgbToHex({ r: 255, g: 128, b: 0 }); // => '#ff8000'\n   */\n\n\n  function rgbToHex(rgb) {\n    return '#' + leadingZero(rgb.r.toString(16)) + leadingZero(rgb.g.toString(16)) + leadingZero(rgb.b.toString(16));\n  }\n  /**\n   * Puts a 0 in front of a numeric string if it's only one digit. Otherwise\n   * nothing (just returns the value passed in).\n   *\n   * @private\n   * @param {string} value\n   * @return\n   *\n   * @example\n   * leadingZero('1');  // => '01'\n   * leadingZero('12'); // => '12'\n   */\n\n\n  function leadingZero(value) {\n    if (value.length === 1) {\n      value = '0' + value;\n    }\n\n    return value;\n  }\n  /**\n   * A map from the names of standard CSS colors to their hex values.\n   */\n\n\n  nearestColor.STANDARD_COLORS = {\n    aqua: '#0ff',\n    black: '#000',\n    blue: '#00f',\n    fuchsia: '#f0f',\n    gray: '#808080',\n    green: '#008000',\n    lime: '#0f0',\n    maroon: '#800000',\n    navy: '#000080',\n    olive: '#808000',\n    orange: '#ffa500',\n    purple: '#800080',\n    red: '#f00',\n    silver: '#c0c0c0',\n    teal: '#008080',\n    white: '#fff',\n    yellow: '#ff0'\n  };\n  /**\n   * Default colors. Comprises the colors of the rainbow (good ol' ROY G. BIV).\n   * This list will be used for calls to {@nearestColor} that don't specify a list\n   * of available colors to match.\n   */\n\n  nearestColor.DEFAULT_COLORS = mapColors(['#f00', // r\n  '#f80', // o\n  '#ff0', // y\n  '#0f0', // g\n  '#00f', // b\n  '#008', // i\n  '#808' // v\n  ]);\n  nearestColor.VERSION = '0.4.4';\n\n  if (typeof module === 'object' && module && module.exports) {\n    module.exports = nearestColor;\n  } else {\n    context.nearestColor = nearestColor;\n  }\n})(this);","map":{"version":3,"sources":["/Users/zakstratton/Documents/logo-processor/node_modules/nearest-color/nearestColor.js"],"names":["context","nearestColor","needle","colors","parseColor","distanceSq","minDistanceSq","Infinity","rgb","value","DEFAULT_COLORS","i","length","Math","pow","r","g","b","name","source","distance","sqrt","from","availableColors","mapColors","nearestColorBase","matcher","hex","or","alternateColors","extendedColors","concat","Array","map","color","createColorSpec","Object","keys","red","green","blue","STANDARD_COLORS","hexMatch","match","charAt","substring","parseInt","rgbMatch","parseComponentValue","Error","input","rgbToHex","string","round","Number","leadingZero","toString","aqua","black","fuchsia","gray","lime","maroon","navy","olive","orange","purple","silver","teal","white","yellow","VERSION","module","exports"],"mappings":"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","sourcesContent":["(function(context) {\n\n  /**\n   * Defines an available color.\n   *\n   * @typedef {Object} ColorSpec\n   * @property {string=} name A name for the color, e.g., 'red'\n   * @property {string} source The hex-based color string, e.g., '#FF0'\n   * @property {RGB} rgb The {@link RGB} color values\n   */\n\n  /**\n   * Describes a matched color.\n   *\n   * @typedef {Object} ColorMatch\n   * @property {string} name The name of the matched color, e.g., 'red'\n   * @property {string} value The hex-based color string, e.g., '#FF0'\n   * @property {RGB} rgb The {@link RGB} color values.\n   */\n\n  /**\n   * Provides the RGB breakdown of a color.\n   *\n   * @typedef {Object} RGB\n   * @property {number} r The red component, from 0 to 255\n   * @property {number} g The green component, from 0 to 255\n   * @property {number} b The blue component, from 0 to 255\n   */\n\n  /**\n   * Gets the nearest color, from the given list of {@link ColorSpec} objects\n   * (which defaults to {@link nearestColor.DEFAULT_COLORS}).\n   *\n   * Probably you wouldn't call this method directly. Instead you'd get a custom\n   * color matcher by calling {@link nearestColor.from}.\n   *\n   * @public\n   * @param {RGB|string} needle Either an {@link RGB} color or a hex-based\n   *     string representing one, e.g., '#FF0'\n   * @param {Array.<ColorSpec>=} colors An optional list of available colors\n   *     (defaults to {@link nearestColor.DEFAULT_COLORS})\n   * @return {ColorMatch|string} If the colors in the provided list had names,\n   *     then a {@link ColorMatch} object with the name and (hex) value of the\n   *     nearest color from the list. Otherwise, simply the hex value.\n   *\n   * @example\n   * nearestColor({ r: 200, g: 50, b: 50 }); // => '#f00'\n   * nearestColor('#f11');                   // => '#f00'\n   * nearestColor('#f88');                   // => '#f80'\n   * nearestColor('#ffe');                   // => '#ff0'\n   * nearestColor('#efe');                   // => '#ff0'\n   * nearestColor('#abc');                   // => '#808'\n   * nearestColor('red');                    // => '#f00'\n   * nearestColor('foo');                    // => throws\n   */\n  function nearestColor(needle, colors) {\n    needle = parseColor(needle);\n\n    if (!needle) {\n      return null;\n    }\n\n    var distanceSq,\n        minDistanceSq = Infinity,\n        rgb,\n        value;\n\n    colors || (colors = nearestColor.DEFAULT_COLORS);\n\n    for (var i = 0; i < colors.length; ++i) {\n      rgb = colors[i].rgb;\n\n      distanceSq = (\n        Math.pow(needle.r - rgb.r, 2) +\n        Math.pow(needle.g - rgb.g, 2) +\n        Math.pow(needle.b - rgb.b, 2)\n      );\n\n      if (distanceSq < minDistanceSq) {\n        minDistanceSq = distanceSq;\n        value = colors[i];\n      }\n    }\n\n    if (value.name) {\n      return {\n        name: value.name,\n        value: value.source,\n        rgb: value.rgb,\n        distance: Math.sqrt(minDistanceSq)\n      };\n    }\n\n    return value.source;\n  }\n\n  /**\n   * Provides a matcher to find the nearest color based on the provided list of\n   * available colors.\n   *\n   * @public\n   * @param {Array.<string>|Object} availableColors An array of hex-based color\n   *     strings, or an object mapping color *names* to hex values.\n   * @return {function(string):ColorMatch|string} A function with the same\n   *     behavior as {@link nearestColor}, but with the list of colors\n   *     predefined.\n   *\n   * @example\n   * var colors = {\n   *   'maroon': '#800',\n   *   'light yellow': { r: 255, g: 255, b: 51 },\n   *   'pale blue': '#def',\n   *   'white': 'fff'\n   * };\n   *\n   * var bgColors = [\n   *   '#eee',\n   *   '#444'\n   * ];\n   *\n   * var invalidColors = {\n   *   'invalid': 'foo'\n   * };\n   *\n   * var getColor = nearestColor.from(colors);\n   * var getBGColor = getColor.from(bgColors);\n   * var getAnyColor = nearestColor.from(colors).or(bgColors);\n   *\n   * getColor('ffe');\n   * // => { name: 'white', value: 'fff', rgb: { r: 255, g: 255, b: 255 }, distance: 17}\n   *\n   * getColor('#f00');\n   * // => { name: 'maroon', value: '#800', rgb: { r: 136, g: 0, b: 0 }, distance: 119}\n   *\n   * getColor('#ff0');\n   * // => { name: 'light yellow', value: '#ffff33', rgb: { r: 255, g: 255, b: 51 }, distance: 51}\n   *\n   * getBGColor('#fff'); // => '#eee'\n   * getBGColor('#000'); // => '#444'\n   *\n   * getAnyColor('#f00');\n   * // => { name: 'maroon', value: '#800', rgb: { r: 136, g: 0, b: 0 }, distance: 119}\n   *\n   * getAnyColor('#888'); // => '#444'\n   *\n   * nearestColor.from(invalidColors); // => throws\n   */\n  nearestColor.from = function from(availableColors) {\n    var colors = mapColors(availableColors),\n        nearestColorBase = nearestColor;\n\n    var matcher = function nearestColor(hex) {\n      return nearestColorBase(hex, colors);\n    };\n\n    // Keep the 'from' method, to support changing the list of available colors\n    // multiple times without needing to keep a reference to the original\n    // nearestColor function.\n    matcher.from = from;\n\n    // Also provide a way to combine multiple color lists.\n    matcher.or = function or(alternateColors) {\n      var extendedColors = colors.concat(mapColors(alternateColors));\n      return nearestColor.from(extendedColors);\n    };\n\n    return matcher;\n  };\n\n  /**\n   * Given either an array or object of colors, returns an array of\n   * {@link ColorSpec} objects (with {@link RGB} values).\n   *\n   * @private\n   * @param {Array.<string>|Object} colors An array of hex-based color strings, or\n   *     an object mapping color *names* to hex values.\n   * @return {Array.<ColorSpec>} An array of {@link ColorSpec} objects\n   *     representing the same colors passed in.\n   */\n  function mapColors(colors) {\n    if (colors instanceof Array) {\n      return colors.map(function(color) {\n        return createColorSpec(color);\n      });\n    }\n\n    return Object.keys(colors).map(function(name) {\n      return createColorSpec(colors[name], name);\n    });\n  };\n\n  /**\n   * Parses a color from a string.\n   *\n   * @private\n   * @param {RGB|string} source\n   * @return {RGB}\n   *\n   * @example\n   * parseColor({ r: 3, g: 22, b: 111 }); // => { r: 3, g: 22, b: 111 }\n   * parseColor('#f00');                  // => { r: 255, g: 0, b: 0 }\n   * parseColor('#04fbc8');               // => { r: 4, g: 251, b: 200 }\n   * parseColor('#FF0');                  // => { r: 255, g: 255, b: 0 }\n   * parseColor('rgb(3, 10, 100)');       // => { r: 3, g: 10, b: 100 }\n   * parseColor('rgb(50%, 0%, 50%)');     // => { r: 128, g: 0, b: 128 }\n   * parseColor('aqua');                  // => { r: 0, g: 255, b: 255 }\n   * parseColor('fff');                   // => { r: 255, g: 255, b: 255 }\n   * parseColor('foo');                   // => throws\n   */\n  function parseColor(source) {\n    var red, green, blue;\n\n    if (typeof source === 'object') {\n      return source;\n    }\n\n    if (source in nearestColor.STANDARD_COLORS) {\n      return parseColor(nearestColor.STANDARD_COLORS[source]);\n    }\n\n    var hexMatch = source.match(/^#?((?:[0-9a-f]{3}){1,2})$/i);\n    if (hexMatch) {\n      hexMatch = hexMatch[1];\n\n      if (hexMatch.length === 3) {\n        hexMatch = [\n          hexMatch.charAt(0) + hexMatch.charAt(0),\n          hexMatch.charAt(1) + hexMatch.charAt(1),\n          hexMatch.charAt(2) + hexMatch.charAt(2)\n        ];\n\n      } else {\n        hexMatch = [\n          hexMatch.substring(0, 2),\n          hexMatch.substring(2, 4),\n          hexMatch.substring(4, 6)\n        ];\n      }\n\n      red = parseInt(hexMatch[0], 16);\n      green = parseInt(hexMatch[1], 16);\n      blue = parseInt(hexMatch[2], 16);\n\n      return { r: red, g: green, b: blue };\n    }\n\n    var rgbMatch = source.match(/^rgb\\(\\s*(\\d{1,3}%?),\\s*(\\d{1,3}%?),\\s*(\\d{1,3}%?)\\s*\\)$/i);\n    if (rgbMatch) {\n      red = parseComponentValue(rgbMatch[1]);\n      green = parseComponentValue(rgbMatch[2]);\n      blue = parseComponentValue(rgbMatch[3]);\n\n      return { r: red, g: green, b: blue };\n    }\n\n    throw Error('\"' + source + '\" is not a valid color');\n  }\n\n  /**\n   * Creates a {@link ColorSpec} from either a string or an {@link RGB}.\n   *\n   * @private\n   * @param {string|RGB} input\n   * @param {string=} name\n   * @return {ColorSpec}\n   *\n   * @example\n   * createColorSpec('#800'); // => {\n   *   source: '#800',\n   *   rgb: { r: 136, g: 0, b: 0 }\n   * }\n   *\n   * createColorSpec('#800', 'maroon'); // => {\n   *   name: 'maroon',\n   *   source: '#800',\n   *   rgb: { r: 136, g: 0, b: 0 }\n   * }\n   */\n  function createColorSpec(input, name) {\n    var color = {};\n\n    if (name) {\n      color.name = name;\n    }\n\n    if (typeof input === 'string') {\n      color.source = input;\n      color.rgb = parseColor(input);\n\n    } else if (typeof input === 'object') {\n      // This is for if/when we're concatenating lists of colors.\n      if (input.source) {\n        return createColorSpec(input.source, input.name);\n      }\n\n      color.rgb = input;\n      color.source = rgbToHex(input);\n    }\n\n    return color;\n  }\n\n  /**\n   * Parses a value between 0-255 from a string.\n   *\n   * @private\n   * @param {string} string\n   * @return {number}\n   *\n   * @example\n   * parseComponentValue('100');  // => 100\n   * parseComponentValue('100%'); // => 255\n   * parseComponentValue('50%');  // => 128\n   */\n  function parseComponentValue(string) {\n    if (string.charAt(string.length - 1) === '%') {\n      return Math.round(parseInt(string, 10) * 255 / 100);\n    }\n\n    return Number(string);\n  }\n\n  /**\n   * Converts an {@link RGB} color to its hex representation.\n   *\n   * @private\n   * @param {RGB} rgb\n   * @return {string}\n   *\n   * @example\n   * rgbToHex({ r: 255, g: 128, b: 0 }); // => '#ff8000'\n   */\n  function rgbToHex(rgb) {\n    return '#' + leadingZero(rgb.r.toString(16)) +\n      leadingZero(rgb.g.toString(16)) + leadingZero(rgb.b.toString(16));\n  }\n\n  /**\n   * Puts a 0 in front of a numeric string if it's only one digit. Otherwise\n   * nothing (just returns the value passed in).\n   *\n   * @private\n   * @param {string} value\n   * @return\n   *\n   * @example\n   * leadingZero('1');  // => '01'\n   * leadingZero('12'); // => '12'\n   */\n  function leadingZero(value) {\n    if (value.length === 1) {\n      value = '0' + value;\n    }\n    return value;\n  }\n\n  /**\n   * A map from the names of standard CSS colors to their hex values.\n   */\n  nearestColor.STANDARD_COLORS = {\n    aqua: '#0ff',\n    black: '#000',\n    blue: '#00f',\n    fuchsia: '#f0f',\n    gray: '#808080',\n    green: '#008000',\n    lime: '#0f0',\n    maroon: '#800000',\n    navy: '#000080',\n    olive: '#808000',\n    orange: '#ffa500',\n    purple: '#800080',\n    red: '#f00',\n    silver: '#c0c0c0',\n    teal: '#008080',\n    white: '#fff',\n    yellow: '#ff0'\n  };\n\n  /**\n   * Default colors. Comprises the colors of the rainbow (good ol' ROY G. BIV).\n   * This list will be used for calls to {@nearestColor} that don't specify a list\n   * of available colors to match.\n   */\n  nearestColor.DEFAULT_COLORS = mapColors([\n    '#f00', // r\n    '#f80', // o\n    '#ff0', // y\n    '#0f0', // g\n    '#00f', // b\n    '#008', // i\n    '#808'  // v\n  ]);\n\n  nearestColor.VERSION = '0.4.4';\n\n  if (typeof module === 'object' && module && module.exports) {\n    module.exports = nearestColor;\n  } else {\n    context.nearestColor = nearestColor;\n  }\n\n}(this));\n"]},"metadata":{},"sourceType":"script"}