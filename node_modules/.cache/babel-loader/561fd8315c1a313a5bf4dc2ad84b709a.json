{"ast":null,"code":"var HEADER = [66, 77, 70];\n\nmodule.exports = function readBMFontBinary(buf) {\n  if (buf.length < 6) throw new Error('invalid buffer length for BMFont');\n  var header = HEADER.every(function (byte, i) {\n    return buf.readUInt8(i) === byte;\n  });\n  if (!header) throw new Error('BMFont missing BMF byte header');\n  var i = 3;\n  var vers = buf.readUInt8(i++);\n  if (vers > 3) throw new Error('Only supports BMFont Binary v3 (BMFont App v1.10)');\n  var target = {\n    kernings: [],\n    chars: []\n  };\n\n  for (var b = 0; b < 5; b++) i += readBlock(target, buf, i);\n\n  return target;\n};\n\nfunction readBlock(target, buf, i) {\n  if (i > buf.length - 1) return 0;\n  var blockID = buf.readUInt8(i++);\n  var blockSize = buf.readInt32LE(i);\n  i += 4;\n\n  switch (blockID) {\n    case 1:\n      target.info = readInfo(buf, i);\n      break;\n\n    case 2:\n      target.common = readCommon(buf, i);\n      break;\n\n    case 3:\n      target.pages = readPages(buf, i, blockSize);\n      break;\n\n    case 4:\n      target.chars = readChars(buf, i, blockSize);\n      break;\n\n    case 5:\n      target.kernings = readKernings(buf, i, blockSize);\n      break;\n  }\n\n  return 5 + blockSize;\n}\n\nfunction readInfo(buf, i) {\n  var info = {};\n  info.size = buf.readInt16LE(i);\n  var bitField = buf.readUInt8(i + 2);\n  info.smooth = bitField >> 7 & 1;\n  info.unicode = bitField >> 6 & 1;\n  info.italic = bitField >> 5 & 1;\n  info.bold = bitField >> 4 & 1; //fixedHeight is only mentioned in binary spec \n\n  if (bitField >> 3 & 1) info.fixedHeight = 1;\n  info.charset = buf.readUInt8(i + 3) || '';\n  info.stretchH = buf.readUInt16LE(i + 4);\n  info.aa = buf.readUInt8(i + 6);\n  info.padding = [buf.readInt8(i + 7), buf.readInt8(i + 8), buf.readInt8(i + 9), buf.readInt8(i + 10)];\n  info.spacing = [buf.readInt8(i + 11), buf.readInt8(i + 12)];\n  info.outline = buf.readUInt8(i + 13);\n  info.face = readStringNT(buf, i + 14);\n  return info;\n}\n\nfunction readCommon(buf, i) {\n  var common = {};\n  common.lineHeight = buf.readUInt16LE(i);\n  common.base = buf.readUInt16LE(i + 2);\n  common.scaleW = buf.readUInt16LE(i + 4);\n  common.scaleH = buf.readUInt16LE(i + 6);\n  common.pages = buf.readUInt16LE(i + 8);\n  var bitField = buf.readUInt8(i + 10);\n  common.packed = 0;\n  common.alphaChnl = buf.readUInt8(i + 11);\n  common.redChnl = buf.readUInt8(i + 12);\n  common.greenChnl = buf.readUInt8(i + 13);\n  common.blueChnl = buf.readUInt8(i + 14);\n  return common;\n}\n\nfunction readPages(buf, i, size) {\n  var pages = [];\n  var text = readNameNT(buf, i);\n  var len = text.length + 1;\n  var count = size / len;\n\n  for (var c = 0; c < count; c++) {\n    pages[c] = buf.slice(i, i + text.length).toString('utf8');\n    i += len;\n  }\n\n  return pages;\n}\n\nfunction readChars(buf, i, blockSize) {\n  var chars = [];\n  var count = blockSize / 20;\n\n  for (var c = 0; c < count; c++) {\n    var char = {};\n    var off = c * 20;\n    char.id = buf.readUInt32LE(i + 0 + off);\n    char.x = buf.readUInt16LE(i + 4 + off);\n    char.y = buf.readUInt16LE(i + 6 + off);\n    char.width = buf.readUInt16LE(i + 8 + off);\n    char.height = buf.readUInt16LE(i + 10 + off);\n    char.xoffset = buf.readInt16LE(i + 12 + off);\n    char.yoffset = buf.readInt16LE(i + 14 + off);\n    char.xadvance = buf.readInt16LE(i + 16 + off);\n    char.page = buf.readUInt8(i + 18 + off);\n    char.chnl = buf.readUInt8(i + 19 + off);\n    chars[c] = char;\n  }\n\n  return chars;\n}\n\nfunction readKernings(buf, i, blockSize) {\n  var kernings = [];\n  var count = blockSize / 10;\n\n  for (var c = 0; c < count; c++) {\n    var kern = {};\n    var off = c * 10;\n    kern.first = buf.readUInt32LE(i + 0 + off);\n    kern.second = buf.readUInt32LE(i + 4 + off);\n    kern.amount = buf.readInt16LE(i + 8 + off);\n    kernings[c] = kern;\n  }\n\n  return kernings;\n}\n\nfunction readNameNT(buf, offset) {\n  var pos = offset;\n\n  for (; pos < buf.length; pos++) {\n    if (buf[pos] === 0x00) break;\n  }\n\n  return buf.slice(offset, pos);\n}\n\nfunction readStringNT(buf, offset) {\n  return readNameNT(buf, offset).toString('utf8');\n}","map":{"version":3,"sources":["/Users/zakstratton/Documents/logo-processor/node_modules/parse-bmfont-binary/index.js"],"names":["HEADER","module","exports","readBMFontBinary","buf","length","Error","header","every","byte","i","readUInt8","vers","target","kernings","chars","b","readBlock","blockID","blockSize","readInt32LE","info","readInfo","common","readCommon","pages","readPages","readChars","readKernings","size","readInt16LE","bitField","smooth","unicode","italic","bold","fixedHeight","charset","stretchH","readUInt16LE","aa","padding","readInt8","spacing","outline","face","readStringNT","lineHeight","base","scaleW","scaleH","packed","alphaChnl","redChnl","greenChnl","blueChnl","text","readNameNT","len","count","c","slice","toString","char","off","id","readUInt32LE","x","y","width","height","xoffset","yoffset","xadvance","page","chnl","kern","first","second","amount","offset","pos"],"mappings":"AAAA,IAAIA,MAAM,GAAG,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,CAAb;;AAEAC,MAAM,CAACC,OAAP,GAAiB,SAASC,gBAAT,CAA0BC,GAA1B,EAA+B;AAC9C,MAAIA,GAAG,CAACC,MAAJ,GAAa,CAAjB,EACE,MAAM,IAAIC,KAAJ,CAAU,kCAAV,CAAN;AAEF,MAAIC,MAAM,GAAGP,MAAM,CAACQ,KAAP,CAAa,UAASC,IAAT,EAAeC,CAAf,EAAkB;AAC1C,WAAON,GAAG,CAACO,SAAJ,CAAcD,CAAd,MAAqBD,IAA5B;AACD,GAFY,CAAb;AAIA,MAAI,CAACF,MAAL,EACE,MAAM,IAAID,KAAJ,CAAU,gCAAV,CAAN;AAEF,MAAII,CAAC,GAAG,CAAR;AACA,MAAIE,IAAI,GAAGR,GAAG,CAACO,SAAJ,CAAcD,CAAC,EAAf,CAAX;AACA,MAAIE,IAAI,GAAG,CAAX,EACE,MAAM,IAAIN,KAAJ,CAAU,mDAAV,CAAN;AAEF,MAAIO,MAAM,GAAG;AAAEC,IAAAA,QAAQ,EAAE,EAAZ;AAAgBC,IAAAA,KAAK,EAAE;AAAvB,GAAb;;AACA,OAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC,CAAhB,EAAmBA,CAAC,EAApB,EACEN,CAAC,IAAIO,SAAS,CAACJ,MAAD,EAAST,GAAT,EAAcM,CAAd,CAAd;;AACF,SAAOG,MAAP;AACD,CApBD;;AAsBA,SAASI,SAAT,CAAmBJ,MAAnB,EAA2BT,GAA3B,EAAgCM,CAAhC,EAAmC;AACjC,MAAIA,CAAC,GAAGN,GAAG,CAACC,MAAJ,GAAW,CAAnB,EACE,OAAO,CAAP;AAEF,MAAIa,OAAO,GAAGd,GAAG,CAACO,SAAJ,CAAcD,CAAC,EAAf,CAAd;AACA,MAAIS,SAAS,GAAGf,GAAG,CAACgB,WAAJ,CAAgBV,CAAhB,CAAhB;AACAA,EAAAA,CAAC,IAAI,CAAL;;AAEA,UAAOQ,OAAP;AACE,SAAK,CAAL;AACEL,MAAAA,MAAM,CAACQ,IAAP,GAAcC,QAAQ,CAAClB,GAAD,EAAMM,CAAN,CAAtB;AACA;;AACF,SAAK,CAAL;AACEG,MAAAA,MAAM,CAACU,MAAP,GAAgBC,UAAU,CAACpB,GAAD,EAAMM,CAAN,CAA1B;AACA;;AACF,SAAK,CAAL;AACEG,MAAAA,MAAM,CAACY,KAAP,GAAeC,SAAS,CAACtB,GAAD,EAAMM,CAAN,EAASS,SAAT,CAAxB;AACA;;AACF,SAAK,CAAL;AACEN,MAAAA,MAAM,CAACE,KAAP,GAAeY,SAAS,CAACvB,GAAD,EAAMM,CAAN,EAASS,SAAT,CAAxB;AACA;;AACF,SAAK,CAAL;AACEN,MAAAA,MAAM,CAACC,QAAP,GAAkBc,YAAY,CAACxB,GAAD,EAAMM,CAAN,EAASS,SAAT,CAA9B;AACA;AAfJ;;AAiBA,SAAO,IAAIA,SAAX;AACD;;AAED,SAASG,QAAT,CAAkBlB,GAAlB,EAAuBM,CAAvB,EAA0B;AACxB,MAAIW,IAAI,GAAG,EAAX;AACAA,EAAAA,IAAI,CAACQ,IAAL,GAAYzB,GAAG,CAAC0B,WAAJ,CAAgBpB,CAAhB,CAAZ;AAEA,MAAIqB,QAAQ,GAAG3B,GAAG,CAACO,SAAJ,CAAcD,CAAC,GAAC,CAAhB,CAAf;AACAW,EAAAA,IAAI,CAACW,MAAL,GAAeD,QAAQ,IAAI,CAAb,GAAkB,CAAhC;AACAV,EAAAA,IAAI,CAACY,OAAL,GAAgBF,QAAQ,IAAI,CAAb,GAAkB,CAAjC;AACAV,EAAAA,IAAI,CAACa,MAAL,GAAeH,QAAQ,IAAI,CAAb,GAAkB,CAAhC;AACAV,EAAAA,IAAI,CAACc,IAAL,GAAaJ,QAAQ,IAAI,CAAb,GAAkB,CAA9B,CARwB,CAUxB;;AACA,MAAKA,QAAQ,IAAI,CAAb,GAAkB,CAAtB,EACEV,IAAI,CAACe,WAAL,GAAmB,CAAnB;AAEFf,EAAAA,IAAI,CAACgB,OAAL,GAAejC,GAAG,CAACO,SAAJ,CAAcD,CAAC,GAAC,CAAhB,KAAsB,EAArC;AACAW,EAAAA,IAAI,CAACiB,QAAL,GAAgBlC,GAAG,CAACmC,YAAJ,CAAiB7B,CAAC,GAAC,CAAnB,CAAhB;AACAW,EAAAA,IAAI,CAACmB,EAAL,GAAUpC,GAAG,CAACO,SAAJ,CAAcD,CAAC,GAAC,CAAhB,CAAV;AACAW,EAAAA,IAAI,CAACoB,OAAL,GAAe,CACbrC,GAAG,CAACsC,QAAJ,CAAahC,CAAC,GAAC,CAAf,CADa,EAEbN,GAAG,CAACsC,QAAJ,CAAahC,CAAC,GAAC,CAAf,CAFa,EAGbN,GAAG,CAACsC,QAAJ,CAAahC,CAAC,GAAC,CAAf,CAHa,EAIbN,GAAG,CAACsC,QAAJ,CAAahC,CAAC,GAAC,EAAf,CAJa,CAAf;AAMAW,EAAAA,IAAI,CAACsB,OAAL,GAAe,CACbvC,GAAG,CAACsC,QAAJ,CAAahC,CAAC,GAAC,EAAf,CADa,EAEbN,GAAG,CAACsC,QAAJ,CAAahC,CAAC,GAAC,EAAf,CAFa,CAAf;AAIAW,EAAAA,IAAI,CAACuB,OAAL,GAAexC,GAAG,CAACO,SAAJ,CAAcD,CAAC,GAAC,EAAhB,CAAf;AACAW,EAAAA,IAAI,CAACwB,IAAL,GAAYC,YAAY,CAAC1C,GAAD,EAAMM,CAAC,GAAC,EAAR,CAAxB;AACA,SAAOW,IAAP;AACD;;AAED,SAASG,UAAT,CAAoBpB,GAApB,EAAyBM,CAAzB,EAA4B;AAC1B,MAAIa,MAAM,GAAG,EAAb;AACAA,EAAAA,MAAM,CAACwB,UAAP,GAAoB3C,GAAG,CAACmC,YAAJ,CAAiB7B,CAAjB,CAApB;AACAa,EAAAA,MAAM,CAACyB,IAAP,GAAc5C,GAAG,CAACmC,YAAJ,CAAiB7B,CAAC,GAAC,CAAnB,CAAd;AACAa,EAAAA,MAAM,CAAC0B,MAAP,GAAgB7C,GAAG,CAACmC,YAAJ,CAAiB7B,CAAC,GAAC,CAAnB,CAAhB;AACAa,EAAAA,MAAM,CAAC2B,MAAP,GAAgB9C,GAAG,CAACmC,YAAJ,CAAiB7B,CAAC,GAAC,CAAnB,CAAhB;AACAa,EAAAA,MAAM,CAACE,KAAP,GAAerB,GAAG,CAACmC,YAAJ,CAAiB7B,CAAC,GAAC,CAAnB,CAAf;AACA,MAAIqB,QAAQ,GAAG3B,GAAG,CAACO,SAAJ,CAAcD,CAAC,GAAC,EAAhB,CAAf;AACAa,EAAAA,MAAM,CAAC4B,MAAP,GAAgB,CAAhB;AACA5B,EAAAA,MAAM,CAAC6B,SAAP,GAAmBhD,GAAG,CAACO,SAAJ,CAAcD,CAAC,GAAC,EAAhB,CAAnB;AACAa,EAAAA,MAAM,CAAC8B,OAAP,GAAiBjD,GAAG,CAACO,SAAJ,CAAcD,CAAC,GAAC,EAAhB,CAAjB;AACAa,EAAAA,MAAM,CAAC+B,SAAP,GAAmBlD,GAAG,CAACO,SAAJ,CAAcD,CAAC,GAAC,EAAhB,CAAnB;AACAa,EAAAA,MAAM,CAACgC,QAAP,GAAkBnD,GAAG,CAACO,SAAJ,CAAcD,CAAC,GAAC,EAAhB,CAAlB;AACA,SAAOa,MAAP;AACD;;AAED,SAASG,SAAT,CAAmBtB,GAAnB,EAAwBM,CAAxB,EAA2BmB,IAA3B,EAAiC;AAC/B,MAAIJ,KAAK,GAAG,EAAZ;AACA,MAAI+B,IAAI,GAAGC,UAAU,CAACrD,GAAD,EAAMM,CAAN,CAArB;AACA,MAAIgD,GAAG,GAAGF,IAAI,CAACnD,MAAL,GAAY,CAAtB;AACA,MAAIsD,KAAK,GAAG9B,IAAI,GAAG6B,GAAnB;;AACA,OAAK,IAAIE,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACD,KAAhB,EAAuBC,CAAC,EAAxB,EAA4B;AAC1BnC,IAAAA,KAAK,CAACmC,CAAD,CAAL,GAAWxD,GAAG,CAACyD,KAAJ,CAAUnD,CAAV,EAAaA,CAAC,GAAC8C,IAAI,CAACnD,MAApB,EAA4ByD,QAA5B,CAAqC,MAArC,CAAX;AACApD,IAAAA,CAAC,IAAIgD,GAAL;AACD;;AACD,SAAOjC,KAAP;AACD;;AAED,SAASE,SAAT,CAAmBvB,GAAnB,EAAwBM,CAAxB,EAA2BS,SAA3B,EAAsC;AACpC,MAAIJ,KAAK,GAAG,EAAZ;AAEA,MAAI4C,KAAK,GAAGxC,SAAS,GAAG,EAAxB;;AACA,OAAK,IAAIyC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACD,KAAhB,EAAuBC,CAAC,EAAxB,EAA4B;AAC1B,QAAIG,IAAI,GAAG,EAAX;AACA,QAAIC,GAAG,GAAGJ,CAAC,GAAC,EAAZ;AACAG,IAAAA,IAAI,CAACE,EAAL,GAAU7D,GAAG,CAAC8D,YAAJ,CAAiBxD,CAAC,GAAG,CAAJ,GAAQsD,GAAzB,CAAV;AACAD,IAAAA,IAAI,CAACI,CAAL,GAAS/D,GAAG,CAACmC,YAAJ,CAAiB7B,CAAC,GAAG,CAAJ,GAAQsD,GAAzB,CAAT;AACAD,IAAAA,IAAI,CAACK,CAAL,GAAShE,GAAG,CAACmC,YAAJ,CAAiB7B,CAAC,GAAG,CAAJ,GAAQsD,GAAzB,CAAT;AACAD,IAAAA,IAAI,CAACM,KAAL,GAAajE,GAAG,CAACmC,YAAJ,CAAiB7B,CAAC,GAAG,CAAJ,GAAQsD,GAAzB,CAAb;AACAD,IAAAA,IAAI,CAACO,MAAL,GAAclE,GAAG,CAACmC,YAAJ,CAAiB7B,CAAC,GAAG,EAAJ,GAASsD,GAA1B,CAAd;AACAD,IAAAA,IAAI,CAACQ,OAAL,GAAenE,GAAG,CAAC0B,WAAJ,CAAgBpB,CAAC,GAAG,EAAJ,GAASsD,GAAzB,CAAf;AACAD,IAAAA,IAAI,CAACS,OAAL,GAAepE,GAAG,CAAC0B,WAAJ,CAAgBpB,CAAC,GAAG,EAAJ,GAASsD,GAAzB,CAAf;AACAD,IAAAA,IAAI,CAACU,QAAL,GAAgBrE,GAAG,CAAC0B,WAAJ,CAAgBpB,CAAC,GAAG,EAAJ,GAASsD,GAAzB,CAAhB;AACAD,IAAAA,IAAI,CAACW,IAAL,GAAYtE,GAAG,CAACO,SAAJ,CAAcD,CAAC,GAAG,EAAJ,GAASsD,GAAvB,CAAZ;AACAD,IAAAA,IAAI,CAACY,IAAL,GAAYvE,GAAG,CAACO,SAAJ,CAAcD,CAAC,GAAG,EAAJ,GAASsD,GAAvB,CAAZ;AACAjD,IAAAA,KAAK,CAAC6C,CAAD,CAAL,GAAWG,IAAX;AACD;;AACD,SAAOhD,KAAP;AACD;;AAED,SAASa,YAAT,CAAsBxB,GAAtB,EAA2BM,CAA3B,EAA8BS,SAA9B,EAAyC;AACvC,MAAIL,QAAQ,GAAG,EAAf;AACA,MAAI6C,KAAK,GAAGxC,SAAS,GAAG,EAAxB;;AACA,OAAK,IAAIyC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACD,KAAhB,EAAuBC,CAAC,EAAxB,EAA4B;AAC1B,QAAIgB,IAAI,GAAG,EAAX;AACA,QAAIZ,GAAG,GAAGJ,CAAC,GAAC,EAAZ;AACAgB,IAAAA,IAAI,CAACC,KAAL,GAAazE,GAAG,CAAC8D,YAAJ,CAAiBxD,CAAC,GAAG,CAAJ,GAAQsD,GAAzB,CAAb;AACAY,IAAAA,IAAI,CAACE,MAAL,GAAc1E,GAAG,CAAC8D,YAAJ,CAAiBxD,CAAC,GAAG,CAAJ,GAAQsD,GAAzB,CAAd;AACAY,IAAAA,IAAI,CAACG,MAAL,GAAc3E,GAAG,CAAC0B,WAAJ,CAAgBpB,CAAC,GAAG,CAAJ,GAAQsD,GAAxB,CAAd;AACAlD,IAAAA,QAAQ,CAAC8C,CAAD,CAAR,GAAcgB,IAAd;AACD;;AACD,SAAO9D,QAAP;AACD;;AAED,SAAS2C,UAAT,CAAoBrD,GAApB,EAAyB4E,MAAzB,EAAiC;AAC/B,MAAIC,GAAG,GAACD,MAAR;;AACA,SAAOC,GAAG,GAAC7E,GAAG,CAACC,MAAf,EAAuB4E,GAAG,EAA1B,EAA8B;AAC5B,QAAI7E,GAAG,CAAC6E,GAAD,CAAH,KAAa,IAAjB,EACE;AACH;;AACD,SAAO7E,GAAG,CAACyD,KAAJ,CAAUmB,MAAV,EAAkBC,GAAlB,CAAP;AACD;;AAED,SAASnC,YAAT,CAAsB1C,GAAtB,EAA2B4E,MAA3B,EAAmC;AACjC,SAAOvB,UAAU,CAACrD,GAAD,EAAM4E,MAAN,CAAV,CAAwBlB,QAAxB,CAAiC,MAAjC,CAAP;AACD","sourcesContent":["var HEADER = [66, 77, 70]\n\nmodule.exports = function readBMFontBinary(buf) {\n  if (buf.length < 6)\n    throw new Error('invalid buffer length for BMFont')\n\n  var header = HEADER.every(function(byte, i) {\n    return buf.readUInt8(i) === byte\n  })\n\n  if (!header)\n    throw new Error('BMFont missing BMF byte header')\n\n  var i = 3\n  var vers = buf.readUInt8(i++)\n  if (vers > 3)\n    throw new Error('Only supports BMFont Binary v3 (BMFont App v1.10)')\n  \n  var target = { kernings: [], chars: [] }\n  for (var b=0; b<5; b++)\n    i += readBlock(target, buf, i)\n  return target\n}\n\nfunction readBlock(target, buf, i) {\n  if (i > buf.length-1)\n    return 0\n\n  var blockID = buf.readUInt8(i++)\n  var blockSize = buf.readInt32LE(i)\n  i += 4\n\n  switch(blockID) {\n    case 1: \n      target.info = readInfo(buf, i)\n      break\n    case 2:\n      target.common = readCommon(buf, i)\n      break\n    case 3:\n      target.pages = readPages(buf, i, blockSize)\n      break\n    case 4:\n      target.chars = readChars(buf, i, blockSize)\n      break\n    case 5:\n      target.kernings = readKernings(buf, i, blockSize)\n      break\n  }\n  return 5 + blockSize\n}\n\nfunction readInfo(buf, i) {\n  var info = {}\n  info.size = buf.readInt16LE(i)\n\n  var bitField = buf.readUInt8(i+2)\n  info.smooth = (bitField >> 7) & 1\n  info.unicode = (bitField >> 6) & 1\n  info.italic = (bitField >> 5) & 1\n  info.bold = (bitField >> 4) & 1\n  \n  //fixedHeight is only mentioned in binary spec \n  if ((bitField >> 3) & 1)\n    info.fixedHeight = 1\n  \n  info.charset = buf.readUInt8(i+3) || ''\n  info.stretchH = buf.readUInt16LE(i+4)\n  info.aa = buf.readUInt8(i+6)\n  info.padding = [\n    buf.readInt8(i+7),\n    buf.readInt8(i+8),\n    buf.readInt8(i+9),\n    buf.readInt8(i+10)\n  ]\n  info.spacing = [\n    buf.readInt8(i+11),\n    buf.readInt8(i+12)\n  ]\n  info.outline = buf.readUInt8(i+13)\n  info.face = readStringNT(buf, i+14)\n  return info\n}\n\nfunction readCommon(buf, i) {\n  var common = {}\n  common.lineHeight = buf.readUInt16LE(i)\n  common.base = buf.readUInt16LE(i+2)\n  common.scaleW = buf.readUInt16LE(i+4)\n  common.scaleH = buf.readUInt16LE(i+6)\n  common.pages = buf.readUInt16LE(i+8)\n  var bitField = buf.readUInt8(i+10)\n  common.packed = 0\n  common.alphaChnl = buf.readUInt8(i+11)\n  common.redChnl = buf.readUInt8(i+12)\n  common.greenChnl = buf.readUInt8(i+13)\n  common.blueChnl = buf.readUInt8(i+14)\n  return common\n}\n\nfunction readPages(buf, i, size) {\n  var pages = []\n  var text = readNameNT(buf, i)\n  var len = text.length+1\n  var count = size / len\n  for (var c=0; c<count; c++) {\n    pages[c] = buf.slice(i, i+text.length).toString('utf8')\n    i += len\n  }\n  return pages\n}\n\nfunction readChars(buf, i, blockSize) {\n  var chars = []\n\n  var count = blockSize / 20\n  for (var c=0; c<count; c++) {\n    var char = {}\n    var off = c*20\n    char.id = buf.readUInt32LE(i + 0 + off)\n    char.x = buf.readUInt16LE(i + 4 + off)\n    char.y = buf.readUInt16LE(i + 6 + off)\n    char.width = buf.readUInt16LE(i + 8 + off)\n    char.height = buf.readUInt16LE(i + 10 + off)\n    char.xoffset = buf.readInt16LE(i + 12 + off)\n    char.yoffset = buf.readInt16LE(i + 14 + off)\n    char.xadvance = buf.readInt16LE(i + 16 + off)\n    char.page = buf.readUInt8(i + 18 + off)\n    char.chnl = buf.readUInt8(i + 19 + off)\n    chars[c] = char\n  }\n  return chars\n}\n\nfunction readKernings(buf, i, blockSize) {\n  var kernings = []\n  var count = blockSize / 10\n  for (var c=0; c<count; c++) {\n    var kern = {}\n    var off = c*10\n    kern.first = buf.readUInt32LE(i + 0 + off)\n    kern.second = buf.readUInt32LE(i + 4 + off)\n    kern.amount = buf.readInt16LE(i + 8 + off)\n    kernings[c] = kern\n  }\n  return kernings\n}\n\nfunction readNameNT(buf, offset) {\n  var pos=offset\n  for (; pos<buf.length; pos++) {\n    if (buf[pos] === 0x00) \n      break\n  }\n  return buf.slice(offset, pos)\n}\n\nfunction readStringNT(buf, offset) {\n  return readNameNT(buf, offset).toString('utf8')\n}"]},"metadata":{},"sourceType":"script"}