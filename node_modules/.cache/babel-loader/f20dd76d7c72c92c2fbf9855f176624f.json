{"ast":null,"code":"var _jsxFileName = \"/Users/zakstratton/Documents/logo-processor/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.css'; //import './style/_buttons.scss';\n\nimport ImageUploader from 'react-images-upload';\nimport Jimp from 'jimp/es';\n\nvar jimp = require('jimp');\n\nvar colors = {\n  onyx: '#333538',\n  charcoal: '#5f6468',\n  concrete: '#97a0a7',\n  quicksilver: '#e4e5e6',\n  bleach: '#ffffff',\n  rich_brown: '#372820',\n  mushroom: '#716257',\n  sand: '#bab3a0',\n  natural: '#f9f4ec',\n  navy: '#081e2c',\n  ultramarine: '#29217d',\n  lagoon: '#003e66',\n  cerulean: '#0169ca',\n  cornflower: '#529afc',\n  cyan: '#009ff1',\n  peacock: '#01aec9',\n  aruba: '#9dfbe7',\n  lake: '#6ac4dd',\n  seafoam: '#4ca696',\n  reef: '#00947d',\n  teal: '#007171',\n  pine: '#2b4423',\n  kelly: '#21772f',\n  jade: '#14b25a',\n  turf: '#60933b',\n  lime: '#a0ce3e',\n  goldenrod: '#d5d03a',\n  yellow: '#fff71b',\n  sunflower: '#ffc938',\n  carmel: '#d8a15e',\n  clementine: '#ff9a23',\n  living_coral: '#fb686d',\n  persimmon: '#fd5130',\n  red_orange: '#db1d3c',\n  red: '#c50f2d',\n  burnt_orange: '#a84c28',\n  rust: '#763742',\n  maroon: '#581c32',\n  deep_pink: '#c40876',\n  hibiscus: '#de4b9b',\n  blush: '#fdaeca',\n  peach: '#f7bfab',\n  lavender: '#a08dd6',\n  iris: '#77479f',\n  purple: '#5d1e5c',\n  royal_purple: '#401e72',\n  moose: '#653c2c',\n  violet: '#6753b2',\n  green_apple: '#76c727',\n  carrot: '#fd673e',\n  lapis: '#3c2f8f',\n  parrot: '#2fd078',\n  french_blue: '#638ee4'\n};\n\nvar nearestColor = require('nearest-color').from(colors); //initialize the default image\n\n\nconst src = require(\"./test1.png\"); //janky way around CORS policy for getting from dropbox link, pass through cors-anywhere server\n//var dropboxURL = \"0\"\n//var imgFinal = (\"https://cors-anywhere.herokuapp.com/\" + dropboxURL.slice(0, -1) + \"1\");\n//-------------------------------------------------------------\n//Main classes for displaying the image we are editing\n//as well as the resulting images after edits\n//-------------------------------------------------------------\n\n\nclass DisplayLogoImg extends React.Component {\n  render() {\n    return React.createElement(\"img\", {\n      className: \"workImage\",\n      src: this.props.picture,\n      alt: \"Uploaded logo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    });\n  }\n\n} //-------------------------------------------------------------\n//Custom classes for each button, passes state up\n//TODO:   Merge all of one type into a single class? [buttons, forms, etc]\n//        Transfer classes into seperate file and import it\n//-------------------------------------------------------------\n\n\nclass Linkform extends React.Component {\n  render() {\n    return React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, \"Dropbox Link:\", React.createElement(\"input\", {\n      type: \"text\",\n      onChange: this.props.onChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    })));\n  }\n\n}\n\nclass DebugButton extends React.Component {\n  render() {\n    return React.createElement(\"button\", {\n      onClick: () => this.props.onClick(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \"Debug\");\n  }\n\n}\n\nclass DownloadButton extends React.Component {\n  render() {\n    return React.createElement(\"button\", {\n      onClick: () => this.props.onClick(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \"Download BMP\");\n  }\n\n} //-------------------------------------------------------------\n//Main editor app class, contains most info in state\n//-------------------------------------------------------------\n\n\nclass Editor extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleDebugButtonClick = i => {\n      var posterizeValue = 2;\n      var pixelateValue = 10;\n      var scale = false;\n      this.jimpLogoCreation(this.state.picture, pixelateValue, posterizeValue, scale);\n      console.log(nearestColor('#800'));\n      console.log(nearestColor('#f9f4eb'));\n    };\n\n    this.handleDownloadButtonClick = i => {\n      console.log(\"Download Button Clicked\");\n    };\n\n    this.state = {\n      //CURRENTLY NOT USED: values for pixelization and posterize alteration\n      pixelValue: 0,\n      thresholdValue: 0,\n      //value that holds the path to default image, then the base64 data of render\n      //base64 used by Jimp, since it is a web-based app. Local files caused issues.\n      picture: src,\n      //preset and chassis for bitmap generation\n      preset: 0,\n      chassis: 0,\n      //Locations for crop rectangle\n      //TODO: Change names to something less global\n      width: 100,\n      height: 100,\n      top: 20,\n      left: 20,\n      rotateAngle: 0,\n      //Scale values for scale operation\n      scaleX: 0,\n      scaleY: 0,\n      //X Y coordinates of logo on Bitmap\n      xCoord: 0,\n      yCoord: 0,\n      //logo image width and height, mainly for displaying and stretch functionality\n      logoWidth: 0,\n      logoHeight: 0,\n      //show the crop tool or not\n      showCrop: 0\n    };\n    this.myRef = React.createRef(); //TODO: Bind these functions in their declaration, similar to handleX functions\n\n    this.onDrop = this.onDrop.bind(this);\n    this.onLinkChange = this.onLinkChange.bind(this);\n    this.jimpScale = this.jimpScale.bind(this);\n    this.jimpResize = this.jimpResize.bind(this);\n    this.jimpPixelate = this.jimpPixelate.bind(this);\n    this.jimpUpdateSize = this.jimpUpdateSize.bind(this);\n  } //-------------------------------------------------------------\n  //Functions to handle events when different buttons are clicked\n  //or values are changed\n  //-------------------------------------------------------------\n\n\n  //picture is an array passed from image uploader\n  //pull most recently uploaded picture from current session\n  //TODO: reformat these functions into handleDrop and handleLinkChange\n  onDrop(picture) {\n    //TODO: Insert function calls directly here to auto work on image\n    var localImg = URL.createObjectURL(picture[picture.length - 1]);\n    this.jimpLogoCreation(localImg); //Set state for display\n\n    this.setState({\n      picture: URL.createObjectURL(picture[picture.length - 1])\n    }); //this.jimpScale(localImg, 200, 200);\n    //This is very janky, waits 1 second before updating while picture state is being changed\n    //TODO: Figure out some sort of wait or confirmation,\n    //      this will introduce problems with varying connection speeds\n\n    /*\n    setTimeout(function () {\n      this.jimpUpdateSize(this.state.picture);\n    }.bind(this), 1000);\n    */\n  }\n\n  onLinkChange(event) {\n    //janky way around CORS policy for getting from dropbox link, pass through cors-anywhere server\n    this.setState({\n      picture: \"https://cors-anywhere.herokuapp.com/\" + event.target.value.slice(0, -1) + \"1\"\n    });\n  } //-------------------------------------------------------------\n  //render functions for each visible element\n  //TODO: combine everything in the same div into one render function\n  //like buttons for control panel and such\n  //-------------------------------------------------------------\n\n\n  renderLogoImage() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }, React.createElement(DisplayLogoImg, {\n      picture: this.state.picture,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }));\n  }\n\n  renderDebugButton(i) {\n    return React.createElement(DebugButton, {\n      onClick: this.handleDebugButtonClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    });\n  }\n\n  renderDownloadButton(i) {\n    return React.createElement(DownloadButton, {\n      onClick: this.handleDownloadButtonClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    });\n  }\n\n  renderImageUploader() {\n    return React.createElement(ImageUploader, {\n      withIcon: true,\n      buttonText: \"Choose image\",\n      label: \"Max file size: 5mb, Filetypes accepted: .bmp | .jpg | .png\",\n      fileContainerStyle: {\n        backgroundColor: \"grey\"\n      },\n      singleImage: true,\n      onChange: this.onDrop,\n      imgExtension: ['.jpg', '.gif', '.png', '.bmp'],\n      maxFileSize: 5242880,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    });\n  }\n\n  renderLinkForm() {\n    return React.createElement(Linkform, {\n      onChange: this.onLinkChange,\n      onSubmit: this.onLinkSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    });\n  } //-------------------------------------------------------------\n  //Functions to do the actual editing on the image\n  //TODO: update functions to take in a string for which state they\n  //are going to change, I.E. this.state.picture or this.state.bmpPicture\n  //-------------------------------------------------------------\n\n\n  jimpLogoCreation(path, pix, pos, scale) {\n    jimp.read(path, function (err, image) {\n      //image.pixelate(pix);\n      //image.posterize(pos);\n      if (scale) image.scaleToFit(150, 150); //console.log(image.getPixelColor(1,1));\n\n      image.scan(0, 0, image.bitmap.width, image.bitmap.height, function (x, y, idx) {\n        this.bitmap.data[idx] = 0;\n      });\n      image.getBase64(Jimp.AUTO, function (err, data) {\n        this.setState({\n          picture: data.replace(\"image/jpg\", \"image/bmp\")\n        });\n      }.bind(this));\n    }.bind(this));\n  }\n\n  jimpUpdateSize(path) {\n    var localX = 0;\n    var localY = 0;\n    jimp.read(path, function (err, image) {\n      localX = image.bitmap.width;\n      localY = image.bitmap.height;\n      this.setState({\n        logoWidth: localX,\n        logoHeight: localY\n      });\n    }.bind(this));\n  }\n\n  jimpScale(path, x, y) {\n    jimp.read(path, function (err, image) {\n      image.scaleToFit(x, y);\n      image.getBase64(Jimp.AUTO, function (err, data) {\n        this.setState({\n          picture: data\n        });\n      }.bind(this));\n    }.bind(this));\n  }\n\n  jimpResize(path, x, y) {\n    jimp.read(path, function (err, image) {\n      image.resize(x, y);\n      image.getBase64(Jimp.AUTO, function (err, data) {\n        this.setState({\n          picture: data\n        });\n      }.bind(this));\n    }.bind(this));\n  }\n\n  jimpResizeBMP(path, x, y) {\n    jimp.read(path, function (err, image) {\n      image.resize(x, y);\n      image.getBase64(Jimp.AUTO, function (err, data) {\n        this.setState({\n          bmpPicture: data\n        });\n      }.bind(this));\n    }.bind(this));\n  } //map logo onto bitmap according to preset\n  //TODO: adjust for each preset\n\n  /*\n  jimpMap(path1, path2){\n    jimp.read(this.state.bmpPicture, function(err, bmpImage) {\n      jimp.read(this.state.picture, function(err, logo) {\n        bmpImage.composite(logo, 20, 20);\n        bmpImage.getBase64(Jimp.AUTO, function(err, data){\n          this.setState({\n            bmpPicture: data,\n          });\n        }.bind(this));\n      }.bind(this));\n    }.bind(this));\n  }\n  */\n\n\n  jimpPixelate(path, x) {\n    jimp.read(path, function (err, image) {\n      image.pixelate(x);\n      image.getBase64(Jimp.AUTO, function (err, data) {\n        this.setState({\n          picture: data\n        });\n      }.bind(this));\n    }.bind(this));\n  }\n\n  jimpPosterize(path, x) {\n    jimp.read(path, function (err, image) {\n      image.posterize(x);\n      image.getBase64(Jimp.AUTO, function (err, data) {\n        this.setState({\n          picture: data\n        });\n      }.bind(this));\n    }.bind(this));\n  } //-------------------------------------------------------------\n  //Final render of the application\n  //-------------------------------------------------------------\n\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"workDisplay\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389\n      },\n      __self: this\n    }, this.renderLogoImage()), React.createElement(\"div\", {\n      className: \"panelDisplay\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392\n      },\n      __self: this\n    }, this.renderLinkForm(), this.renderImageUploader(), this.renderDebugButton()));\n  }\n\n} //-------------------------------------------------------------\n//Overreaching App class, not nessecary at the moment but may be used later\n//-------------------------------------------------------------\n\n\nclass App extends React.Component {\n  render() {\n    return React.createElement(\"div\", {\n      className: \"app\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"app-img\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410\n      },\n      __self: this\n    }, React.createElement(Editor, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"img-fields\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414\n      },\n      __self: this\n    })));\n  }\n\n} //-------------------------------------------------------------\n//Final DOM render, required by React\n//-------------------------------------------------------------\n\n\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 427\n  },\n  __self: this\n}), document.getElementById('root'));","map":{"version":3,"sources":["/Users/zakstratton/Documents/logo-processor/src/index.js"],"names":["React","ReactDOM","ImageUploader","Jimp","jimp","require","colors","onyx","charcoal","concrete","quicksilver","bleach","rich_brown","mushroom","sand","natural","navy","ultramarine","lagoon","cerulean","cornflower","cyan","peacock","aruba","lake","seafoam","reef","teal","pine","kelly","jade","turf","lime","goldenrod","yellow","sunflower","carmel","clementine","living_coral","persimmon","red_orange","red","burnt_orange","rust","maroon","deep_pink","hibiscus","blush","peach","lavender","iris","purple","royal_purple","moose","violet","green_apple","carrot","lapis","parrot","french_blue","nearestColor","from","src","DisplayLogoImg","Component","render","props","picture","Linkform","onChange","DebugButton","onClick","DownloadButton","Editor","constructor","handleDebugButtonClick","i","posterizeValue","pixelateValue","scale","jimpLogoCreation","state","console","log","handleDownloadButtonClick","pixelValue","thresholdValue","preset","chassis","width","height","top","left","rotateAngle","scaleX","scaleY","xCoord","yCoord","logoWidth","logoHeight","showCrop","myRef","createRef","onDrop","bind","onLinkChange","jimpScale","jimpResize","jimpPixelate","jimpUpdateSize","localImg","URL","createObjectURL","length","setState","event","target","value","slice","renderLogoImage","renderDebugButton","renderDownloadButton","renderImageUploader","backgroundColor","renderLinkForm","onLinkSubmit","path","pix","pos","read","err","image","scaleToFit","scan","bitmap","x","y","idx","data","getBase64","AUTO","replace","localX","localY","resize","jimpResizeBMP","bmpPicture","pixelate","jimpPosterize","posterize","App","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.css';\n//import './style/_buttons.scss';\nimport ImageUploader from 'react-images-upload';\nimport Jimp from 'jimp/es';\n\nvar jimp = require('jimp');\n\nvar colors = {\n  onyx: '#333538',\n  charcoal: '#5f6468',\n  concrete: '#97a0a7',\n  quicksilver: '#e4e5e6',\n  bleach: '#ffffff',\n  rich_brown: '#372820',\n  mushroom: '#716257',\n  sand: '#bab3a0',\n  natural: '#f9f4ec',\n  navy: '#081e2c',\n  ultramarine: '#29217d',\n  lagoon: '#003e66',\n  cerulean: '#0169ca',\n  cornflower: '#529afc',\n  cyan: '#009ff1',\n  peacock: '#01aec9',\n  aruba: '#9dfbe7',\n  lake: '#6ac4dd',\n  seafoam: '#4ca696',\n  reef: '#00947d',\n  teal: '#007171',\n  pine: '#2b4423',\n  kelly: '#21772f',\n  jade: '#14b25a',\n  turf: '#60933b',\n  lime: '#a0ce3e',\n  goldenrod: '#d5d03a',\n  yellow: '#fff71b',\n  sunflower: '#ffc938',\n  carmel: '#d8a15e',\n  clementine: '#ff9a23',\n  living_coral: '#fb686d',\n  persimmon: '#fd5130',\n  red_orange: '#db1d3c',\n  red: '#c50f2d',\n  burnt_orange: '#a84c28',\n  rust: '#763742',\n  maroon: '#581c32',\n  deep_pink: '#c40876',\n  hibiscus: '#de4b9b',\n  blush: '#fdaeca',\n  peach: '#f7bfab',\n  lavender: '#a08dd6',\n  iris: '#77479f',\n  purple: '#5d1e5c',\n  royal_purple: '#401e72',\n  moose: '#653c2c',\n  violet: '#6753b2',\n  green_apple: '#76c727',\n  carrot: '#fd673e',\n  lapis: '#3c2f8f',\n  parrot: '#2fd078',\n  french_blue: '#638ee4',\n};\n\nvar nearestColor = require('nearest-color').from(colors);\n\n\n//initialize the default image\nconst src = require(\"./test1.png\");\n//janky way around CORS policy for getting from dropbox link, pass through cors-anywhere server\n//var dropboxURL = \"0\"\n//var imgFinal = (\"https://cors-anywhere.herokuapp.com/\" + dropboxURL.slice(0, -1) + \"1\");\n\n//-------------------------------------------------------------\n//Main classes for displaying the image we are editing\n//as well as the resulting images after edits\n//-------------------------------------------------------------\nclass DisplayLogoImg extends React.Component{\n  render(){\n    return(\n      <img className=\"workImage\" src={this.props.picture} alt=\"Uploaded logo\" />\n    )\n  }\n}\n\n//-------------------------------------------------------------\n//Custom classes for each button, passes state up\n//TODO:   Merge all of one type into a single class? [buttons, forms, etc]\n//        Transfer classes into seperate file and import it\n//-------------------------------------------------------------\n\nclass Linkform extends React.Component {\n  render() {\n    return (\n      <form>\n        <label>\n          Dropbox Link:\n          <input type=\"text\" onChange={this.props.onChange} />\n        </label>\n      </form>\n    );\n  }\n}\n\nclass DebugButton extends React.Component{\n  render(){\n    return(\n      <button onClick={() => this.props.onClick()}>Debug</button>\n    )\n  }\n}\n\nclass DownloadButton extends React.Component{\n  render(){\n    return(\n      <button onClick={() => this.props.onClick()}>Download BMP</button>\n    )\n  }\n}\n\n//-------------------------------------------------------------\n//Main editor app class, contains most info in state\n//-------------------------------------------------------------\nclass Editor extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      //CURRENTLY NOT USED: values for pixelization and posterize alteration\n      pixelValue: 0,\n      thresholdValue: 0,\n      //value that holds the path to default image, then the base64 data of render\n      //base64 used by Jimp, since it is a web-based app. Local files caused issues.\n      picture: src,\n      //preset and chassis for bitmap generation\n      preset: 0,\n      chassis: 0,\n      //Locations for crop rectangle\n      //TODO: Change names to something less global\n      width: 100,\n      height: 100,\n      top: 20,\n      left: 20,\n      rotateAngle: 0,\n      //Scale values for scale operation\n      scaleX: 0,\n      scaleY: 0,\n      //X Y coordinates of logo on Bitmap\n      xCoord: 0,\n      yCoord: 0,\n      //logo image width and height, mainly for displaying and stretch functionality\n      logoWidth: 0,\n      logoHeight: 0,\n      //show the crop tool or not\n      showCrop: 0\n    };\n    this.myRef = React.createRef();\n    //TODO: Bind these functions in their declaration, similar to handleX functions\n    this.onDrop = this.onDrop.bind(this);\n    this.onLinkChange = this.onLinkChange.bind(this);\n    this.jimpScale = this.jimpScale.bind(this);\n    this.jimpResize = this.jimpResize.bind(this);\n    this.jimpPixelate = this.jimpPixelate.bind(this);\n    this.jimpUpdateSize = this.jimpUpdateSize.bind(this);\n  }\n\n  //-------------------------------------------------------------\n  //Functions to handle events when different buttons are clicked\n  //or values are changed\n  //-------------------------------------------------------------\n  handleDebugButtonClick = (i) => {\n      var posterizeValue = 2;\n      var pixelateValue = 10;\n      var scale = false;\n      this.jimpLogoCreation(this.state.picture, pixelateValue, posterizeValue, scale);\n      console.log(nearestColor('#800'));\n      console.log(nearestColor('#f9f4eb'));\n  }\n\n  handleDownloadButtonClick = (i) => {\n    console.log(\"Download Button Clicked\");\n  }\n\n  //picture is an array passed from image uploader\n  //pull most recently uploaded picture from current session\n  //TODO: reformat these functions into handleDrop and handleLinkChange\n  onDrop(picture){\n    //TODO: Insert function calls directly here to auto work on image\n    var localImg = URL.createObjectURL(picture[picture.length - 1]);\n\n    this.jimpLogoCreation(localImg);\n\n    //Set state for display\n    this.setState({\n      picture: URL.createObjectURL(picture[picture.length - 1]),\n    });\n    //this.jimpScale(localImg, 200, 200);\n    //This is very janky, waits 1 second before updating while picture state is being changed\n    //TODO: Figure out some sort of wait or confirmation,\n    //      this will introduce problems with varying connection speeds\n    /*\n    setTimeout(function () {\n      this.jimpUpdateSize(this.state.picture);\n    }.bind(this), 1000);\n    */\n  }\n\n  onLinkChange(event){\n    //janky way around CORS policy for getting from dropbox link, pass through cors-anywhere server\n    this.setState({\n      picture: \"https://cors-anywhere.herokuapp.com/\" + event.target.value.slice(0, -1) + \"1\"\n    });\n  }\n\n  //-------------------------------------------------------------\n  //render functions for each visible element\n  //TODO: combine everything in the same div into one render function\n  //like buttons for control panel and such\n  //-------------------------------------------------------------\n\n  renderLogoImage(){\n    return (\n      <div>\n        <DisplayLogoImg\n          picture={this.state.picture}\n        />\n      </div>\n    )\n  }\n\n  renderDebugButton(i){\n    return(\n      <DebugButton\n        onClick={this.handleDebugButtonClick}\n      />\n    )\n  }\n\n  renderDownloadButton(i){\n    return(\n      <DownloadButton\n        onClick={this.handleDownloadButtonClick}\n      />\n    )\n  }\n\n  renderImageUploader(){\n    return(\n      <ImageUploader\n        withIcon={true}\n        buttonText='Choose image'\n        label=\"Max file size: 5mb, Filetypes accepted: .bmp | .jpg | .png\"\n        fileContainerStyle={{backgroundColor: \"grey\"}}\n        singleImage={true}\n        onChange={this.onDrop}\n        imgExtension={['.jpg', '.gif', '.png', '.bmp']}\n        maxFileSize={5242880}\n      />\n    )\n  }\n\n  renderLinkForm(){\n    return(\n      <Linkform onChange={this.onLinkChange} onSubmit={this.onLinkSubmit}/>\n    )\n  }\n\n\n  //-------------------------------------------------------------\n  //Functions to do the actual editing on the image\n  //TODO: update functions to take in a string for which state they\n  //are going to change, I.E. this.state.picture or this.state.bmpPicture\n  //-------------------------------------------------------------\n  jimpLogoCreation(path, pix, pos, scale){\n    jimp.read(path, function(err, image) {\n      //image.pixelate(pix);\n      //image.posterize(pos);\n\n      if (scale)\n        image.scaleToFit(150,150);\n\n\n      //console.log(image.getPixelColor(1,1));\n      image.scan(0, 0, image.bitmap.width, image.bitmap.height, function(x, y, idx) {\n        this.bitmap.data[idx] = 0;\n      })\n\n      image.getBase64(Jimp.AUTO, function(err, data){\n        this.setState({\n          picture: data.replace(\"image/jpg\", \"image/bmp\"),\n        });\n      }.bind(this));\n    }.bind(this));\n  }\n\n\n  jimpUpdateSize(path){\n    var localX = 0;\n    var localY = 0;\n    jimp.read(path, function(err, image) {\n      localX = image.bitmap.width;\n      localY = image.bitmap.height;\n      this.setState({\n        logoWidth: localX,\n        logoHeight: localY,\n      });\n    }.bind(this));\n  }\n\n  jimpScale(path, x, y){\n    jimp.read(path, function(err, image) {\n      image.scaleToFit(x,y);\n      image.getBase64(Jimp.AUTO, function(err, data){\n        this.setState({\n          picture: data,\n        });\n      }.bind(this));\n    }.bind(this));\n  }\n\n  jimpResize(path, x, y){\n    jimp.read(path, function(err, image) {\n      image.resize(x,y);\n      image.getBase64(Jimp.AUTO, function(err, data){\n        this.setState({\n          picture: data,\n        });\n      }.bind(this));\n    }.bind(this));\n  }\n\n  jimpResizeBMP(path, x, y){\n    jimp.read(path, function(err, image) {\n      image.resize(x,y);\n      image.getBase64(Jimp.AUTO, function(err, data){\n        this.setState({\n          bmpPicture: data,\n        });\n      }.bind(this));\n    }.bind(this));\n  }\n\n  //map logo onto bitmap according to preset\n  //TODO: adjust for each preset\n\n  /*\n  jimpMap(path1, path2){\n    jimp.read(this.state.bmpPicture, function(err, bmpImage) {\n      jimp.read(this.state.picture, function(err, logo) {\n        bmpImage.composite(logo, 20, 20);\n        bmpImage.getBase64(Jimp.AUTO, function(err, data){\n          this.setState({\n            bmpPicture: data,\n          });\n        }.bind(this));\n      }.bind(this));\n    }.bind(this));\n  }\n  */\n\n  jimpPixelate(path, x){\n    jimp.read(path, function(err, image) {\n      image.pixelate(x);\n      image.getBase64(Jimp.AUTO, function(err, data){\n        this.setState({\n          picture: data,\n        });\n      }.bind(this));\n    }.bind(this));\n  }\n\n  jimpPosterize(path, x){\n    jimp.read(path, function(err, image) {\n      image.posterize(x);\n      image.getBase64(Jimp.AUTO, function(err, data){\n        this.setState({\n          picture: data,\n        });\n      }.bind(this));\n    }.bind(this));\n  }\n\n  //-------------------------------------------------------------\n  //Final render of the application\n  //-------------------------------------------------------------\n  render() {\n    return (\n      <div>\n        <div className=\"workDisplay\">\n          {this.renderLogoImage()}\n        </div>\n        <div className=\"panelDisplay\">\n          {this.renderLinkForm()}\n          {this.renderImageUploader()}\n          {this.renderDebugButton()}\n        </div>\n      </div>\n    );\n  }\n}\n\n\n//-------------------------------------------------------------\n//Overreaching App class, not nessecary at the moment but may be used later\n//-------------------------------------------------------------\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"app-img\">\n          <Editor />\n        </div>\n        <div className=\"img-fields\">\n          <div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n\n//-------------------------------------------------------------\n//Final DOM render, required by React\n//-------------------------------------------------------------\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"]},"metadata":{},"sourceType":"module"}