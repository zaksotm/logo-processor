{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _jpegJs = _interopRequireDefault(require(\"jpeg-js\"));\n\nvar _utils = require(\"@jimp/utils\");\n\nvar MIME_TYPE = 'image/jpeg';\n\nvar _default = function _default() {\n  return {\n    mime: (0, _defineProperty2[\"default\"])({}, MIME_TYPE, ['jpeg', 'jpg', 'jpe']),\n    constants: {\n      MIME_JPEG: MIME_TYPE\n    },\n    decoders: (0, _defineProperty2[\"default\"])({}, MIME_TYPE, _jpegJs[\"default\"].decode),\n    encoders: (0, _defineProperty2[\"default\"])({}, MIME_TYPE, function (image) {\n      return _jpegJs[\"default\"].encode(image.bitmap, image._quality).data;\n    }),\n    \"class\": {\n      // The quality to be used when saving JPEG images\n      _quality: 100,\n\n      /**\n       * Sets the quality of the image when saving as JPEG format (default is 100)\n       * @param {number} n The quality to use 0-100\n       * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n       * @returns {Jimp} this for chaining of methods\n       */\n      quality: function quality(n, cb) {\n        if (typeof n !== 'number') {\n          return _utils.throwError.call(this, 'n must be a number', cb);\n        }\n\n        if (n < 0 || n > 100) {\n          return _utils.throwError.call(this, 'n must be a number 0 - 100', cb);\n        }\n\n        this._quality = Math.round(n);\n\n        if ((0, _utils.isNodePattern)(cb)) {\n          cb.call(this, null, this);\n        }\n\n        return this;\n      }\n    }\n  };\n};\n\nexports[\"default\"] = _default;","map":{"version":3,"sources":["../src/index.js"],"names":["MIME_TYPE","mime","constants","MIME_JPEG","decoders","JPEG","encoders","image","_quality","quality","throwError","n","Math","cb"],"mappings":";;;;;;;;;;;AAAA,IAAA,OAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,SAAA,CAAA,CAAA;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AAEA,IAAMA,SAAS,GAAf,YAAA;;eAEe,SAAA,QAAA,GAAA;AAAA,SAAO;AACpBC,IAAAA,IAAI,EAAA,CAAA,GAAA,gBAAA,CAAA,SAAA,CAAA,EAAA,EAAA,EAAA,SAAA,EAAiB,CAAA,MAAA,EAAA,KAAA,EADD,KACC,CAAjB,CADgB;AAGpBC,IAAAA,SAAS,EAAE;AACTC,MAAAA,SAAS,EAAEH;AADF,KAHS;AAOpBI,IAAAA,QAAQ,EAAA,CAAA,GAAA,gBAAA,CAAA,SAAA,CAAA,EAAA,EAAA,EAAA,SAAA,EACOC,OAAAA,CAAAA,SAAAA,CAAAA,CARK,MAOZ,CAPY;AAWpBC,IAAAA,QAAQ,EAAA,CAAA,GAAA,gBAAA,CAAA,SAAA,CAAA,EAAA,EAAA,EAAA,SAAA,EACO,UAAA,KAAA,EAAK;AAAA,aAAID,OAAAA,CAAAA,SAAAA,CAAAA,CAAAA,MAAAA,CAAYE,KAAK,CAAjBF,MAAAA,EAA0BE,KAAK,CAA/BF,QAAAA,EAAJ,IAAA;AAZA,KAWZ,CAXY;AAepB,aAAO;AACL;AACAG,MAAAA,QAAQ,EAFH,GAAA;;AAGL;;;;;;AAMAC,MAAAA,OATK,EAAA,SAAA,OAAA,CAAA,CAAA,EAAA,EAAA,EASU;AACb,YAAI,OAAA,CAAA,KAAJ,QAAA,EAA2B;AACzB,iBAAOC,MAAAA,CAAAA,UAAAA,CAAAA,IAAAA,CAAAA,IAAAA,EAAAA,oBAAAA,EAAP,EAAOA,CAAP;AACD;;AAED,YAAIC,CAAC,GAADA,CAAAA,IAASA,CAAC,GAAd,GAAA,EAAsB;AACpB,iBAAOD,MAAAA,CAAAA,UAAAA,CAAAA,IAAAA,CAAAA,IAAAA,EAAAA,4BAAAA,EAAP,EAAOA,CAAP;AACD;;AAED,aAAA,QAAA,GAAgBE,IAAI,CAAJA,KAAAA,CAAhB,CAAgBA,CAAhB;;AAEA,YAAI,CAAA,GAAA,MAAA,CAAA,aAAA,EAAJ,EAAI,CAAJ,EAAuB;AACrBC,UAAAA,EAAE,CAAFA,IAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAAAA,IAAAA;AACD;;AAED,eAAA,IAAA;AACD;AAzBI;AAfa,GAAP","sourcesContent":["import JPEG from 'jpeg-js';\nimport { throwError, isNodePattern } from '@jimp/utils';\n\nconst MIME_TYPE = 'image/jpeg';\n\nexport default () => ({\n  mime: { [MIME_TYPE]: ['jpeg', 'jpg', 'jpe'] },\n\n  constants: {\n    MIME_JPEG: MIME_TYPE\n  },\n\n  decoders: {\n    [MIME_TYPE]: JPEG.decode\n  },\n\n  encoders: {\n    [MIME_TYPE]: image => JPEG.encode(image.bitmap, image._quality).data\n  },\n\n  class: {\n    // The quality to be used when saving JPEG images\n    _quality: 100,\n    /**\n     * Sets the quality of the image when saving as JPEG format (default is 100)\n     * @param {number} n The quality to use 0-100\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp} this for chaining of methods\n     */\n    quality(n, cb) {\n      if (typeof n !== 'number') {\n        return throwError.call(this, 'n must be a number', cb);\n      }\n\n      if (n < 0 || n > 100) {\n        return throwError.call(this, 'n must be a number 0 - 100', cb);\n      }\n\n      this._quality = Math.round(n);\n\n      if (isNodePattern(cb)) {\n        cb.call(this, null, this);\n      }\n\n      return this;\n    }\n  }\n});\n"]},"metadata":{},"sourceType":"script"}