{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _utils = require(\"@jimp/utils\");\n\nvar _default = function _default() {\n  return {\n    /**\n     * Blits a source image on to this image\n     * @param {Jimp} src the source Jimp instance\n     * @param {number} x the x position to blit the image\n     * @param {number} y the y position to blit the image\n     * @param {number} srcx (optional) the x position from which to crop the source image\n     * @param {number} srcy (optional) the y position from which to crop the source image\n     * @param {number} srcw (optional) the width to which to crop the source image\n     * @param {number} srch (optional) the height to which to crop the source image\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp} this for chaining of methods\n     */\n    blit: function blit(src, x, y, srcx, srcy, srcw, srch, cb) {\n      if (!(src instanceof this.constructor)) {\n        return _utils.throwError.call(this, 'The source must be a Jimp image', cb);\n      }\n\n      if (typeof x !== 'number' || typeof y !== 'number') {\n        return _utils.throwError.call(this, 'x and y must be numbers', cb);\n      }\n\n      if (typeof srcx === 'function') {\n        cb = srcx;\n        srcx = 0;\n        srcy = 0;\n        srcw = src.bitmap.width;\n        srch = src.bitmap.height;\n      } else if ((0, _typeof2[\"default\"])(srcx) === (0, _typeof2[\"default\"])(srcy) && (0, _typeof2[\"default\"])(srcy) === (0, _typeof2[\"default\"])(srcw) && (0, _typeof2[\"default\"])(srcw) === (0, _typeof2[\"default\"])(srch)) {\n        srcx = srcx || 0;\n        srcy = srcy || 0;\n        srcw = srcw || src.bitmap.width;\n        srch = srch || src.bitmap.height;\n      } else {\n        return _utils.throwError.call(this, 'srcx, srcy, srcw, srch must be numbers', cb);\n      } // round input\n\n\n      x = Math.round(x);\n      y = Math.round(y); // round input\n\n      srcx = Math.round(srcx);\n      srcy = Math.round(srcy);\n      srcw = Math.round(srcw);\n      srch = Math.round(srch);\n      var maxWidth = this.bitmap.width;\n      var maxHeight = this.bitmap.height;\n      var baseImage = this;\n      src.scanQuiet(srcx, srcy, srcw, srch, function (sx, sy, idx) {\n        var xOffset = x + sx - srcx;\n        var yOffset = y + sy - srcy;\n\n        if (xOffset >= 0 && yOffset >= 0 && maxWidth - xOffset > 0 && maxHeight - yOffset > 0) {\n          var dstIdx = baseImage.getPixelIndex(xOffset, yOffset);\n          var _src = {\n            r: this.bitmap.data[idx],\n            g: this.bitmap.data[idx + 1],\n            b: this.bitmap.data[idx + 2],\n            a: this.bitmap.data[idx + 3]\n          };\n          var dst = {\n            r: baseImage.bitmap.data[dstIdx],\n            g: baseImage.bitmap.data[dstIdx + 1],\n            b: baseImage.bitmap.data[dstIdx + 2],\n            a: baseImage.bitmap.data[dstIdx + 3]\n          };\n          baseImage.bitmap.data[dstIdx] = (_src.a * (_src.r - dst.r) - dst.r + 255 >> 8) + dst.r;\n          baseImage.bitmap.data[dstIdx + 1] = (_src.a * (_src.g - dst.g) - dst.g + 255 >> 8) + dst.g;\n          baseImage.bitmap.data[dstIdx + 2] = (_src.a * (_src.b - dst.b) - dst.b + 255 >> 8) + dst.b;\n          baseImage.bitmap.data[dstIdx + 3] = this.constructor.limit255(dst.a + _src.a);\n        }\n      });\n\n      if ((0, _utils.isNodePattern)(cb)) {\n        cb.call(this, null, this);\n      }\n\n      return this;\n    }\n  };\n};\n\nexports[\"default\"] = _default;","map":{"version":3,"sources":["../src/index.js"],"names":["blit","src","throwError","cb","srcx","srcy","srcw","srch","x","Math","y","maxWidth","maxHeight","baseImage","xOffset","yOffset","dstIdx","r","g","idx","b","a","dst"],"mappings":"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","sourcesContent":["import { throwError, isNodePattern } from '@jimp/utils';\n\nexport default () => ({\n  /**\n   * Blits a source image on to this image\n   * @param {Jimp} src the source Jimp instance\n   * @param {number} x the x position to blit the image\n   * @param {number} y the y position to blit the image\n   * @param {number} srcx (optional) the x position from which to crop the source image\n   * @param {number} srcy (optional) the y position from which to crop the source image\n   * @param {number} srcw (optional) the width to which to crop the source image\n   * @param {number} srch (optional) the height to which to crop the source image\n   * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n   * @returns {Jimp} this for chaining of methods\n   */\n  blit(src, x, y, srcx, srcy, srcw, srch, cb) {\n    if (!(src instanceof this.constructor)) {\n      return throwError.call(this, 'The source must be a Jimp image', cb);\n    }\n\n    if (typeof x !== 'number' || typeof y !== 'number') {\n      return throwError.call(this, 'x and y must be numbers', cb);\n    }\n\n    if (typeof srcx === 'function') {\n      cb = srcx;\n      srcx = 0;\n      srcy = 0;\n      srcw = src.bitmap.width;\n      srch = src.bitmap.height;\n    } else if (\n      typeof srcx === typeof srcy &&\n      typeof srcy === typeof srcw &&\n      typeof srcw === typeof srch\n    ) {\n      srcx = srcx || 0;\n      srcy = srcy || 0;\n      srcw = srcw || src.bitmap.width;\n      srch = srch || src.bitmap.height;\n    } else {\n      return throwError.call(\n        this,\n        'srcx, srcy, srcw, srch must be numbers',\n        cb\n      );\n    }\n\n    // round input\n    x = Math.round(x);\n    y = Math.round(y);\n\n    // round input\n    srcx = Math.round(srcx);\n    srcy = Math.round(srcy);\n    srcw = Math.round(srcw);\n    srch = Math.round(srch);\n\n    const maxWidth = this.bitmap.width;\n    const maxHeight = this.bitmap.height;\n    const baseImage = this;\n\n    src.scanQuiet(srcx, srcy, srcw, srch, function(sx, sy, idx) {\n      const xOffset = x + sx - srcx;\n      const yOffset = y + sy - srcy;\n\n      if (\n        xOffset >= 0 &&\n        yOffset >= 0 &&\n        maxWidth - xOffset > 0 &&\n        maxHeight - yOffset > 0\n      ) {\n        const dstIdx = baseImage.getPixelIndex(xOffset, yOffset);\n        const src = {\n          r: this.bitmap.data[idx],\n          g: this.bitmap.data[idx + 1],\n          b: this.bitmap.data[idx + 2],\n          a: this.bitmap.data[idx + 3]\n        };\n\n        const dst = {\n          r: baseImage.bitmap.data[dstIdx],\n          g: baseImage.bitmap.data[dstIdx + 1],\n          b: baseImage.bitmap.data[dstIdx + 2],\n          a: baseImage.bitmap.data[dstIdx + 3]\n        };\n\n        baseImage.bitmap.data[dstIdx] =\n          ((src.a * (src.r - dst.r) - dst.r + 255) >> 8) + dst.r;\n        baseImage.bitmap.data[dstIdx + 1] =\n          ((src.a * (src.g - dst.g) - dst.g + 255) >> 8) + dst.g;\n        baseImage.bitmap.data[dstIdx + 2] =\n          ((src.a * (src.b - dst.b) - dst.b + 255) >> 8) + dst.b;\n        baseImage.bitmap.data[dstIdx + 3] = this.constructor.limit255(\n          dst.a + src.a\n        );\n      }\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n"]},"metadata":{},"sourceType":"script"}