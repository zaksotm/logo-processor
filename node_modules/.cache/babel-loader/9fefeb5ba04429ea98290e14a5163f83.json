{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _pngjs = require(\"pngjs\");\n\nvar _utils = require(\"@jimp/utils\");\n\nvar MIME_TYPE = 'image/png'; // PNG filter types\n\nvar PNG_FILTER_AUTO = -1;\nvar PNG_FILTER_NONE = 0;\nvar PNG_FILTER_SUB = 1;\nvar PNG_FILTER_UP = 2;\nvar PNG_FILTER_AVERAGE = 3;\nvar PNG_FILTER_PATH = 4;\n\nvar _default = function _default() {\n  return {\n    mime: (0, _defineProperty2[\"default\"])({}, MIME_TYPE, ['png']),\n    constants: {\n      MIME_PNG: MIME_TYPE,\n      PNG_FILTER_AUTO: PNG_FILTER_AUTO,\n      PNG_FILTER_NONE: PNG_FILTER_NONE,\n      PNG_FILTER_SUB: PNG_FILTER_SUB,\n      PNG_FILTER_UP: PNG_FILTER_UP,\n      PNG_FILTER_AVERAGE: PNG_FILTER_AVERAGE,\n      PNG_FILTER_PATH: PNG_FILTER_PATH\n    },\n    hasAlpha: (0, _defineProperty2[\"default\"])({}, MIME_TYPE, true),\n    decoders: (0, _defineProperty2[\"default\"])({}, MIME_TYPE, _pngjs.PNG.sync.read),\n    encoders: (0, _defineProperty2[\"default\"])({}, MIME_TYPE, function (data) {\n      var png = new _pngjs.PNG({\n        width: data.bitmap.width,\n        height: data.bitmap.height\n      });\n      png.data = data.bitmap.data;\n      return _pngjs.PNG.sync.write(png, {\n        width: data.bitmap.width,\n        height: data.bitmap.height,\n        deflateLevel: data._deflateLevel,\n        deflateStrategy: data._deflateStrategy,\n        filterType: data._filterType,\n        colorType: typeof data._colorType === 'number' ? data._colorType : data._rgba ? 6 : 2,\n        inputHasAlpha: data._rgba\n      });\n    }),\n    \"class\": {\n      _deflateLevel: 9,\n      _deflateStrategy: 3,\n      _filterType: PNG_FILTER_AUTO,\n      _colorType: null,\n\n      /**\n       * Sets the deflate level used when saving as PNG format (default is 9)\n       * @param {number} l Deflate level to use 0-9. 0 is no compression. 9 (default) is maximum compression.\n       * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n       * @returns {Jimp} this for chaining of methods\n       */\n      deflateLevel: function deflateLevel(l, cb) {\n        if (typeof l !== 'number') {\n          return _utils.throwError.call(this, 'l must be a number', cb);\n        }\n\n        if (l < 0 || l > 9) {\n          return _utils.throwError.call(this, 'l must be a number 0 - 9', cb);\n        }\n\n        this._deflateLevel = Math.round(l);\n\n        if ((0, _utils.isNodePattern)(cb)) {\n          cb.call(this, null, this);\n        }\n\n        return this;\n      },\n\n      /**\n       * Sets the deflate strategy used when saving as PNG format (default is 3)\n       * @param {number} s Deflate strategy to use 0-3.\n       * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n       * @returns {Jimp} this for chaining of methods\n       */\n      deflateStrategy: function deflateStrategy(s, cb) {\n        if (typeof s !== 'number') {\n          return _utils.throwError.call(this, 's must be a number', cb);\n        }\n\n        if (s < 0 || s > 3) {\n          return _utils.throwError.call(this, 's must be a number 0 - 3', cb);\n        }\n\n        this._deflateStrategy = Math.round(s);\n\n        if ((0, _utils.isNodePattern)(cb)) {\n          cb.call(this, null, this);\n        }\n\n        return this;\n      },\n\n      /**\n       * Sets the filter type used when saving as PNG format (default is automatic filters)\n       * @param {number} f The quality to use -1-4.\n       * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n       * @returns {Jimp} this for chaining of methods\n       */\n      filterType: function filterType(f, cb) {\n        if (typeof f !== 'number') {\n          return _utils.throwError.call(this, 'n must be a number', cb);\n        }\n\n        if (f < -1 || f > 4) {\n          return _utils.throwError.call(this, 'n must be -1 (auto) or a number 0 - 4', cb);\n        }\n\n        this._filterType = Math.round(f);\n\n        if ((0, _utils.isNodePattern)(cb)) {\n          cb.call(this, null, this);\n        }\n\n        return this;\n      },\n\n      /**\n       * Sets the color type used when saving as PNG format\n       * @param {number} s color type to use 0, 2, 4, 6.\n       * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n       * @returns {Jimp} this for chaining of methods\n       */\n      colorType: function colorType(s, cb) {\n        if (typeof s !== 'number') {\n          return _utils.throwError.call(this, 's must be a number', cb);\n        }\n\n        if (s !== 0 && s !== 2 && s !== 4 && s !== 6) {\n          return _utils.throwError.call(this, 's must be a number 0, 2, 4, 6.', cb);\n        }\n\n        this._colorType = Math.round(s);\n\n        if ((0, _utils.isNodePattern)(cb)) {\n          cb.call(this, null, this);\n        }\n\n        return this;\n      }\n    }\n  };\n};\n\nexports[\"default\"] = _default;","map":{"version":3,"sources":["../src/index.js"],"names":["MIME_TYPE","PNG_FILTER_AUTO","PNG_FILTER_NONE","PNG_FILTER_SUB","PNG_FILTER_UP","PNG_FILTER_AVERAGE","PNG_FILTER_PATH","mime","constants","MIME_PNG","hasAlpha","decoders","PNG","encoders","png","width","data","height","deflateLevel","deflateStrategy","filterType","colorType","inputHasAlpha","_rgba","_deflateLevel","_deflateStrategy","_filterType","_colorType","throwError","l","Math","cb","s","f"],"mappings":"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","sourcesContent":["import { PNG } from 'pngjs';\nimport { throwError, isNodePattern } from '@jimp/utils';\n\nconst MIME_TYPE = 'image/png';\n\n// PNG filter types\nconst PNG_FILTER_AUTO = -1;\nconst PNG_FILTER_NONE = 0;\nconst PNG_FILTER_SUB = 1;\nconst PNG_FILTER_UP = 2;\nconst PNG_FILTER_AVERAGE = 3;\nconst PNG_FILTER_PATH = 4;\n\nexport default () => ({\n  mime: { [MIME_TYPE]: ['png'] },\n\n  constants: {\n    MIME_PNG: MIME_TYPE,\n    PNG_FILTER_AUTO,\n    PNG_FILTER_NONE,\n    PNG_FILTER_SUB,\n    PNG_FILTER_UP,\n    PNG_FILTER_AVERAGE,\n    PNG_FILTER_PATH\n  },\n\n  hasAlpha: { [MIME_TYPE]: true },\n  decoders: { [MIME_TYPE]: PNG.sync.read },\n  encoders: {\n    [MIME_TYPE]: data => {\n      const png = new PNG({\n        width: data.bitmap.width,\n        height: data.bitmap.height\n      });\n\n      png.data = data.bitmap.data;\n\n      return PNG.sync.write(png, {\n        width: data.bitmap.width,\n        height: data.bitmap.height,\n        deflateLevel: data._deflateLevel,\n        deflateStrategy: data._deflateStrategy,\n        filterType: data._filterType,\n        colorType:\n          typeof data._colorType === 'number'\n            ? data._colorType\n            : data._rgba\n              ? 6\n              : 2,\n        inputHasAlpha: data._rgba\n      });\n    }\n  },\n\n  class: {\n    _deflateLevel: 9,\n    _deflateStrategy: 3,\n    _filterType: PNG_FILTER_AUTO,\n    _colorType: null,\n\n    /**\n     * Sets the deflate level used when saving as PNG format (default is 9)\n     * @param {number} l Deflate level to use 0-9. 0 is no compression. 9 (default) is maximum compression.\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp} this for chaining of methods\n     */\n    deflateLevel(l, cb) {\n      if (typeof l !== 'number') {\n        return throwError.call(this, 'l must be a number', cb);\n      }\n\n      if (l < 0 || l > 9) {\n        return throwError.call(this, 'l must be a number 0 - 9', cb);\n      }\n\n      this._deflateLevel = Math.round(l);\n\n      if (isNodePattern(cb)) {\n        cb.call(this, null, this);\n      }\n\n      return this;\n    },\n\n    /**\n     * Sets the deflate strategy used when saving as PNG format (default is 3)\n     * @param {number} s Deflate strategy to use 0-3.\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp} this for chaining of methods\n     */\n    deflateStrategy(s, cb) {\n      if (typeof s !== 'number') {\n        return throwError.call(this, 's must be a number', cb);\n      }\n\n      if (s < 0 || s > 3) {\n        return throwError.call(this, 's must be a number 0 - 3', cb);\n      }\n\n      this._deflateStrategy = Math.round(s);\n\n      if (isNodePattern(cb)) {\n        cb.call(this, null, this);\n      }\n\n      return this;\n    },\n\n    /**\n     * Sets the filter type used when saving as PNG format (default is automatic filters)\n     * @param {number} f The quality to use -1-4.\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp} this for chaining of methods\n     */\n    filterType(f, cb) {\n      if (typeof f !== 'number') {\n        return throwError.call(this, 'n must be a number', cb);\n      }\n\n      if (f < -1 || f > 4) {\n        return throwError.call(\n          this,\n          'n must be -1 (auto) or a number 0 - 4',\n          cb\n        );\n      }\n\n      this._filterType = Math.round(f);\n\n      if (isNodePattern(cb)) {\n        cb.call(this, null, this);\n      }\n\n      return this;\n    },\n    /**\n     * Sets the color type used when saving as PNG format\n     * @param {number} s color type to use 0, 2, 4, 6.\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp} this for chaining of methods\n     */ colorType(s, cb) {\n      if (typeof s !== 'number') {\n        return throwError.call(this, 's must be a number', cb);\n      }\n\n      if (s !== 0 && s !== 2 && s !== 4 && s !== 6) {\n        return throwError.call(this, 's must be a number 0, 2, 4, 6.', cb);\n      }\n\n      this._colorType = Math.round(s);\n\n      if (isNodePattern(cb)) {\n        cb.call(this, null, this);\n      }\n\n      return this;\n    }\n  }\n});\n"]},"metadata":{},"sourceType":"script"}