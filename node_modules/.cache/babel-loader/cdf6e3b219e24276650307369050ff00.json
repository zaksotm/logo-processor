{"ast":null,"code":"var _jsxFileName = \"/Users/zakstratton/Documents/logo-processor/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.css'; //import './style/_buttons.scss';\n\nimport ImageUploader from 'react-images-upload';\nimport Jimp from 'jimp/es';\n\nvar jimp = require('jimp'); //initialize the default image\n\n\nconst src = require(\"./test2.jpg\"); //janky way around CORS policy for getting from dropbox link, pass through cors-anywhere server\n//var dropboxURL = \"0\"\n//var imgFinal = (\"https://cors-anywhere.herokuapp.com/\" + dropboxURL.slice(0, -1) + \"1\");\n//-------------------------------------------------------------\n//Main classes for displaying the image we are editing\n//as well as the resulting images after edits\n//-------------------------------------------------------------\n\n\nclass DisplayLogoImg extends React.Component {\n  render() {\n    return React.createElement(\"img\", {\n      className: \"workImage\",\n      src: this.props.picture,\n      alt: \"Uploaded logo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    });\n  }\n\n} //-------------------------------------------------------------\n//Custom classes for each button, passes state up\n//TODO:   Merge all of one type into a single class? [buttons, forms, etc]\n//        Transfer classes into seperate file and import it\n//-------------------------------------------------------------\n\n\nclass Linkform extends React.Component {\n  render() {\n    return React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, \"Dropbox Link:\", React.createElement(\"input\", {\n      type: \"text\",\n      onChange: this.props.onChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    })));\n  }\n\n}\n\nclass DebugButton extends React.Component {\n  render() {\n    return React.createElement(\"button\", {\n      onClick: () => this.props.onClick(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, \"Debug\");\n  }\n\n}\n\nclass DownloadButton extends React.Component {\n  render() {\n    return React.createElement(\"button\", {\n      onClick: () => this.props.onClick(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \"Download BMP\");\n  }\n\n} //-------------------------------------------------------------\n//Main editor app class, contains most info in state\n//-------------------------------------------------------------\n\n\nclass Editor extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleDebugButtonClick = i => {\n      var posterizeValue = 3;\n      var pixelateValue = 11;\n      var scale = false;\n      this.jimpLogoCreation(this.state.picture, pixelateValue, posterizeValue, scale);\n      console.log(this.state.picture);\n    };\n\n    this.handleDownloadButtonClick = i => {\n      console.log(\"Download Button Clicked\");\n    };\n\n    this.state = {\n      //CURRENTLY NOT USED: values for pixelization and posterize alteration\n      pixelValue: 0,\n      thresholdValue: 0,\n      //value that holds the path to default image, then the base64 data of render\n      //base64 used by Jimp, since it is a web-based app. Local files caused issues.\n      picture: src,\n      //preset and chassis for bitmap generation\n      preset: 0,\n      chassis: 0,\n      //Locations for crop rectangle\n      //TODO: Change names to something less global\n      width: 100,\n      height: 100,\n      top: 20,\n      left: 20,\n      rotateAngle: 0,\n      //Scale values for scale operation\n      scaleX: 0,\n      scaleY: 0,\n      //X Y coordinates of logo on Bitmap\n      xCoord: 0,\n      yCoord: 0,\n      //logo image width and height, mainly for displaying and stretch functionality\n      logoWidth: 0,\n      logoHeight: 0,\n      //show the crop tool or not\n      showCrop: 0\n    };\n    this.myRef = React.createRef(); //TODO: Bind these functions in their declaration, similar to handleX functions\n\n    this.onDrop = this.onDrop.bind(this);\n    this.onLinkChange = this.onLinkChange.bind(this);\n    this.jimpScale = this.jimpScale.bind(this);\n    this.jimpResize = this.jimpResize.bind(this);\n    this.jimpPixelate = this.jimpPixelate.bind(this);\n    this.jimpUpdateSize = this.jimpUpdateSize.bind(this);\n  } //-------------------------------------------------------------\n  //Functions to handle events when different buttons are clicked\n  //or values are changed\n  //-------------------------------------------------------------\n\n\n  //picture is an array passed from image uploader\n  //pull most recently uploaded picture from current session\n  //TODO: reformat these functions into handleDrop and handleLinkChange\n  onDrop(picture) {\n    //TODO: Insert function calls directly here to auto work on image\n    var localImg = URL.createObjectURL(picture[picture.length - 1]);\n    this.jimpLogoCreation(localImg); //Set state for display\n\n    this.setState({\n      picture: URL.createObjectURL(picture[picture.length - 1])\n    }); //this.jimpScale(localImg, 200, 200);\n    //This is very janky, waits 1 second before updating while picture state is being changed\n    //TODO: Figure out some sort of wait or confirmation,\n    //      this will introduce problems with varying connection speeds\n\n    /*\n    setTimeout(function () {\n      this.jimpUpdateSize(this.state.picture);\n    }.bind(this), 1000);\n    */\n  }\n\n  onLinkChange(event) {\n    //janky way around CORS policy for getting from dropbox link, pass through cors-anywhere server\n    this.setState({\n      picture: \"https://cors-anywhere.herokuapp.com/\" + event.target.value.slice(0, -1) + \"1\"\n    });\n  } //-------------------------------------------------------------\n  //render functions for each visible element\n  //TODO: combine everything in the same div into one render function\n  //like buttons for control panel and such\n  //-------------------------------------------------------------\n\n\n  renderLogoImage() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, React.createElement(DisplayLogoImg, {\n      picture: this.state.picture,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }));\n  }\n\n  renderDebugButton(i) {\n    return React.createElement(DebugButton, {\n      onClick: this.handleDebugButtonClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    });\n  }\n\n  renderDownloadButton(i) {\n    return React.createElement(DownloadButton, {\n      onClick: this.handleDownloadButtonClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    });\n  }\n\n  renderImageUploader() {\n    return React.createElement(ImageUploader, {\n      withIcon: true,\n      buttonText: \"Choose image\",\n      label: \"Max file size: 5mb, Filetypes accepted: .bmp | .jpg | .png\",\n      fileContainerStyle: {\n        backgroundColor: \"grey\"\n      },\n      singleImage: true,\n      onChange: this.onDrop,\n      imgExtension: ['.jpg', '.gif', '.png', '.bmp'],\n      maxFileSize: 5242880,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    });\n  }\n\n  renderLinkForm() {\n    return React.createElement(Linkform, {\n      onChange: this.onLinkChange,\n      onSubmit: this.onLinkSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    });\n  } //-------------------------------------------------------------\n  //Functions to do the actual editing on the image\n  //TODO: update functions to take in a string for which state they\n  //are going to change, I.E. this.state.picture or this.state.bmpPicture\n  //-------------------------------------------------------------\n\n\n  jimpLogoCreation(path, pix, pos, scale) {\n    jimp.read(path, function (err, image) {\n      image.pixelate(pix);\n      image.posterize(pos);\n      if (scale) image.scaleToFit(150, 150);\n      image.getBase64(Jimp.AUTO, function (err, data) {\n        this.setState({\n          picture: data.replace(\"image/jpg\", \"image/bmp\")\n        });\n      }.bind(this));\n    }.bind(this));\n  }\n\n  jimpUpdateSize(path) {\n    var localX = 0;\n    var localY = 0;\n    jimp.read(path, function (err, image) {\n      localX = image.bitmap.width;\n      localY = image.bitmap.height;\n      this.setState({\n        logoWidth: localX,\n        logoHeight: localY\n      });\n    }.bind(this));\n  }\n\n  jimpScale(path, x, y) {\n    jimp.read(path, function (err, image) {\n      image.scaleToFit(x, y);\n      image.getBase64(Jimp.AUTO, function (err, data) {\n        this.setState({\n          picture: data\n        });\n      }.bind(this));\n    }.bind(this));\n  }\n\n  jimpResize(path, x, y) {\n    jimp.read(path, function (err, image) {\n      image.resize(x, y);\n      image.getBase64(Jimp.AUTO, function (err, data) {\n        this.setState({\n          picture: data\n        });\n      }.bind(this));\n    }.bind(this));\n  }\n\n  jimpResizeBMP(path, x, y) {\n    jimp.read(path, function (err, image) {\n      image.resize(x, y);\n      image.getBase64(Jimp.AUTO, function (err, data) {\n        this.setState({\n          bmpPicture: data\n        });\n      }.bind(this));\n    }.bind(this));\n  } //map logo onto bitmap according to preset\n  //TODO: adjust for each preset\n\n  /*\n  jimpMap(path1, path2){\n    jimp.read(this.state.bmpPicture, function(err, bmpImage) {\n      jimp.read(this.state.picture, function(err, logo) {\n        bmpImage.composite(logo, 20, 20);\n        bmpImage.getBase64(Jimp.AUTO, function(err, data){\n          this.setState({\n            bmpPicture: data,\n          });\n        }.bind(this));\n      }.bind(this));\n    }.bind(this));\n  }\n  */\n\n\n  jimpPixelate(path, x) {\n    jimp.read(path, function (err, image) {\n      image.pixelate(x);\n      image.getBase64(Jimp.AUTO, function (err, data) {\n        this.setState({\n          picture: data\n        });\n      }.bind(this));\n    }.bind(this));\n  }\n\n  jimpPosterize(path, x) {\n    jimp.read(path, function (err, image) {\n      image.posterize(x);\n      image.getBase64(Jimp.AUTO, function (err, data) {\n        this.setState({\n          picture: data\n        });\n      }.bind(this));\n    }.bind(this));\n  } //-------------------------------------------------------------\n  //Final render of the application\n  //-------------------------------------------------------------\n\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"workDisplay\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321\n      },\n      __self: this\n    }, this.renderLogoImage()), React.createElement(\"div\", {\n      className: \"panelDisplay\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324\n      },\n      __self: this\n    }, this.renderLinkForm(), this.renderImageUploader(), this.renderDebugButton()));\n  }\n\n} //-------------------------------------------------------------\n//Overreaching App class, not nessecary at the moment but may be used later\n//-------------------------------------------------------------\n\n\nclass App extends React.Component {\n  render() {\n    return React.createElement(\"div\", {\n      className: \"app\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"app-img\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342\n      },\n      __self: this\n    }, React.createElement(Editor, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"img-fields\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346\n      },\n      __self: this\n    })));\n  }\n\n} //-------------------------------------------------------------\n//Final DOM render, required by React\n//-------------------------------------------------------------\n\n\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 359\n  },\n  __self: this\n}), document.getElementById('root'));","map":{"version":3,"sources":["/Users/zakstratton/Documents/logo-processor/src/index.js"],"names":["React","ReactDOM","ImageUploader","Jimp","jimp","require","src","DisplayLogoImg","Component","render","props","picture","Linkform","onChange","DebugButton","onClick","DownloadButton","Editor","constructor","handleDebugButtonClick","i","posterizeValue","pixelateValue","scale","jimpLogoCreation","state","console","log","handleDownloadButtonClick","pixelValue","thresholdValue","preset","chassis","width","height","top","left","rotateAngle","scaleX","scaleY","xCoord","yCoord","logoWidth","logoHeight","showCrop","myRef","createRef","onDrop","bind","onLinkChange","jimpScale","jimpResize","jimpPixelate","jimpUpdateSize","localImg","URL","createObjectURL","length","setState","event","target","value","slice","renderLogoImage","renderDebugButton","renderDownloadButton","renderImageUploader","backgroundColor","renderLinkForm","onLinkSubmit","path","pix","pos","read","err","image","pixelate","posterize","scaleToFit","getBase64","AUTO","data","replace","localX","localY","bitmap","x","y","resize","jimpResizeBMP","bmpPicture","jimpPosterize","App","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.css';\n//import './style/_buttons.scss';\nimport ImageUploader from 'react-images-upload';\nimport Jimp from 'jimp/es';\n\nvar jimp = require('jimp');\n\n//initialize the default image\nconst src = require(\"./test2.jpg\");\n//janky way around CORS policy for getting from dropbox link, pass through cors-anywhere server\n//var dropboxURL = \"0\"\n//var imgFinal = (\"https://cors-anywhere.herokuapp.com/\" + dropboxURL.slice(0, -1) + \"1\");\n\n//-------------------------------------------------------------\n//Main classes for displaying the image we are editing\n//as well as the resulting images after edits\n//-------------------------------------------------------------\nclass DisplayLogoImg extends React.Component{\n  render(){\n    return(\n      <img className=\"workImage\" src={this.props.picture} alt=\"Uploaded logo\" />\n    )\n  }\n}\n\n//-------------------------------------------------------------\n//Custom classes for each button, passes state up\n//TODO:   Merge all of one type into a single class? [buttons, forms, etc]\n//        Transfer classes into seperate file and import it\n//-------------------------------------------------------------\n\nclass Linkform extends React.Component {\n  render() {\n    return (\n      <form>\n        <label>\n          Dropbox Link:\n          <input type=\"text\" onChange={this.props.onChange} />\n        </label>\n      </form>\n    );\n  }\n}\n\nclass DebugButton extends React.Component{\n  render(){\n    return(\n      <button onClick={() => this.props.onClick()}>Debug</button>\n    )\n  }\n}\n\nclass DownloadButton extends React.Component{\n  render(){\n    return(\n      <button onClick={() => this.props.onClick()}>Download BMP</button>\n    )\n  }\n}\n\n//-------------------------------------------------------------\n//Main editor app class, contains most info in state\n//-------------------------------------------------------------\nclass Editor extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      //CURRENTLY NOT USED: values for pixelization and posterize alteration\n      pixelValue: 0,\n      thresholdValue: 0,\n      //value that holds the path to default image, then the base64 data of render\n      //base64 used by Jimp, since it is a web-based app. Local files caused issues.\n      picture: src,\n      //preset and chassis for bitmap generation\n      preset: 0,\n      chassis: 0,\n      //Locations for crop rectangle\n      //TODO: Change names to something less global\n      width: 100,\n      height: 100,\n      top: 20,\n      left: 20,\n      rotateAngle: 0,\n      //Scale values for scale operation\n      scaleX: 0,\n      scaleY: 0,\n      //X Y coordinates of logo on Bitmap\n      xCoord: 0,\n      yCoord: 0,\n      //logo image width and height, mainly for displaying and stretch functionality\n      logoWidth: 0,\n      logoHeight: 0,\n      //show the crop tool or not\n      showCrop: 0\n    };\n    this.myRef = React.createRef();\n    //TODO: Bind these functions in their declaration, similar to handleX functions\n    this.onDrop = this.onDrop.bind(this);\n    this.onLinkChange = this.onLinkChange.bind(this);\n    this.jimpScale = this.jimpScale.bind(this);\n    this.jimpResize = this.jimpResize.bind(this);\n    this.jimpPixelate = this.jimpPixelate.bind(this);\n    this.jimpUpdateSize = this.jimpUpdateSize.bind(this);\n  }\n\n  //-------------------------------------------------------------\n  //Functions to handle events when different buttons are clicked\n  //or values are changed\n  //-------------------------------------------------------------\n  handleDebugButtonClick = (i) => {\n      var posterizeValue = 3;\n      var pixelateValue = 11;\n      var scale = false;\n      this.jimpLogoCreation(this.state.picture, pixelateValue, posterizeValue, scale);\n      console.log(this.state.picture);\n  }\n\n  handleDownloadButtonClick = (i) => {\n    console.log(\"Download Button Clicked\");\n  }\n\n  //picture is an array passed from image uploader\n  //pull most recently uploaded picture from current session\n  //TODO: reformat these functions into handleDrop and handleLinkChange\n  onDrop(picture){\n    //TODO: Insert function calls directly here to auto work on image\n    var localImg = URL.createObjectURL(picture[picture.length - 1]);\n\n    this.jimpLogoCreation(localImg);\n\n    //Set state for display\n    this.setState({\n      picture: URL.createObjectURL(picture[picture.length - 1]),\n    });\n    //this.jimpScale(localImg, 200, 200);\n    //This is very janky, waits 1 second before updating while picture state is being changed\n    //TODO: Figure out some sort of wait or confirmation,\n    //      this will introduce problems with varying connection speeds\n    /*\n    setTimeout(function () {\n      this.jimpUpdateSize(this.state.picture);\n    }.bind(this), 1000);\n    */\n  }\n\n  onLinkChange(event){\n    //janky way around CORS policy for getting from dropbox link, pass through cors-anywhere server\n    this.setState({\n      picture: \"https://cors-anywhere.herokuapp.com/\" + event.target.value.slice(0, -1) + \"1\"\n    });\n  }\n\n  //-------------------------------------------------------------\n  //render functions for each visible element\n  //TODO: combine everything in the same div into one render function\n  //like buttons for control panel and such\n  //-------------------------------------------------------------\n\n  renderLogoImage(){\n    return (\n      <div>\n        <DisplayLogoImg\n          picture={this.state.picture}\n        />\n      </div>\n    )\n  }\n\n  renderDebugButton(i){\n    return(\n      <DebugButton\n        onClick={this.handleDebugButtonClick}\n      />\n    )\n  }\n\n  renderDownloadButton(i){\n    return(\n      <DownloadButton\n        onClick={this.handleDownloadButtonClick}\n      />\n    )\n  }\n\n  renderImageUploader(){\n    return(\n      <ImageUploader\n        withIcon={true}\n        buttonText='Choose image'\n        label=\"Max file size: 5mb, Filetypes accepted: .bmp | .jpg | .png\"\n        fileContainerStyle={{backgroundColor: \"grey\"}}\n        singleImage={true}\n        onChange={this.onDrop}\n        imgExtension={['.jpg', '.gif', '.png', '.bmp']}\n        maxFileSize={5242880}\n      />\n    )\n  }\n\n  renderLinkForm(){\n    return(\n      <Linkform onChange={this.onLinkChange} onSubmit={this.onLinkSubmit}/>\n    )\n  }\n\n\n  //-------------------------------------------------------------\n  //Functions to do the actual editing on the image\n  //TODO: update functions to take in a string for which state they\n  //are going to change, I.E. this.state.picture or this.state.bmpPicture\n  //-------------------------------------------------------------\n  jimpLogoCreation(path, pix, pos, scale){\n    jimp.read(path, function(err, image) {\n      image.pixelate(pix);\n      image.posterize(pos);\n      if (scale)\n        image.scaleToFit(150,150);\n      image.getBase64(Jimp.AUTO, function(err, data){\n        this.setState({\n          picture: data.replace(\"image/jpg\", \"image/bmp\"),\n        });\n      }.bind(this));\n    }.bind(this));\n  }\n\n\n  jimpUpdateSize(path){\n    var localX = 0;\n    var localY = 0;\n    jimp.read(path, function(err, image) {\n      localX = image.bitmap.width;\n      localY = image.bitmap.height;\n      this.setState({\n        logoWidth: localX,\n        logoHeight: localY,\n      });\n    }.bind(this));\n  }\n\n  jimpScale(path, x, y){\n    jimp.read(path, function(err, image) {\n      image.scaleToFit(x,y);\n      image.getBase64(Jimp.AUTO, function(err, data){\n        this.setState({\n          picture: data,\n        });\n      }.bind(this));\n    }.bind(this));\n  }\n\n  jimpResize(path, x, y){\n    jimp.read(path, function(err, image) {\n      image.resize(x,y);\n      image.getBase64(Jimp.AUTO, function(err, data){\n        this.setState({\n          picture: data,\n        });\n      }.bind(this));\n    }.bind(this));\n  }\n\n  jimpResizeBMP(path, x, y){\n    jimp.read(path, function(err, image) {\n      image.resize(x,y);\n      image.getBase64(Jimp.AUTO, function(err, data){\n        this.setState({\n          bmpPicture: data,\n        });\n      }.bind(this));\n    }.bind(this));\n  }\n\n  //map logo onto bitmap according to preset\n  //TODO: adjust for each preset\n\n  /*\n  jimpMap(path1, path2){\n    jimp.read(this.state.bmpPicture, function(err, bmpImage) {\n      jimp.read(this.state.picture, function(err, logo) {\n        bmpImage.composite(logo, 20, 20);\n        bmpImage.getBase64(Jimp.AUTO, function(err, data){\n          this.setState({\n            bmpPicture: data,\n          });\n        }.bind(this));\n      }.bind(this));\n    }.bind(this));\n  }\n  */\n\n  jimpPixelate(path, x){\n    jimp.read(path, function(err, image) {\n      image.pixelate(x);\n      image.getBase64(Jimp.AUTO, function(err, data){\n        this.setState({\n          picture: data,\n        });\n      }.bind(this));\n    }.bind(this));\n  }\n\n  jimpPosterize(path, x){\n    jimp.read(path, function(err, image) {\n      image.posterize(x);\n      image.getBase64(Jimp.AUTO, function(err, data){\n        this.setState({\n          picture: data,\n        });\n      }.bind(this));\n    }.bind(this));\n  }\n\n  //-------------------------------------------------------------\n  //Final render of the application\n  //-------------------------------------------------------------\n  render() {\n    return (\n      <div>\n        <div className=\"workDisplay\">\n          {this.renderLogoImage()}\n        </div>\n        <div className=\"panelDisplay\">\n          {this.renderLinkForm()}\n          {this.renderImageUploader()}\n          {this.renderDebugButton()}\n        </div>\n      </div>\n    );\n  }\n}\n\n\n//-------------------------------------------------------------\n//Overreaching App class, not nessecary at the moment but may be used later\n//-------------------------------------------------------------\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"app-img\">\n          <Editor />\n        </div>\n        <div className=\"img-fields\">\n          <div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n\n//-------------------------------------------------------------\n//Final DOM render, required by React\n//-------------------------------------------------------------\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"]},"metadata":{},"sourceType":"module"}