{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _utils = require(\"@jimp/utils\");\n/**\n * Scale the image so the given width and height keeping the aspect ratio. Some parts of the image may be clipped.\n * @param {number} w the width to resize the image to\n * @param {number} h the height to resize the image to\n * @param {number} alignBits (optional) A bitmask for horizontal and vertical alignment\n * @param {string} mode (optional) a scaling method (e.g. Jimp.RESIZE_BEZIER)\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\n\n\nvar _default = function _default() {\n  return {\n    cover: function cover(w, h, alignBits, mode, cb) {\n      if (typeof w !== 'number' || typeof h !== 'number') {\n        return _utils.throwError.call(this, 'w and h must be numbers', cb);\n      }\n\n      if (alignBits && typeof alignBits === 'function' && typeof cb === 'undefined') {\n        cb = alignBits;\n        alignBits = null;\n        mode = null;\n      } else if (typeof mode === 'function' && typeof cb === 'undefined') {\n        cb = mode;\n        mode = null;\n      }\n\n      alignBits = alignBits || this.constructor.HORIZONTAL_ALIGN_CENTER | this.constructor.VERTICAL_ALIGN_MIDDLE;\n      var hbits = alignBits & (1 << 3) - 1;\n      var vbits = alignBits >> 3; // check if more flags than one is in the bit sets\n\n      if (!(hbits !== 0 && !(hbits & hbits - 1) || vbits !== 0 && !(vbits & vbits - 1))) return _utils.throwError.call(this, 'only use one flag per alignment direction', cb);\n      var alignH = hbits >> 1; // 0, 1, 2\n\n      var alignV = vbits >> 1; // 0, 1, 2\n\n      var f = w / h > this.bitmap.width / this.bitmap.height ? w / this.bitmap.width : h / this.bitmap.height;\n      this.scale(f, mode);\n      this.crop((this.bitmap.width - w) / 2 * alignH, (this.bitmap.height - h) / 2 * alignV, w, h);\n\n      if ((0, _utils.isNodePattern)(cb)) {\n        cb.call(this, null, this);\n      }\n\n      return this;\n    }\n  };\n};\n\nexports[\"default\"] = _default;","map":{"version":3,"sources":["../src/index.js"],"names":["cover","throwError","alignBits","cb","mode","hbits","vbits","alignH","alignV","f","w","h"],"mappings":";;;;;;;AAAA,IAAA,MAAA,GAAA,OAAA,CAAA,aAAA,CAAA;AAEA;;;;;;;;;;;eASe,SAAA,QAAA,GAAA;AAAA,SAAO;AACpBA,IAAAA,KADoB,EAAA,SAAA,KAAA,CAAA,CAAA,EAAA,CAAA,EAAA,SAAA,EAAA,IAAA,EAAA,EAAA,EACa;AAC/B,UAAI,OAAA,CAAA,KAAA,QAAA,IAAyB,OAAA,CAAA,KAA7B,QAAA,EAAoD;AAClD,eAAOC,MAAAA,CAAAA,UAAAA,CAAAA,IAAAA,CAAAA,IAAAA,EAAAA,yBAAAA,EAAP,EAAOA,CAAP;AACD;;AAED,UACEC,SAAS,IACT,OAAA,SAAA,KADAA,UAAAA,IAEA,OAAA,EAAA,KAHF,WAAA,EAIE;AACAC,QAAAA,EAAE,GAAFA,SAAAA;AACAD,QAAAA,SAAS,GAATA,IAAAA;AACAE,QAAAA,IAAI,GAAJA,IAAAA;AAPF,OAAA,MAQO,IAAI,OAAA,IAAA,KAAA,UAAA,IAA8B,OAAA,EAAA,KAAlC,WAAA,EAA6D;AAClED,QAAAA,EAAE,GAAFA,IAAAA;AACAC,QAAAA,IAAI,GAAJA,IAAAA;AACD;;AAEDF,MAAAA,SAAS,GACPA,SAAS,IACT,KAAA,WAAA,CAAA,uBAAA,GACE,KAAA,WAAA,CAHJA,qBAAAA;AAIA,UAAMG,KAAK,GAAGH,SAAS,GAAI,CAAC,KAAD,CAAA,IAA3B,CAAA;AACA,UAAMI,KAAK,GAAGJ,SAAS,IAvBQ,CAuB/B,CAvB+B,CAyB/B;;AACA,UACE,EACGG,KAAK,KAALA,CAAAA,IAAe,EAAEA,KAAK,GAAIA,KAAK,GAAhC,CAAgB,CAAfA,IACAC,KAAK,KAALA,CAAAA,IAAe,EAAEA,KAAK,GAAIA,KAAK,GAHpC,CAGoB,CAFlB,CADF,EAME,OAAOL,MAAAA,CAAAA,UAAAA,CAAAA,IAAAA,CAAAA,IAAAA,EAAAA,2CAAAA,EAAP,EAAOA,CAAP;AAMF,UAAMM,MAAM,GAAGF,KAAK,IAtCW,CAsC/B,CAtC+B,CAsCJ;;AAC3B,UAAMG,MAAM,GAAGF,KAAK,IAvCW,CAuC/B,CAvC+B,CAuCJ;;AAE3B,UAAMG,CAAC,GACLC,CAAC,GAADA,CAAAA,GAAQ,KAAA,MAAA,CAAA,KAAA,GAAoB,KAAA,MAAA,CAA5BA,MAAAA,GACIA,CAAC,GAAG,KAAA,MAAA,CADRA,KAAAA,GAEIC,CAAC,GAAG,KAAA,MAAA,CAHV,MAAA;AAIA,WAAA,KAAA,CAAA,CAAA,EAAA,IAAA;AACA,WAAA,IAAA,CACG,CAAC,KAAA,MAAA,CAAA,KAAA,GAAD,CAAA,IAAD,CAAC,GADH,MAAA,EAEG,CAAC,KAAA,MAAA,CAAA,MAAA,GAAD,CAAA,IAAD,CAAC,GAFH,MAAA,EAAA,CAAA,EAAA,CAAA;;AAOA,UAAI,CAAA,GAAA,MAAA,CAAA,aAAA,EAAJ,EAAI,CAAJ,EAAuB;AACrBR,QAAAA,EAAE,CAAFA,IAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAAAA,IAAAA;AACD;;AAED,aAAA,IAAA;AACD;AA3DmB,GAAP","sourcesContent":["import { isNodePattern, throwError } from '@jimp/utils';\n\n/**\n * Scale the image so the given width and height keeping the aspect ratio. Some parts of the image may be clipped.\n * @param {number} w the width to resize the image to\n * @param {number} h the height to resize the image to\n * @param {number} alignBits (optional) A bitmask for horizontal and vertical alignment\n * @param {string} mode (optional) a scaling method (e.g. Jimp.RESIZE_BEZIER)\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  cover(w, h, alignBits, mode, cb) {\n    if (typeof w !== 'number' || typeof h !== 'number') {\n      return throwError.call(this, 'w and h must be numbers', cb);\n    }\n\n    if (\n      alignBits &&\n      typeof alignBits === 'function' &&\n      typeof cb === 'undefined'\n    ) {\n      cb = alignBits;\n      alignBits = null;\n      mode = null;\n    } else if (typeof mode === 'function' && typeof cb === 'undefined') {\n      cb = mode;\n      mode = null;\n    }\n\n    alignBits =\n      alignBits ||\n      this.constructor.HORIZONTAL_ALIGN_CENTER |\n        this.constructor.VERTICAL_ALIGN_MIDDLE;\n    const hbits = alignBits & ((1 << 3) - 1);\n    const vbits = alignBits >> 3;\n\n    // check if more flags than one is in the bit sets\n    if (\n      !(\n        (hbits !== 0 && !(hbits & (hbits - 1))) ||\n        (vbits !== 0 && !(vbits & (vbits - 1)))\n      )\n    )\n      return throwError.call(\n        this,\n        'only use one flag per alignment direction',\n        cb\n      );\n\n    const alignH = hbits >> 1; // 0, 1, 2\n    const alignV = vbits >> 1; // 0, 1, 2\n\n    const f =\n      w / h > this.bitmap.width / this.bitmap.height\n        ? w / this.bitmap.width\n        : h / this.bitmap.height;\n    this.scale(f, mode);\n    this.crop(\n      ((this.bitmap.width - w) / 2) * alignH,\n      ((this.bitmap.height - h) / 2) * alignV,\n      w,\n      h\n    );\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n"]},"metadata":{},"sourceType":"script"}