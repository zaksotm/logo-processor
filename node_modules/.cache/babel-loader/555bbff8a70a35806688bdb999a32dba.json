{"ast":null,"code":"function parseNumber(s) {\n  return parseInt(s, 10);\n} //in seconds\n\n\nvar hours = 3600;\nvar minutes = 60; //take date (year, month, day) and time (hour, minutes, seconds) digits in UTC\n//and return a timestamp in seconds\n\nfunction parseDateTimeParts(dateParts, timeParts) {\n  dateParts = dateParts.map(parseNumber);\n  timeParts = timeParts.map(parseNumber);\n  var year = dateParts[0];\n  var month = dateParts[1] - 1;\n  var day = dateParts[2];\n  var hours = timeParts[0];\n  var minutes = timeParts[1];\n  var seconds = timeParts[2];\n  var date = Date.UTC(year, month, day, hours, minutes, seconds, 0);\n  var timestamp = date / 1000;\n  return timestamp;\n} //parse date with \"2004-09-04T23:39:06-08:00\" format,\n//one of the formats supported by ISO 8601, and\n//convert to utc timestamp in seconds\n\n\nfunction parseDateWithTimezoneFormat(dateTimeStr) {\n  var dateParts = dateTimeStr.substr(0, 10).split('-');\n  var timeParts = dateTimeStr.substr(11, 8).split(':');\n  var timezoneStr = dateTimeStr.substr(19, 6);\n  var timezoneParts = timezoneStr.split(':').map(parseNumber);\n  var timezoneOffset = timezoneParts[0] * hours + timezoneParts[1] * minutes;\n  var timestamp = parseDateTimeParts(dateParts, timeParts); //minus because the timezoneOffset describes\n  //how much the described time is ahead of UTC\n\n  timestamp -= timezoneOffset;\n\n  if (typeof timestamp === 'number' && !isNaN(timestamp)) {\n    return timestamp;\n  }\n} //parse date with \"YYYY:MM:DD hh:mm:ss\" format, convert to utc timestamp in seconds\n\n\nfunction parseDateWithSpecFormat(dateTimeStr) {\n  var parts = dateTimeStr.split(' '),\n      dateParts = parts[0].split(':'),\n      timeParts = parts[1].split(':');\n  var timestamp = parseDateTimeParts(dateParts, timeParts);\n\n  if (typeof timestamp === 'number' && !isNaN(timestamp)) {\n    return timestamp;\n  }\n}\n\nfunction parseExifDate(dateTimeStr) {\n  //some easy checks to determine two common date formats\n  //is the date in the standard \"YYYY:MM:DD hh:mm:ss\" format?\n  var isSpecFormat = dateTimeStr.length === 19 && dateTimeStr.charAt(4) === ':'; //is the date in the non-standard format,\n  //\"2004-09-04T23:39:06-08:00\" to include a timezone?\n\n  var isTimezoneFormat = dateTimeStr.length === 25 && dateTimeStr.charAt(10) === 'T';\n  var timestamp;\n\n  if (isTimezoneFormat) {\n    return parseDateWithTimezoneFormat(dateTimeStr);\n  } else if (isSpecFormat) {\n    return parseDateWithSpecFormat(dateTimeStr);\n  }\n}\n\nmodule.exports = {\n  parseDateWithSpecFormat: parseDateWithSpecFormat,\n  parseDateWithTimezoneFormat: parseDateWithTimezoneFormat,\n  parseExifDate: parseExifDate\n};","map":{"version":3,"sources":["/Users/zakstratton/Documents/logo-processor/node_modules/exif-parser/lib/date.js"],"names":["parseNumber","s","parseInt","hours","minutes","parseDateTimeParts","dateParts","timeParts","map","year","month","day","seconds","date","Date","UTC","timestamp","parseDateWithTimezoneFormat","dateTimeStr","substr","split","timezoneStr","timezoneParts","timezoneOffset","isNaN","parseDateWithSpecFormat","parts","parseExifDate","isSpecFormat","length","charAt","isTimezoneFormat","module","exports"],"mappings":"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","sourcesContent":["function parseNumber(s) {\n\treturn parseInt(s, 10);\n}\n\n//in seconds\nvar hours = 3600;\nvar minutes = 60;\n\n//take date (year, month, day) and time (hour, minutes, seconds) digits in UTC\n//and return a timestamp in seconds\nfunction parseDateTimeParts(dateParts, timeParts) {\n\tdateParts = dateParts.map(parseNumber);\n\ttimeParts = timeParts.map(parseNumber);\n\tvar year = dateParts[0];\n\tvar month = dateParts[1] - 1;\n\tvar day = dateParts[2];\n\tvar hours = timeParts[0];\n\tvar minutes = timeParts[1];\n\tvar seconds = timeParts[2];\n\tvar date = Date.UTC(year, month, day, hours, minutes, seconds, 0);\n\tvar timestamp = date / 1000;\n\treturn timestamp;\n}\n\n//parse date with \"2004-09-04T23:39:06-08:00\" format,\n//one of the formats supported by ISO 8601, and\n//convert to utc timestamp in seconds\nfunction parseDateWithTimezoneFormat(dateTimeStr) {\n\n\tvar dateParts = dateTimeStr.substr(0, 10).split('-');\n\tvar timeParts = dateTimeStr.substr(11, 8).split(':');\n\tvar timezoneStr = dateTimeStr.substr(19, 6);\n\tvar timezoneParts = timezoneStr.split(':').map(parseNumber);\n\tvar timezoneOffset = (timezoneParts[0] * hours) +\n\t\t(timezoneParts[1] * minutes);\n\n\tvar timestamp = parseDateTimeParts(dateParts, timeParts);\n\t//minus because the timezoneOffset describes\n\t//how much the described time is ahead of UTC\n\ttimestamp -= timezoneOffset;\n\n\tif(typeof timestamp === 'number' && !isNaN(timestamp)) {\n\t\treturn timestamp;\n\t}\n}\n\n//parse date with \"YYYY:MM:DD hh:mm:ss\" format, convert to utc timestamp in seconds\nfunction parseDateWithSpecFormat(dateTimeStr) {\n\tvar parts = dateTimeStr.split(' '),\n\t\tdateParts = parts[0].split(':'),\n\t\ttimeParts = parts[1].split(':');\n\n\tvar timestamp = parseDateTimeParts(dateParts, timeParts);\n\n\tif(typeof timestamp === 'number' && !isNaN(timestamp)) {\n\t\treturn timestamp;\n\t}\n}\n\nfunction parseExifDate(dateTimeStr) {\n\t//some easy checks to determine two common date formats\n\n\t//is the date in the standard \"YYYY:MM:DD hh:mm:ss\" format?\n\tvar isSpecFormat = dateTimeStr.length === 19 &&\n\t\tdateTimeStr.charAt(4) === ':';\n\t//is the date in the non-standard format,\n\t//\"2004-09-04T23:39:06-08:00\" to include a timezone?\n\tvar isTimezoneFormat = dateTimeStr.length === 25 &&\n\t\tdateTimeStr.charAt(10) === 'T';\n\tvar timestamp;\n\n\tif(isTimezoneFormat) {\n\t\treturn parseDateWithTimezoneFormat(dateTimeStr);\n\t}\n\telse if(isSpecFormat) {\n\t\treturn parseDateWithSpecFormat(dateTimeStr);\n\t}\n}\n\nmodule.exports = {\n\tparseDateWithSpecFormat: parseDateWithSpecFormat,\n\tparseDateWithTimezoneFormat: parseDateWithTimezoneFormat,\n\tparseExifDate: parseExifDate\n};\n"]},"metadata":{},"sourceType":"script"}