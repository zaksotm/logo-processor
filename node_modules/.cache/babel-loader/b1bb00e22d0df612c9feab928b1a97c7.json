{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isNodePattern = isNodePattern;\nexports.throwError = throwError;\nexports.scan = scan;\nexports.scanIterator = scanIterator;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _marked =\n/*#__PURE__*/\n_regenerator[\"default\"].mark(scanIterator);\n\nfunction isNodePattern(cb) {\n  if (typeof cb === 'undefined') {\n    return false;\n  }\n\n  if (typeof cb !== 'function') {\n    throw new TypeError('Callback must be a function');\n  }\n\n  return true;\n}\n\nfunction throwError(error, cb) {\n  if (typeof error === 'string') {\n    error = new Error(error);\n  }\n\n  if (typeof cb === 'function') {\n    return cb.call(this, error);\n  }\n\n  throw error;\n}\n\nfunction scan(image, x, y, w, h, f) {\n  // round input\n  x = Math.round(x);\n  y = Math.round(y);\n  w = Math.round(w);\n  h = Math.round(h);\n\n  for (var _y = y; _y < y + h; _y++) {\n    for (var _x = x; _x < x + w; _x++) {\n      var idx = image.bitmap.width * _y + _x << 2;\n      f.call(image, _x, _y, idx);\n    }\n  }\n\n  return image;\n}\n\nfunction scanIterator(image, x, y, w, h) {\n  var _y, _x, idx;\n\n  return _regenerator[\"default\"].wrap(function scanIterator$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          // round input\n          x = Math.round(x);\n          y = Math.round(y);\n          w = Math.round(w);\n          h = Math.round(h);\n          _y = y;\n\n        case 5:\n          if (!(_y < y + h)) {\n            _context.next = 17;\n            break;\n          }\n\n          _x = x;\n\n        case 7:\n          if (!(_x < x + w)) {\n            _context.next = 14;\n            break;\n          }\n\n          idx = image.bitmap.width * _y + _x << 2;\n          _context.next = 11;\n          return {\n            x: _x,\n            y: _y,\n            idx: idx,\n            image: image\n          };\n\n        case 11:\n          _x++;\n          _context.next = 7;\n          break;\n\n        case 14:\n          _y++;\n          _context.next = 5;\n          break;\n\n        case 17:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}","map":{"version":3,"sources":["../src/index.js"],"names":["error","cb","x","Math","y","w","h","_y","_x","idx","image","f","scanIterator"],"mappings":"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","sourcesContent":["export function isNodePattern(cb) {\n  if (typeof cb === 'undefined') {\n    return false;\n  }\n\n  if (typeof cb !== 'function') {\n    throw new TypeError('Callback must be a function');\n  }\n\n  return true;\n}\n\nexport function throwError(error, cb) {\n  if (typeof error === 'string') {\n    error = new Error(error);\n  }\n\n  if (typeof cb === 'function') {\n    return cb.call(this, error);\n  }\n\n  throw error;\n}\n\nexport function scan(image, x, y, w, h, f) {\n  // round input\n  x = Math.round(x);\n  y = Math.round(y);\n  w = Math.round(w);\n  h = Math.round(h);\n\n  for (let _y = y; _y < y + h; _y++) {\n    for (let _x = x; _x < x + w; _x++) {\n      const idx = (image.bitmap.width * _y + _x) << 2;\n      f.call(image, _x, _y, idx);\n    }\n  }\n\n  return image;\n}\n\nexport function* scanIterator(image, x, y, w, h) {\n  // round input\n  x = Math.round(x);\n  y = Math.round(y);\n  w = Math.round(w);\n  h = Math.round(h);\n\n  for (let _y = y; _y < y + h; _y++) {\n    for (let _x = x; _x < x + w; _x++) {\n      const idx = (image.bitmap.width * _y + _x) << 2;\n      yield { x: _x, y: _y, idx, image };\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}