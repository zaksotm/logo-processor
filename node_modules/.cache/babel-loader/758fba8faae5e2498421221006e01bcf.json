{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _bmpJs = _interopRequireDefault(require(\"bmp-js\"));\n\nvar _utils = require(\"@jimp/utils\");\n\nvar MIME_TYPE = 'image/bmp';\nvar MIME_TYPE_SECOND = 'image/x-ms-bmp';\n\nfunction toAGBR(image) {\n  return (0, _utils.scan)(image, 0, 0, image.bitmap.width, image.bitmap.height, function (x, y, index) {\n    var red = this.bitmap.data[index + 0];\n    var green = this.bitmap.data[index + 1];\n    var blue = this.bitmap.data[index + 2];\n    var alpha = this.bitmap.data[index + 3];\n    this.bitmap.data[index + 0] = alpha;\n    this.bitmap.data[index + 1] = blue;\n    this.bitmap.data[index + 2] = green;\n    this.bitmap.data[index + 3] = red;\n  }).bitmap;\n}\n\nfunction fromAGBR(bitmap) {\n  return (0, _utils.scan)({\n    bitmap: bitmap\n  }, 0, 0, bitmap.width, bitmap.height, function (x, y, index) {\n    var alpha = this.bitmap.data[index + 0];\n    var blue = this.bitmap.data[index + 1];\n    var green = this.bitmap.data[index + 2];\n    var red = this.bitmap.data[index + 3];\n    this.bitmap.data[index + 0] = red;\n    this.bitmap.data[index + 1] = green;\n    this.bitmap.data[index + 2] = blue;\n    this.bitmap.data[index + 3] = bitmap.is_with_alpha ? alpha : 0xff;\n  }).bitmap;\n}\n\nvar decode = function decode(data) {\n  return fromAGBR(_bmpJs[\"default\"].decode(data));\n};\n\nvar encode = function encode(image) {\n  return _bmpJs[\"default\"].encode(toAGBR(image)).data;\n};\n\nvar _default = function _default() {\n  var _decoders, _encoders;\n\n  return {\n    mime: (0, _defineProperty2[\"default\"])({}, MIME_TYPE, ['bmp']),\n    constants: {\n      MIME_BMP: MIME_TYPE,\n      MIME_X_MS_BMP: MIME_TYPE_SECOND\n    },\n    decoders: (_decoders = {}, (0, _defineProperty2[\"default\"])(_decoders, MIME_TYPE, decode), (0, _defineProperty2[\"default\"])(_decoders, MIME_TYPE_SECOND, decode), _decoders),\n    encoders: (_encoders = {}, (0, _defineProperty2[\"default\"])(_encoders, MIME_TYPE, encode), (0, _defineProperty2[\"default\"])(_encoders, MIME_TYPE_SECOND, encode), _encoders)\n  };\n};\n\nexports[\"default\"] = _default;","map":{"version":3,"sources":["../src/index.js"],"names":["MIME_TYPE","MIME_TYPE_SECOND","image","red","index","green","blue","alpha","bitmap","decode","fromAGBR","BMP","encode","toAGBR","mime","constants","MIME_BMP","MIME_X_MS_BMP","decoders","encoders"],"mappings":";;;;;;;;;;;AAAA,IAAA,MAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,QAAA,CAAA,CAAA;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AAEA,IAAMA,SAAS,GAAf,WAAA;AACA,IAAMC,gBAAgB,GAAtB,gBAAA;;AAEA,SAAA,MAAA,CAAA,KAAA,EAAuB;AACrB,SAAO,CAAA,GAAA,MAAA,CAAA,IAAA,EAAA,KAAA,EAAA,CAAA,EAAA,CAAA,EAAkBC,KAAK,CAALA,MAAAA,CAAlB,KAAA,EAAsCA,KAAK,CAALA,MAAAA,CAAtC,MAAA,EAA2D,UAAA,CAAA,EAAA,CAAA,EAAA,KAAA,EAIhE;AACA,QAAMC,GAAG,GAAG,KAAA,MAAA,CAAA,IAAA,CAAiBC,KAAK,GAAlC,CAAY,CAAZ;AACA,QAAMC,KAAK,GAAG,KAAA,MAAA,CAAA,IAAA,CAAiBD,KAAK,GAApC,CAAc,CAAd;AACA,QAAME,IAAI,GAAG,KAAA,MAAA,CAAA,IAAA,CAAiBF,KAAK,GAAnC,CAAa,CAAb;AACA,QAAMG,KAAK,GAAG,KAAA,MAAA,CAAA,IAAA,CAAiBH,KAAK,GAApC,CAAc,CAAd;AAEA,SAAA,MAAA,CAAA,IAAA,CAAiBA,KAAK,GAAtB,CAAA,IAAA,KAAA;AACA,SAAA,MAAA,CAAA,IAAA,CAAiBA,KAAK,GAAtB,CAAA,IAAA,IAAA;AACA,SAAA,MAAA,CAAA,IAAA,CAAiBA,KAAK,GAAtB,CAAA,IAAA,KAAA;AACA,SAAA,MAAA,CAAA,IAAA,CAAiBA,KAAK,GAAtB,CAAA,IAAA,GAAA;AAbK,GAAA,EAAP,MAAA;AAeD;;AAED,SAAA,QAAA,CAAA,MAAA,EAA0B;AACxB,SAAO,CAAA,GAAA,MAAA,CAAA,IAAA,EAAK;AAAEI,IAAAA,MAAM,EAANA;AAAF,GAAL,EAAA,CAAA,EAAA,CAAA,EAAuBA,MAAM,CAA7B,KAAA,EAAqCA,MAAM,CAA3C,MAAA,EAAoD,UAAA,CAAA,EAAA,CAAA,EAAA,KAAA,EAIzD;AACA,QAAMD,KAAK,GAAG,KAAA,MAAA,CAAA,IAAA,CAAiBH,KAAK,GAApC,CAAc,CAAd;AACA,QAAME,IAAI,GAAG,KAAA,MAAA,CAAA,IAAA,CAAiBF,KAAK,GAAnC,CAAa,CAAb;AACA,QAAMC,KAAK,GAAG,KAAA,MAAA,CAAA,IAAA,CAAiBD,KAAK,GAApC,CAAc,CAAd;AACA,QAAMD,GAAG,GAAG,KAAA,MAAA,CAAA,IAAA,CAAiBC,KAAK,GAAlC,CAAY,CAAZ;AAEA,SAAA,MAAA,CAAA,IAAA,CAAiBA,KAAK,GAAtB,CAAA,IAAA,GAAA;AACA,SAAA,MAAA,CAAA,IAAA,CAAiBA,KAAK,GAAtB,CAAA,IAAA,KAAA;AACA,SAAA,MAAA,CAAA,IAAA,CAAiBA,KAAK,GAAtB,CAAA,IAAA,IAAA;AACA,SAAA,MAAA,CAAA,IAAA,CAAiBA,KAAK,GAAtB,CAAA,IAA8BI,MAAM,CAANA,aAAAA,GAAAA,KAAAA,GAA9B,IAAA;AAbK,GAAA,EAAP,MAAA;AAeD;;AAED,IAAMC,MAAM,GAAG,SAATA,MAAS,CAAA,IAAA,EAAI;AAAA,SAAIC,QAAQ,CAACC,MAAAA,CAAAA,SAAAA,CAAAA,CAAAA,MAAAA,CAAb,IAAaA,CAAD,CAAZ;AAAnB,CAAA;;AACA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAAA,KAAA,EAAK;AAAA,SAAID,MAAAA,CAAAA,SAAAA,CAAAA,CAAAA,MAAAA,CAAWE,MAAM,CAAjBF,KAAiB,CAAjBA,EAAJ,IAAA;AAApB,CAAA;;eAEe,SAAA,QAAA,GAAA;AAAA,MAAA,SAAA,EAAA,SAAA;;AAAA,SAAO;AACpBG,IAAAA,IAAI,EAAA,CAAA,GAAA,gBAAA,CAAA,SAAA,CAAA,EAAA,EAAA,EAAA,SAAA,EAAiB,CADD,KACC,CAAjB,CADgB;AAGpBC,IAAAA,SAAS,EAAE;AACTC,MAAAA,QAAQ,EADC,SAAA;AAETC,MAAAA,aAAa,EAAEhB;AAFN,KAHS;AAQpBiB,IAAAA,QAAQ,GAAA,SAAA,GAAA,EAAA,EAAA,CAAA,GAAA,gBAAA,CAAA,SAAA,CAAA,EAAA,SAAA,EAAA,SAAA,EAAA,MAAA,CAAA,EAAA,CAAA,GAAA,gBAAA,CAAA,SAAA,CAAA,EAAA,SAAA,EAAA,gBAAA,EAAA,MAAA,CAAA,EARY,SAQZ,CARY;AAapBC,IAAAA,QAAQ,GAAA,SAAA,GAAA,EAAA,EAAA,CAAA,GAAA,gBAAA,CAAA,SAAA,CAAA,EAAA,SAAA,EAAA,SAAA,EAAA,MAAA,CAAA,EAAA,CAAA,GAAA,gBAAA,CAAA,SAAA,CAAA,EAAA,SAAA,EAAA,gBAAA,EAAA,MAAA,CAAA,EAAA,SAAA;AAbY,GAAP","sourcesContent":["import BMP from 'bmp-js';\nimport { scan } from '@jimp/utils';\n\nconst MIME_TYPE = 'image/bmp';\nconst MIME_TYPE_SECOND = 'image/x-ms-bmp';\n\nfunction toAGBR(image) {\n  return scan(image, 0, 0, image.bitmap.width, image.bitmap.height, function(\n    x,\n    y,\n    index\n  ) {\n    const red = this.bitmap.data[index + 0];\n    const green = this.bitmap.data[index + 1];\n    const blue = this.bitmap.data[index + 2];\n    const alpha = this.bitmap.data[index + 3];\n\n    this.bitmap.data[index + 0] = alpha;\n    this.bitmap.data[index + 1] = blue;\n    this.bitmap.data[index + 2] = green;\n    this.bitmap.data[index + 3] = red;\n  }).bitmap;\n}\n\nfunction fromAGBR(bitmap) {\n  return scan({ bitmap }, 0, 0, bitmap.width, bitmap.height, function(\n    x,\n    y,\n    index\n  ) {\n    const alpha = this.bitmap.data[index + 0];\n    const blue = this.bitmap.data[index + 1];\n    const green = this.bitmap.data[index + 2];\n    const red = this.bitmap.data[index + 3];\n\n    this.bitmap.data[index + 0] = red;\n    this.bitmap.data[index + 1] = green;\n    this.bitmap.data[index + 2] = blue;\n    this.bitmap.data[index + 3] = bitmap.is_with_alpha ? alpha : 0xff;\n  }).bitmap;\n}\n\nconst decode = data => fromAGBR(BMP.decode(data));\nconst encode = image => BMP.encode(toAGBR(image)).data;\n\nexport default () => ({\n  mime: { [MIME_TYPE]: ['bmp'] },\n\n  constants: {\n    MIME_BMP: MIME_TYPE,\n    MIME_X_MS_BMP: MIME_TYPE_SECOND\n  },\n\n  decoders: {\n    [MIME_TYPE]: decode,\n    [MIME_TYPE_SECOND]: decode\n  },\n\n  encoders: {\n    [MIME_TYPE]: encode,\n    [MIME_TYPE_SECOND]: encode\n  }\n});\n"]},"metadata":{},"sourceType":"script"}