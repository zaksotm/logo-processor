{"ast":null,"code":"/*jslint browser: true, devel: true, bitwise: false, debug: true, eqeq: false, es5: true, evil: false, forin: false, newcap: false, nomen: true, plusplus: true, regexp: false, unparam: false, sloppy: true, stupid: false, sub: false, todo: true, vars: true, white: true */\nvar jpeg = require('./jpeg'),\n    exif = require('./exif'),\n    simplify = require('./simplify');\n\nfunction ExifResult(startMarker, tags, imageSize, thumbnailOffset, thumbnailLength, thumbnailType, app1Offset) {\n  this.startMarker = startMarker;\n  this.tags = tags;\n  this.imageSize = imageSize;\n  this.thumbnailOffset = thumbnailOffset;\n  this.thumbnailLength = thumbnailLength;\n  this.thumbnailType = thumbnailType;\n  this.app1Offset = app1Offset;\n}\n\nExifResult.prototype = {\n  hasThumbnail: function hasThumbnail(mime) {\n    if (!this.thumbnailOffset || !this.thumbnailLength) {\n      return false;\n    }\n\n    if (typeof mime !== 'string') {\n      return true;\n    }\n\n    if (mime.toLowerCase().trim() === 'image/jpeg') {\n      return this.thumbnailType === 6;\n    }\n\n    if (mime.toLowerCase().trim() === 'image/tiff') {\n      return this.thumbnailType === 1;\n    }\n\n    return false;\n  },\n  getThumbnailOffset: function getThumbnailOffset() {\n    return this.app1Offset + 6 + this.thumbnailOffset;\n  },\n  getThumbnailLength: function getThumbnailLength() {\n    return this.thumbnailLength;\n  },\n  getThumbnailBuffer: function getThumbnailBuffer() {\n    return this._getThumbnailStream().nextBuffer(this.thumbnailLength);\n  },\n  _getThumbnailStream: function _getThumbnailStream() {\n    return this.startMarker.openWithOffset(this.getThumbnailOffset());\n  },\n  getImageSize: function getImageSize() {\n    return this.imageSize;\n  },\n  getThumbnailSize: function getThumbnailSize() {\n    var stream = this._getThumbnailStream(),\n        size;\n\n    jpeg.parseSections(stream, function (sectionType, sectionStream) {\n      if (jpeg.getSectionName(sectionType).name === 'SOF') {\n        size = jpeg.getSizeFromSOFSection(sectionStream);\n      }\n    });\n    return size;\n  }\n};\n\nfunction Parser(stream) {\n  this.stream = stream;\n  this.flags = {\n    readBinaryTags: false,\n    resolveTagNames: true,\n    simplifyValues: true,\n    imageSize: true,\n    hidePointers: true,\n    returnTags: true\n  };\n}\n\nParser.prototype = {\n  enableBinaryFields: function enableBinaryFields(enable) {\n    this.flags.readBinaryTags = !!enable;\n    return this;\n  },\n  enablePointers: function enablePointers(enable) {\n    this.flags.hidePointers = !enable;\n    return this;\n  },\n  enableTagNames: function enableTagNames(enable) {\n    this.flags.resolveTagNames = !!enable;\n    return this;\n  },\n  enableImageSize: function enableImageSize(enable) {\n    this.flags.imageSize = !!enable;\n    return this;\n  },\n  enableReturnTags: function enableReturnTags(enable) {\n    this.flags.returnTags = !!enable;\n    return this;\n  },\n  enableSimpleValues: function enableSimpleValues(enable) {\n    this.flags.simplifyValues = !!enable;\n    return this;\n  },\n  parse: function parse() {\n    var start = this.stream.mark(),\n        stream = start.openWithOffset(0),\n        flags = this.flags,\n        tags,\n        imageSize,\n        thumbnailOffset,\n        thumbnailLength,\n        thumbnailType,\n        app1Offset,\n        tagNames,\n        getTagValue,\n        setTagValue;\n\n    if (flags.resolveTagNames) {\n      tagNames = require('./exif-tags');\n    }\n\n    if (flags.resolveTagNames) {\n      tags = {};\n\n      getTagValue = function getTagValue(t) {\n        return tags[t.name];\n      };\n\n      setTagValue = function setTagValue(t, value) {\n        tags[t.name] = value;\n      };\n    } else {\n      tags = [];\n\n      getTagValue = function getTagValue(t) {\n        var i;\n\n        for (i = 0; i < tags.length; ++i) {\n          if (tags[i].type === t.type && tags[i].section === t.section) {\n            return tags.value;\n          }\n        }\n      };\n\n      setTagValue = function setTagValue(t, value) {\n        var i;\n\n        for (i = 0; i < tags.length; ++i) {\n          if (tags[i].type === t.type && tags[i].section === t.section) {\n            tags.value = value;\n            return;\n          }\n        }\n      };\n    }\n\n    jpeg.parseSections(stream, function (sectionType, sectionStream) {\n      var validExifHeaders,\n          sectionOffset = sectionStream.offsetFrom(start);\n\n      if (sectionType === 0xE1) {\n        validExifHeaders = exif.parseTags(sectionStream, function (ifdSection, tagType, value, format) {\n          //ignore binary fields if disabled\n          if (!flags.readBinaryTags && format === 7) {\n            return;\n          }\n\n          if (tagType === 0x0201) {\n            thumbnailOffset = value[0];\n\n            if (flags.hidePointers) {\n              return;\n            }\n          } else if (tagType === 0x0202) {\n            thumbnailLength = value[0];\n\n            if (flags.hidePointers) {\n              return;\n            }\n          } else if (tagType === 0x0103) {\n            thumbnailType = value[0];\n\n            if (flags.hidePointers) {\n              return;\n            }\n          } //if flag is set to not store tags, return here after storing pointers\n\n\n          if (!flags.returnTags) {\n            return;\n          }\n\n          if (flags.simplifyValues) {\n            value = simplify.simplifyValue(value, format);\n          }\n\n          if (flags.resolveTagNames) {\n            var sectionTagNames = ifdSection === exif.GPSIFD ? tagNames.gps : tagNames.exif;\n            var name = sectionTagNames[tagType];\n\n            if (!name) {\n              name = tagNames.exif[tagType];\n            }\n\n            if (!tags.hasOwnProperty(name)) {\n              tags[name] = value;\n            }\n          } else {\n            tags.push({\n              section: ifdSection,\n              type: tagType,\n              value: value\n            });\n          }\n        });\n\n        if (validExifHeaders) {\n          app1Offset = sectionOffset;\n        }\n      } else if (flags.imageSize && jpeg.getSectionName(sectionType).name === 'SOF') {\n        imageSize = jpeg.getSizeFromSOFSection(sectionStream);\n      }\n    });\n\n    if (flags.simplifyValues) {\n      simplify.castDegreeValues(getTagValue, setTagValue);\n      simplify.castDateValues(getTagValue, setTagValue);\n    }\n\n    return new ExifResult(start, tags, imageSize, thumbnailOffset, thumbnailLength, thumbnailType, app1Offset);\n  }\n};\nmodule.exports = Parser;","map":{"version":3,"sources":["/Users/zakstratton/Documents/logo-processor/node_modules/exif-parser/lib/parser.js"],"names":["jpeg","require","exif","simplify","ExifResult","startMarker","tags","imageSize","thumbnailOffset","thumbnailLength","thumbnailType","app1Offset","prototype","hasThumbnail","mime","toLowerCase","trim","getThumbnailOffset","getThumbnailLength","getThumbnailBuffer","_getThumbnailStream","nextBuffer","openWithOffset","getImageSize","getThumbnailSize","stream","size","parseSections","sectionType","sectionStream","getSectionName","name","getSizeFromSOFSection","Parser","flags","readBinaryTags","resolveTagNames","simplifyValues","hidePointers","returnTags","enableBinaryFields","enable","enablePointers","enableTagNames","enableImageSize","enableReturnTags","enableSimpleValues","parse","start","mark","tagNames","getTagValue","setTagValue","t","value","i","length","type","section","validExifHeaders","sectionOffset","offsetFrom","parseTags","ifdSection","tagType","format","simplifyValue","sectionTagNames","GPSIFD","gps","hasOwnProperty","push","castDegreeValues","castDateValues","module","exports"],"mappings":"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","sourcesContent":["/*jslint browser: true, devel: true, bitwise: false, debug: true, eqeq: false, es5: true, evil: false, forin: false, newcap: false, nomen: true, plusplus: true, regexp: false, unparam: false, sloppy: true, stupid: false, sub: false, todo: true, vars: true, white: true */\n\nvar jpeg = require('./jpeg'),\n\texif = require('./exif'),\n\tsimplify = require('./simplify');\n\nfunction ExifResult(startMarker, tags, imageSize, thumbnailOffset, thumbnailLength, thumbnailType, app1Offset) {\n\tthis.startMarker = startMarker;\n\tthis.tags = tags;\n\tthis.imageSize = imageSize;\n\tthis.thumbnailOffset = thumbnailOffset;\n\tthis.thumbnailLength = thumbnailLength;\n\tthis.thumbnailType = thumbnailType;\n\tthis.app1Offset = app1Offset;\n}\n\nExifResult.prototype = {\n\thasThumbnail: function(mime) {\n\t\tif(!this.thumbnailOffset || !this.thumbnailLength) {\n\t\t\treturn false;\n\t\t}\n\t\tif(typeof mime !== 'string') {\n\t\t\treturn true;\n\t\t}\n\t\tif(mime.toLowerCase().trim() === 'image/jpeg') {\n\t\t\treturn this.thumbnailType === 6;\n\t\t}\n\t\tif(mime.toLowerCase().trim() === 'image/tiff') {\n\t\t\treturn this.thumbnailType === 1;\n\t\t}\n\t\treturn false;\n\t},\n\tgetThumbnailOffset: function() {\n\t\treturn this.app1Offset + 6 + this.thumbnailOffset;\n\t},\n\tgetThumbnailLength: function() {\n\t\treturn this.thumbnailLength;\n\t},\n\tgetThumbnailBuffer: function() {\n\t\treturn this._getThumbnailStream().nextBuffer(this.thumbnailLength);\n\t},\n\t_getThumbnailStream: function() {\n\t\treturn this.startMarker.openWithOffset(this.getThumbnailOffset());\n\t},\n\tgetImageSize: function() {\n\t\treturn this.imageSize;\n\t},\n\tgetThumbnailSize: function() {\n\t\tvar stream = this._getThumbnailStream(), size;\n\t\tjpeg.parseSections(stream, function(sectionType, sectionStream) {\n\t\t\tif(jpeg.getSectionName(sectionType).name === 'SOF') {\n\t\t\t\tsize = jpeg.getSizeFromSOFSection(sectionStream);\n\t\t\t}\n\t\t});\n\t\treturn size;\n\t}\n};\n\nfunction Parser(stream) {\n\tthis.stream = stream;\n\tthis.flags = {\n\t\treadBinaryTags: false,\n\t\tresolveTagNames: true,\n\t\tsimplifyValues: true,\n\t\timageSize: true,\n\t\thidePointers: true,\n\t\treturnTags: true\n\t};\n}\n\nParser.prototype = {\n\tenableBinaryFields: function(enable) {\n\t\tthis.flags.readBinaryTags = !!enable;\n\t\treturn this;\n\t},\n\tenablePointers: function(enable) {\n\t\tthis.flags.hidePointers = !enable;\n\t\treturn this;\n\t},\n\tenableTagNames: function(enable) {\n\t\tthis.flags.resolveTagNames = !!enable;\n\t\treturn this;\n\t},\n\tenableImageSize: function(enable) {\n\t\tthis.flags.imageSize = !!enable;\n\t\treturn this;\n\t},\n\tenableReturnTags: function(enable) {\n\t\tthis.flags.returnTags = !!enable;\n\t\treturn this;\n\t},\n\tenableSimpleValues: function(enable) {\n\t\tthis.flags.simplifyValues = !!enable;\n\t\treturn this;\n\t},\n\tparse: function() {\n\t\tvar start = this.stream.mark(),\n\t\t\tstream = start.openWithOffset(0),\n\t\t\tflags = this.flags,\n\t\t\ttags,\n\t\t\timageSize,\n\t\t\tthumbnailOffset,\n\t\t\tthumbnailLength,\n\t\t\tthumbnailType,\n\t\t\tapp1Offset,\n\t\t\ttagNames,\n\t\t\tgetTagValue, setTagValue;\n\t\tif(flags.resolveTagNames) {\n\t\t\ttagNames = require('./exif-tags');\n\t\t}\n\t\tif(flags.resolveTagNames) {\n\t\t\ttags = {};\n\t\t\tgetTagValue = function(t) {\n\t\t\t\treturn tags[t.name];\n\t\t\t};\n\t\t\tsetTagValue = function(t, value) {\n\t\t\t\ttags[t.name] = value;\n\t\t\t};\n\t\t} else {\n\t\t\ttags = [];\n\t\t\tgetTagValue = function(t) {\n\t\t\t\tvar i;\n\t\t\t\tfor(i = 0; i < tags.length; ++i) {\n\t\t\t\t\tif(tags[i].type === t.type && tags[i].section === t.section) {\n\t\t\t\t\t\treturn tags.value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\tsetTagValue = function(t, value) {\n\t\t\t\tvar i;\n\t\t\t\tfor(i = 0; i < tags.length; ++i) {\n\t\t\t\t\tif(tags[i].type === t.type && tags[i].section === t.section) {\n\t\t\t\t\t\ttags.value = value;\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tjpeg.parseSections(stream, function(sectionType, sectionStream) {\n\t\t\tvar validExifHeaders, sectionOffset = sectionStream.offsetFrom(start);\n\t\t\tif(sectionType === 0xE1) {\n\t\t\t\tvalidExifHeaders = exif.parseTags(sectionStream, function(ifdSection, tagType, value, format) {\n\t\t\t\t\t//ignore binary fields if disabled\n\t\t\t\t\tif(!flags.readBinaryTags && format === 7) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif(tagType === 0x0201) {\n\t\t\t\t\t\tthumbnailOffset = value[0];\n\t\t\t\t\t\tif(flags.hidePointers) {return;}\n\t\t\t\t\t} else if(tagType === 0x0202) {\n\t\t\t\t\t\tthumbnailLength = value[0];\n\t\t\t\t\t\tif(flags.hidePointers) {return;}\n\t\t\t\t\t} else if(tagType === 0x0103) {\n\t\t\t\t\t\tthumbnailType = value[0];\n\t\t\t\t\t\tif(flags.hidePointers) {return;}\n\t\t\t\t\t}\n\t\t\t\t\t//if flag is set to not store tags, return here after storing pointers\n\t\t\t\t\tif(!flags.returnTags) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif(flags.simplifyValues) {\n\t\t\t\t\t\tvalue = simplify.simplifyValue(value, format);\n\t\t\t\t\t}\n\t\t\t\t\tif(flags.resolveTagNames) {\n\t\t\t\t\t\tvar sectionTagNames = ifdSection === exif.GPSIFD ? tagNames.gps : tagNames.exif;\n\t\t\t\t\t\tvar name = sectionTagNames[tagType];\n\t\t\t\t\t\tif(!name) {\n\t\t\t\t\t\t\tname = tagNames.exif[tagType];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!tags.hasOwnProperty(name)) {\n\t\t\t\t\t\t\ttags[name] = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttags.push({\n\t\t\t\t\t\t\tsection: ifdSection,\n\t\t\t\t\t\t\ttype: tagType,\n\t\t\t\t\t\t\tvalue: value\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tif(validExifHeaders) {\n\t\t\t\t\tapp1Offset = sectionOffset;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(flags.imageSize && jpeg.getSectionName(sectionType).name === 'SOF') {\n\t\t\t\timageSize = jpeg.getSizeFromSOFSection(sectionStream);\n\t\t\t}\n\t\t});\n\n\t\tif(flags.simplifyValues) {\n\t\t\tsimplify.castDegreeValues(getTagValue, setTagValue);\n\t\t\tsimplify.castDateValues(getTagValue, setTagValue);\n\t\t}\n\n\t\treturn new ExifResult(start, tags, imageSize, thumbnailOffset, thumbnailLength, thumbnailType, app1Offset);\n\t}\n};\n\n\n\nmodule.exports = Parser;\n"]},"metadata":{},"sourceType":"script"}