{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _utils = require(\"@jimp/utils\");\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\n\n\nvar _default = function _default() {\n  return {\n    invert: function invert(cb) {\n      this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function (x, y, idx) {\n        this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n        this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n        this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n      });\n\n      if ((0, _utils.isNodePattern)(cb)) {\n        cb.call(this, null, this);\n      }\n\n      return this;\n    }\n  };\n};\n\nexports[\"default\"] = _default;","map":{"version":3,"sources":["../src/index.js"],"names":["invert","idx","cb"],"mappings":";;;;;;;AAAA,IAAA,MAAA,GAAA,OAAA,CAAA,aAAA,CAAA;AAEA;;;;;;;eAKe,SAAA,QAAA,GAAA;AAAA,SAAO;AACpBA,IAAAA,MADoB,EAAA,SAAA,MAAA,CAAA,EAAA,EACT;AACT,WAAA,SAAA,CAAA,CAAA,EAAA,CAAA,EAAqB,KAAA,MAAA,CAArB,KAAA,EAAwC,KAAA,MAAA,CAAxC,MAAA,EAA4D,UAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAI1D;AACA,aAAA,MAAA,CAAA,IAAA,CAAA,GAAA,IAAwB,MAAM,KAAA,MAAA,CAAA,IAAA,CAA9B,GAA8B,CAA9B;AACA,aAAA,MAAA,CAAA,IAAA,CAAiBC,GAAG,GAApB,CAAA,IAA4B,MAAM,KAAA,MAAA,CAAA,IAAA,CAAiBA,GAAG,GAAtD,CAAkC,CAAlC;AACA,aAAA,MAAA,CAAA,IAAA,CAAiBA,GAAG,GAApB,CAAA,IAA4B,MAAM,KAAA,MAAA,CAAA,IAAA,CAAiBA,GAAG,GAAtD,CAAkC,CAAlC;AAPF,OAAA;;AAUA,UAAI,CAAA,GAAA,MAAA,CAAA,aAAA,EAAJ,EAAI,CAAJ,EAAuB;AACrBC,QAAAA,EAAE,CAAFA,IAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAAAA,IAAAA;AACD;;AAED,aAAA,IAAA;AACD;AAjBmB,GAAP","sourcesContent":["import { isNodePattern } from '@jimp/utils';\n\n/**\n * Inverts the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  invert(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] = 255 - this.bitmap.data[idx];\n      this.bitmap.data[idx + 1] = 255 - this.bitmap.data[idx + 1];\n      this.bitmap.data[idx + 2] = 255 - this.bitmap.data[idx + 2];\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n"]},"metadata":{},"sourceType":"script"}