{"ast":null,"code":"var _jsxFileName = \"/Users/zakstratton/Documents/logo-processor/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.css'; //import './style/_buttons.scss';\n\nimport ImageUploader from 'react-images-upload';\nimport Jimp from 'jimp/es';\n\nvar jimp = require('jimp'); //Three global color data structures, one a map of objects, one an array,\n//and one a 2D array\n//TODO: Downscale to remove map of objects, unneeded\n\n\nvar colors = {\n  black: '#000000',\n  onyx: '#333538',\n  charcoal: '#5f6468',\n  concrete: '#97a0a7',\n  quicksilver: '#e4e5e6',\n  bleach: '#ffffff',\n  rich_brown: '#372820',\n  mushroom: '#716257',\n  sand: '#bab3a0',\n  natural: '#f9f4ec',\n  navy: '#081e2c',\n  ultramarine: '#29217d',\n  lagoon: '#003e66',\n  cerulean: '#0169ca',\n  cornflower: '#529afc',\n  cyan: '#009ff1',\n  peacock: '#01aec9',\n  aruba: '#9dfbe7',\n  lake: '#6ac4dd',\n  seafoam: '#4ca696',\n  reef: '#00947d',\n  teal: '#007171',\n  pine: '#2b4423',\n  kelly: '#21772f',\n  jade: '#14b25a',\n  turf: '#60933b',\n  lime: '#a0ce3e',\n  goldenrod: '#d5d03a',\n  yellow: '#fff71b',\n  sunflower: '#ffc938',\n  carmel: '#d8a15e',\n  clementine: '#ff9a23',\n  living_coral: '#fb686d',\n  persimmon: '#fd5130',\n  red_orange: '#db1d3c',\n  red: '#c50f2d',\n  burnt_orange: '#a84c28',\n  rust: '#763742',\n  maroon: '#581c32',\n  deep_pink: '#c40876',\n  hibiscus: '#de4b9b',\n  blush: '#fdaeca',\n  peach: '#f7bfab',\n  lavender: '#a08dd6',\n  iris: '#77479f',\n  purple: '#5d1e5c',\n  royal_purple: '#401e72',\n  moose: '#653c2c',\n  violet: '#6753b2',\n  green_apple: '#76c727',\n  carrot: '#fd673e',\n  lapis: '#3c2f8f',\n  parrot: '#2fd078',\n  french_blue: '#638ee4'\n}; //TODO: Move initialization of arrays to seperate function\n\nvar colorsFreq = new Array(54);\nvar colorsArray = new Array(54); //Initialize colorsArray\n//load only hex values of colors into an array\n\nfor (var i = 0; i < colorsArray.length; i++) {\n  colorsArray[i] = Object.values(colors)[i];\n} //make colorsFreq into a 2D array\n\n\nfor (var i = 0; i < colorsFreq.length; i++) {\n  colorsFreq[i] = new Array(2);\n} //Initialize colorsFreq\n//copy array into new 2d array, starting with 0 for all frequencies\n\n\nfor (var i = 0; i < colorsFreq.length; i++) {\n  colorsFreq[i][0] = colorsArray[i];\n  colorsFreq[i][1] = 0;\n}\n\nvar nearestColor = require('nearest-color').from(colors); //initialize the default image\n\n\nconst src = require(\"./test2.jpg\"); //janky way around CORS policy for getting from dropbox link, pass through cors-anywhere server\n//var dropboxURL = \"0\"\n//var imgFinal = (\"https://cors-anywhere.herokuapp.com/\" + dropboxURL.slice(0, -1) + \"1\");\n//-------------------------------------------------------------\n//Main classes for displaying the output image array\n//-------------------------------------------------------------\n\n\nclass DisplayLogoImg extends React.Component {\n  render() {\n    if (this.state.output[0] !== undefined) return React.createElement(\"div\", {\n      className: \"workDisplay\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"gallery\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \"Source\", React.createElement(\"img\", {\n      className: \"workImage\",\n      src: this.props.output[0],\n      alt: \"Source\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"gallery\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \"Results\", React.createElement(\"img\", {\n      className: \"workImage\",\n      src: this.props.output[1],\n      alt: \"Result #1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      className: \"workImage\",\n      src: this.props.output[2],\n      alt: \"Result #2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    })));\n  }\n\n} //-------------------------------------------------------------\n//Custom classes for each button, passes state up\n//TODO:   Merge all of one type into a single class? [buttons, forms, etc]\n//        Transfer classes into seperate file and import it\n//-------------------------------------------------------------\n\n\nclass Linkform extends React.Component {\n  render() {\n    return React.createElement(\"form\", {\n      className: \"myForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, \"Dropbox Link:\", React.createElement(\"input\", {\n      type: \"text\",\n      onChange: this.props.onChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    })));\n  }\n\n}\n\nclass ScaleForm extends React.Component {\n  render() {\n    return React.createElement(\"form\", {\n      className: \"myForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, \"Resize X:\", React.createElement(\"input\", {\n      type: \"number\",\n      onChange: this.props.onChangeX,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    })), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, \"Resize Y:\", React.createElement(\"input\", {\n      type: \"number\",\n      onChange: this.props.onChangeY,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    })));\n  }\n\n} //TODO: Change hardcoded max images to variable\n\n\nclass ProcessButton extends React.Component {\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"myButton\",\n      onClick: () => this.props.onClick(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, \"Process Logo\"), \"Loaded \", this.props.imagesLoaded, \"/14 images\");\n  }\n\n}\n\nclass SubmitButton extends React.Component {\n  render() {\n    return React.createElement(\"button\", {\n      className: \"myButton\",\n      onClick: () => this.props.onClick(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }, \"Submit Link\");\n  }\n\n}\n\nclass DownloadButton extends React.Component {\n  render() {\n    return React.createElement(\"button\", {\n      onClick: () => this.props.onClick(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }, \"Download BMP\");\n  }\n\n}\n\nclass ConvertButton extends React.Component {\n  render() {\n    return React.createElement(\"button\", {\n      onClick: () => this.props.onClick(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, \"Debug v2\");\n  }\n\n} //-------------------------------------------------------------\n//Main editor app class, contains most info in state\n//-------------------------------------------------------------\n\n\nclass Editor extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleProcessButtonClick = () => {\n      //Format: posterize[bool], posterize value, scale[bool], scaleX, scaleY, greyscale[bool], numColors\n      //TODO: format better, into a function or something\n      //      these function calls end up being \"jumbled\", i think due to the async setState,\n      //      so it is difficult to know which is what output in the array\n      //Scale : Color Correction\n      this.jimpLogoCreation(this.state.output[0], false, 0, true, this.state.scaleX, this.state.scaleY); //Scale : Greyscale : Color Correction\n\n      this.jimpLogoCreation(this.state.output[0], false, 0, true, this.state.scaleX, this.state.scaleY, true); //Scale : Posterize : Color Correction\n\n      this.jimpLogoCreation(this.state.output[0], true, 7, true, this.state.scaleX, this.state.scaleY);\n      this.jimpLogoCreation(this.state.output[0], true, 5, true, this.state.scaleX, this.state.scaleY);\n      this.jimpLogoCreation(this.state.output[0], true, 3, true, this.state.scaleX, this.state.scaleY);\n      this.jimpLogoCreation(this.state.output[0], true, 2, true, this.state.scaleX, this.state.scaleY); //Scale : Color Correction (Reduction)\n\n      this.jimpLogoCreation(this.state.output[0], false, 0, true, this.state.scaleX, this.state.scaleY, false, 5);\n      this.jimpLogoCreation(this.state.output[0], false, 0, true, this.state.scaleX, this.state.scaleY, false, 4);\n      this.jimpLogoCreation(this.state.output[0], false, 0, true, this.state.scaleX, this.state.scaleY, false, 3);\n      this.jimpLogoCreation(this.state.output[0], false, 0, true, this.state.scaleX, this.state.scaleY, false, 2); //Scale : Posterize : Color Correction (Reduction)\n\n      this.jimpLogoCreation(this.state.output[0], true, 7, true, this.state.scaleX, this.state.scaleY, false, 5);\n      this.jimpLogoCreation(this.state.output[0], true, 5, true, this.state.scaleX, this.state.scaleY, false, 4);\n      this.jimpLogoCreation(this.state.output[0], true, 3, true, this.state.scaleX, this.state.scaleY, false, 3);\n      this.jimpLogoCreation(this.state.output[0], true, 2, true, this.state.scaleX, this.state.scaleY, false, 2);\n    };\n\n    this.handleConvertButtonClick = i => {\n      //NOTE - THIS RETURNS THE VALUE, NO NEED FOR .VALUE\n      console.log(colorsArray);\n      console.log(colorsFreq);\n    };\n\n    this.handleSubmitButtonClick = i => {\n      console.log(\"Submit Button Clicked\");\n      this.setState({\n        output: [this.state.dropboxLink]\n      });\n    };\n\n    this.handleDownloadButtonClick = i => {\n      console.log(\"Download Button Clicked\");\n    };\n\n    this.handleLinkChange = i => {\n      this.setState({\n        dropboxLink: \"https://cors-anywhere.herokuapp.com/\" + i.target.value.slice(0, -1) + \"1\"\n      });\n    };\n\n    this.state = {\n      //value that holds the path to default image, then the base64 data of render\n      //base64 used by Jimp, since it is a web-based app. Local files caused issues.\n      picture: src,\n      //Array of output pictures\n      output: [],\n      dropboxLink: \"\",\n      scaleX: 150,\n      scaleY: 150,\n      imagesLoaded: 0\n    };\n    this.myRef = React.createRef(); //TODO: Bind these functions in their declaration, similar to handleX functions\n\n    this.onDrop = this.onDrop.bind(this);\n    this.jimpScale = this.jimpScale.bind(this);\n    this.jimpResize = this.jimpResize.bind(this);\n    this.jimpTest = this.jimpTest.bind(this);\n    this.onScaleFormChangeX = this.onScaleFormChangeX.bind(this);\n    this.onScaleFormChangeY = this.onScaleFormChangeY.bind(this);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.output !== this.state.output) {\n      console.log(\"output state has changed: \" + this.state.output[0]);\n    }\n  } //-------------------------------------------------------------\n  //Functions to handle events when different buttons are clicked\n  //or values are changed\n  //-------------------------------------------------------------\n\n\n  //picture is an array passed from image uploader\n  //pull most recently uploaded picture from current session\n  //TODO: reformat these functions into handleDrop and handleLinkChange\n  onDrop(picture) {\n    //TODO: Insert function calls directly here to auto work on image\n    var localImg = URL.createObjectURL(picture[picture.length - 1]); //Set state for display\n\n    this.setState({\n      output: [URL.createObjectURL(picture[picture.length - 1])]\n    });\n  }\n\n  onScaleFormChangeX(event) {\n    //form takes in a string, need to parse into an Int for use in Jimp\n    this.setState({\n      scaleX: parseInt(event.target.value, 10)\n    });\n  }\n\n  onScaleFormChangeY(event) {\n    //form takes in a string, need to parse into an Int for use in Jimp\n    this.setState({\n      scaleY: parseInt(event.target.value, 10)\n    });\n  } //-------------------------------------------------------------\n  //render functions for each visible element\n  //TODO: combine everything in the same div into one render function\n  //like buttons for control panel and such\n  //-------------------------------------------------------------\n\n\n  renderLogoImage() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366\n      },\n      __self: this\n    }, React.createElement(DisplayLogoImg, {\n      picture: this.state.picture,\n      output: this.state.output,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367\n      },\n      __self: this\n    }));\n  }\n\n  renderProcessButton(i) {\n    return React.createElement(ProcessButton, {\n      onClick: this.handleProcessButtonClick,\n      imagesLoaded: this.state.imagesLoaded,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377\n      },\n      __self: this\n    });\n  }\n\n  renderSubmitButton(i) {\n    return React.createElement(SubmitButton, {\n      onClick: this.handleSubmitButtonClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386\n      },\n      __self: this\n    });\n  }\n\n  renderDownloadButton(i) {\n    return React.createElement(DownloadButton, {\n      onClick: this.handleDownloadButtonClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394\n      },\n      __self: this\n    });\n  }\n\n  renderConvertButton(i) {\n    return React.createElement(ConvertButton, {\n      onClick: this.handleConvertButtonClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402\n      },\n      __self: this\n    });\n  }\n\n  renderScaleForm(i) {\n    return React.createElement(ScaleForm, {\n      onChangeX: this.onScaleFormChangeX,\n      onChangeY: this.onScaleFormChangeY,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410\n      },\n      __self: this\n    });\n  }\n\n  renderImageUploader() {\n    return React.createElement(ImageUploader, {\n      withIcon: true,\n      buttonText: \"Choose image\",\n      label: \"Max file size: 5mb, Filetypes accepted: .bmp | .jpg | .png\",\n      fileContainerStyle: {\n        backgroundColor: \"grey\"\n      },\n      singleImage: true,\n      onChange: this.onDrop,\n      imgExtension: ['.jpg', '.gif', '.png', '.bmp'],\n      maxFileSize: 5242880,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 419\n      },\n      __self: this\n    });\n  }\n\n  renderLinkForm() {\n    return React.createElement(Linkform, {\n      onChange: this.handleLinkChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 434\n      },\n      __self: this\n    });\n  } //-------------------------------------------------------------\n  //Functions to do the actual editing on the image\n  //-------------------------------------------------------------\n\n\n  jimpConvert(path, x, y) {\n    jimp.read(path, function (err, image) {\n      image.getBase64(Jimp.AUTO, function (err, data) {\n        this.setState({\n          picture: data.replace(\"image/png\", \"image/bmp\")\n        });\n      }.bind(this));\n    }.bind(this));\n  }\n\n  jimpLogoCreation(path, posBool, pos, scale, scaleX, scaleY, grayscale, numColors) {\n    jimp.read(path, function (err, image) {\n      //create local array of colors and populate it from global\n      //TODO: Check if need to unallocate memory here\n      var localColors = new Array(54);\n\n      if (localColors[0] === undefined) {\n        for (var i = 0; i < colorsArray.length; i++) {\n          localColors[i] = colorsArray[i];\n        }\n      }\n\n      if (scale) image.resize(scaleX, scaleY);\n      if (posBool) image.posterize(pos);\n      if (grayscale) image.greyscale();\n\n      if (numColors !== undefined) {\n        localColors.length = numColors; //update colorsArray with new color order,\n        //important for removing correct colors when downsizing\n\n        for (var i = 0; i < numColors; i++) {\n          localColors[i] = colorsFreq[i][0];\n        }\n\n        console.log(\"localColors Updated: \" + localColors);\n      } //initialize getNewColor with new colorsArray\n\n\n      var getNewColor = nearestColor.from(localColors); //Function to replace colors with our palette\n\n      image.scan(0, 0, image.bitmap.width, image.bitmap.height, function (x, y, idx) {\n        //First log RGB value of current pixel, toString(16) converts\n        //into hex form, padStart for 1 digit values\n        //var position = [x, y];\n        //red\n        var red = this.bitmap.data[idx];\n        var redHex = red.toString(16).padStart(2, \"0\"); //green\n\n        var green = this.bitmap.data[idx + 1];\n        var greenHex = green.toString(16).padStart(2, \"0\"); //blue\n\n        var blue = this.bitmap.data[idx + 2];\n        var blueHex = blue.toString(16).padStart(2, \"0\"); //Run nearestColor on this pixel\n\n        var close = getNewColor('#' + redHex + greenHex + blueHex); //future timesave: Don't run this every time, only log frequency\n        //the first time you parse the image\n\n        for (var i = 0; i < colorsFreq.length; i++) {\n          if (colorsFreq[i][0] === close) colorsFreq[i][1]++;\n        }\n\n        var closeRed = parseInt(close.substr(1, 2), 16);\n        var closeGreen = parseInt(close.substr(3, 2), 16);\n        var closeBlue = parseInt(close.substr(5, 2), 16); //Change pixel colors into nearest from our palette\n        //red\n\n        this.bitmap.data[idx] = closeRed; //green\n\n        this.bitmap.data[idx + 1] = closeGreen; //blue\n\n        this.bitmap.data[idx + 2] = closeBlue;\n      }); //sort colorsFreq by frequency\n\n      colorsFreq.sort(sortFunction);\n\n      function sortFunction(a, b) {\n        if (a[1] === b[1]) {\n          return 0;\n        } else {\n          return a[1] > b[1] ? -1 : 1;\n        }\n      } //add result to output array\n\n\n      image.getBase64(Jimp.MIME_BMP, function (err, data) {\n        this.setState(prevState => ({\n          output: [...prevState.output, data],\n          imagesLoaded: prevState.imagesLoaded + 1\n        }));\n        console.log(\"image added \" + this.state.imagesLoaded);\n      }.bind(this)); //apply edited image to picture state\n\n      /*\n      image.getBase64(Jimp.MIME_BMP, function(err, data){\n        this.setState({\n          picture: data,\n        });\n      }.bind(this));\n      */\n    }.bind(this));\n  }\n\n  jimpScale(path, x, y) {\n    jimp.read(path, function (err, image) {\n      //image.scaleToFit(x,y);\n      image.getBase64(Jimp.MIME_BMP, function (err, data) {\n        this.setState(prevState => ({\n          output: [...prevState.output, data]\n        }));\n        console.log(\"image scaled\");\n      }.bind(this));\n    }.bind(this));\n  }\n\n  jimpResize(path, x, y) {\n    jimp.read(path, function (err, image) {\n      image.resize(x, y);\n      image.getBase64(Jimp.MIME_BMP, function (err, data) {\n        this.setState({\n          picture: data\n        });\n      }.bind(this));\n    }.bind(this));\n  }\n\n  jimpResizeBMP(path, x, y) {\n    jimp.read(path, function (err, image) {\n      image.resize(x, y);\n      image.getBase64(Jimp.MIME_BMP, function (err, data) {\n        this.setState({\n          bmpPicture: data\n        });\n      }.bind(this));\n    }.bind(this));\n  } //map logo onto bitmap according to preset\n  //TODO: adjust for each preset\n\n  /*\n  jimpMap(path1, path2){\n    jimp.read(this.state.bmpPicture, function(err, bmpImage) {\n      jimp.read(this.state.picture, function(err, logo) {\n        bmpImage.composite(logo, 20, 20);\n        bmpImage.getBase64(Jimp.AUTO, function(err, data){\n          this.setState({\n            bmpPicture: data,\n          });\n        }.bind(this));\n      }.bind(this));\n    }.bind(this));\n  }\n  */\n\n\n  jimpTest(path) {\n    var local;\n    jimp.read(path, function (err, image) {\n      this.local = image;\n    }.bind(this));\n    return local;\n  }\n\n  jimpPosterize(path, x) {\n    jimp.read(path, function (err, image) {\n      image.posterize(x);\n      image.getBase64(Jimp.MIME_BMP, function (err, data) {\n        this.setState({\n          picture: data\n        });\n      }.bind(this));\n    }.bind(this));\n  } //-------------------------------------------------------------\n  //Final render of the application\n  //-------------------------------------------------------------\n\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 629\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"panelDisplay\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 630\n      },\n      __self: this\n    }, this.renderLinkForm(), this.renderSubmitButton(), this.renderImageUploader(), this.renderScaleForm(), this.renderProcessButton()), React.createElement(\"div\", {\n      className: \"workDisplay\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 637\n      },\n      __self: this\n    }, this.renderLogoImage()));\n  }\n\n} //-------------------------------------------------------------\n//Overreaching App class, not nessecary at the moment but may be used later\n//-------------------------------------------------------------\n\n\nclass App extends React.Component {\n  render() {\n    return React.createElement(\"div\", {\n      className: \"app\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 652\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"app-img\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 653\n      },\n      __self: this\n    }, React.createElement(Editor, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 654\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"img-fields\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 656\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 657\n      },\n      __self: this\n    })));\n  }\n\n} //-------------------------------------------------------------\n//Final DOM render, required by React\n//-------------------------------------------------------------\n\n\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 670\n  },\n  __self: this\n}), document.getElementById('root'));","map":{"version":3,"sources":["/Users/zakstratton/Documents/logo-processor/src/index.js"],"names":["React","ReactDOM","ImageUploader","Jimp","jimp","require","colors","black","onyx","charcoal","concrete","quicksilver","bleach","rich_brown","mushroom","sand","natural","navy","ultramarine","lagoon","cerulean","cornflower","cyan","peacock","aruba","lake","seafoam","reef","teal","pine","kelly","jade","turf","lime","goldenrod","yellow","sunflower","carmel","clementine","living_coral","persimmon","red_orange","red","burnt_orange","rust","maroon","deep_pink","hibiscus","blush","peach","lavender","iris","purple","royal_purple","moose","violet","green_apple","carrot","lapis","parrot","french_blue","colorsFreq","Array","colorsArray","i","length","Object","values","nearestColor","from","src","DisplayLogoImg","Component","render","state","output","undefined","props","Linkform","onChange","ScaleForm","onChangeX","onChangeY","ProcessButton","onClick","imagesLoaded","SubmitButton","DownloadButton","ConvertButton","Editor","constructor","handleProcessButtonClick","jimpLogoCreation","scaleX","scaleY","handleConvertButtonClick","console","log","handleSubmitButtonClick","setState","dropboxLink","handleDownloadButtonClick","handleLinkChange","target","value","slice","picture","myRef","createRef","onDrop","bind","jimpScale","jimpResize","jimpTest","onScaleFormChangeX","onScaleFormChangeY","componentDidUpdate","prevProps","prevState","localImg","URL","createObjectURL","event","parseInt","renderLogoImage","renderProcessButton","renderSubmitButton","renderDownloadButton","renderConvertButton","renderScaleForm","renderImageUploader","backgroundColor","renderLinkForm","jimpConvert","path","x","y","read","err","image","getBase64","AUTO","data","replace","posBool","pos","scale","grayscale","numColors","localColors","resize","posterize","greyscale","getNewColor","scan","bitmap","width","height","idx","redHex","toString","padStart","green","greenHex","blue","blueHex","close","closeRed","substr","closeGreen","closeBlue","sort","sortFunction","a","b","MIME_BMP","jimpResizeBMP","bmpPicture","local","jimpPosterize","App","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.css';\n//import './style/_buttons.scss';\nimport ImageUploader from 'react-images-upload';\nimport Jimp from 'jimp/es';\n\nvar jimp = require('jimp');\n\n\n//Three global color data structures, one a map of objects, one an array,\n//and one a 2D array\n//TODO: Downscale to remove map of objects, unneeded\nvar colors = {\n  black: '#000000',\n  onyx: '#333538',\n  charcoal: '#5f6468',\n  concrete: '#97a0a7',\n  quicksilver: '#e4e5e6',\n  bleach: '#ffffff',\n  rich_brown: '#372820',\n  mushroom: '#716257',\n  sand: '#bab3a0',\n  natural: '#f9f4ec',\n  navy: '#081e2c',\n  ultramarine: '#29217d',\n  lagoon: '#003e66',\n  cerulean: '#0169ca',\n  cornflower: '#529afc',\n  cyan: '#009ff1',\n  peacock: '#01aec9',\n  aruba: '#9dfbe7',\n  lake: '#6ac4dd',\n  seafoam: '#4ca696',\n  reef: '#00947d',\n  teal: '#007171',\n  pine: '#2b4423',\n  kelly: '#21772f',\n  jade: '#14b25a',\n  turf: '#60933b',\n  lime: '#a0ce3e',\n  goldenrod: '#d5d03a',\n  yellow: '#fff71b',\n  sunflower: '#ffc938',\n  carmel: '#d8a15e',\n  clementine: '#ff9a23',\n  living_coral: '#fb686d',\n  persimmon: '#fd5130',\n  red_orange: '#db1d3c',\n  red: '#c50f2d',\n  burnt_orange: '#a84c28',\n  rust: '#763742',\n  maroon: '#581c32',\n  deep_pink: '#c40876',\n  hibiscus: '#de4b9b',\n  blush: '#fdaeca',\n  peach: '#f7bfab',\n  lavender: '#a08dd6',\n  iris: '#77479f',\n  purple: '#5d1e5c',\n  royal_purple: '#401e72',\n  moose: '#653c2c',\n  violet: '#6753b2',\n  green_apple: '#76c727',\n  carrot: '#fd673e',\n  lapis: '#3c2f8f',\n  parrot: '#2fd078',\n  french_blue: '#638ee4',\n};\n\n//TODO: Move initialization of arrays to seperate function\nvar colorsFreq = new Array(54);\nvar colorsArray = new Array(54);\n\n//Initialize colorsArray\n//load only hex values of colors into an array\nfor (var i = 0; i < colorsArray.length; i++){\n  colorsArray[i] = Object.values(colors)[i];\n}\n\n//make colorsFreq into a 2D array\nfor (var i = 0; i < colorsFreq.length; i++){\n  colorsFreq[i] = new Array(2);\n}\n\n//Initialize colorsFreq\n//copy array into new 2d array, starting with 0 for all frequencies\nfor (var i = 0; i < colorsFreq.length; i++){\n  colorsFreq[i][0] = colorsArray[i];\n  colorsFreq[i][1] = 0;\n}\n\nvar nearestColor = require('nearest-color').from(colors);\n\n//initialize the default image\nconst src = require(\"./test2.jpg\");\n//janky way around CORS policy for getting from dropbox link, pass through cors-anywhere server\n//var dropboxURL = \"0\"\n//var imgFinal = (\"https://cors-anywhere.herokuapp.com/\" + dropboxURL.slice(0, -1) + \"1\");\n\n//-------------------------------------------------------------\n//Main classes for displaying the output image array\n//-------------------------------------------------------------\nclass DisplayLogoImg extends React.Component{\n  render(){\n    if (this.state.output[0] !== undefined)\n    return(\n      <div className=\"workDisplay\">\n        <div className=\"gallery\">\n        Source\n          <img className=\"workImage\" src={this.props.output[0]} alt=\"Source\" />\n        </div>\n        <div className=\"gallery\">\n        Results\n          <img className=\"workImage\" src={this.props.output[1]} alt=\"Result #1\" />\n          <img className=\"workImage\" src={this.props.output[2]} alt=\"Result #2\" />\n          {/*\n          <img className=\"workImage\" src={this.props.output[2]} alt=\"Result #3\" />\n          <img className=\"workImage\" src={this.props.output[3]} alt=\"Result #4\" />\n          <img className=\"workImage\" src={this.props.output[4]} alt=\"Result #5\" />\n          <img className=\"workImage\" src={this.props.output[5]} alt=\"Result #6\" />\n          <img className=\"workImage\" src={this.props.output[6]} alt=\"Result #7\" />\n          <img className=\"workImage\" src={this.props.output[7]} alt=\"Result #8\" />\n          <img className=\"workImage\" src={this.props.output[8]} alt=\"Result #9\" />\n          <img className=\"workImage\" src={this.props.output[9]} alt=\"Result #10\" />\n          <img className=\"workImage\" src={this.props.output[10]} alt=\"Result #11\" />\n          <img className=\"workImage\" src={this.props.output[11]} alt=\"Result #12\" />\n          <img className=\"workImage\" src={this.props.output[12]} alt=\"Result #13\" />\n          <img className=\"workImage\" src={this.props.output[13]} alt=\"Result #14\" />\n          <img className=\"workImage\" src={this.props.output[14]} alt=\"Result #15\" />\n          <img className=\"workImage\" src={this.props.output[15]} alt=\"Result #16\" />\n          <img className=\"workImage\" src={this.props.output[16]} alt=\"Result #17\" />\n          <img className=\"workImage\" src={this.props.output[17]} alt=\"Result #18\" />\n          <img className=\"workImage\" src={this.props.output[18]} alt=\"Result #19\" />\n          */}\n        </div>\n        {/*\n        <div className=\"gallery\">\n        Scale : Color Correction\n          <img className=\"workImage\" src={this.props.output[1]} alt=\"Result #1\" />\n        </div>\n        <div className=\"gallery\">\n        Scale : Greyscale : Color Correction\n          <img className=\"workImage\" src={this.props.output[2]} alt=\"Result #2\" />\n        </div>\n        <div className=\"gallery\">\n        Scale : Posterize : Color Correction\n          <img className=\"workImage\" src={this.props.output[3]} alt=\"Result #3\" />\n          <img className=\"workImage\" src={this.props.output[4]} alt=\"Result #4\" />\n          <img className=\"workImage\" src={this.props.output[5]} alt=\"Result #5\" />\n          <img className=\"workImage\" src={this.props.output[6]} alt=\"Result #6\" />\n        </div>\n        <div className=\"gallery\">\n        Scale : Color Correction (Reduction)\n          <img className=\"workImage\" src={this.props.output[7]} alt=\"Result #7\" />\n          <img className=\"workImage\" src={this.props.output[8]} alt=\"Result #8\" />\n          <img className=\"workImage\" src={this.props.output[9]} alt=\"Result #9\" />\n          <img className=\"workImage\" src={this.props.output[10]} alt=\"Result #10\" />\n        </div>\n        <div className=\"gallery\">\n        Scale : Posterize : Color Correction (Reduction)\n          <img className=\"workImage\" src={this.props.output[11]} alt=\"Result #11\" />\n          <img className=\"workImage\" src={this.props.output[12]} alt=\"Result #12\" />\n          <img className=\"workImage\" src={this.props.output[13]} alt=\"Result #13\" />\n          <img className=\"workImage\" src={this.props.output[14]} alt=\"Result #14\" />\n        </div>\n        */}\n      </div>\n    )\n  }\n}\n\n//-------------------------------------------------------------\n//Custom classes for each button, passes state up\n//TODO:   Merge all of one type into a single class? [buttons, forms, etc]\n//        Transfer classes into seperate file and import it\n//-------------------------------------------------------------\n\nclass Linkform extends React.Component {\n  render() {\n    return (\n      <form className=\"myForm\">\n        <label>\n          Dropbox Link:\n          <input type=\"text\" onChange={this.props.onChange}/>\n        </label>\n      </form>\n    );\n  }\n}\n\nclass ScaleForm extends React.Component{\n  render(){\n    return(\n      <form className=\"myForm\">\n        <label>\n          Resize X:\n          <input type=\"number\" onChange={this.props.onChangeX} />\n        </label>\n        <label>\n          Resize Y:\n          <input type=\"number\" onChange={this.props.onChangeY} />\n        </label>\n      </form>\n    )\n  }\n}\n\n//TODO: Change hardcoded max images to variable\nclass ProcessButton extends React.Component{\n  render(){\n    return(\n      <div>\n        <button className=\"myButton\" onClick={() => this.props.onClick()}>Process Logo</button>\n        Loaded {this.props.imagesLoaded}/14 images\n      </div>\n    )\n  }\n}\n\nclass SubmitButton extends React.Component{\n  render(){\n    return(\n      <button className=\"myButton\" onClick={() => this.props.onClick()}>Submit Link</button>\n    )\n  }\n}\n\nclass DownloadButton extends React.Component{\n  render(){\n    return(\n      <button onClick={() => this.props.onClick()}>Download BMP</button>\n    )\n  }\n}\n\nclass ConvertButton extends React.Component{\n  render(){\n    return(\n      <button onClick={() => this.props.onClick()}>Debug v2</button>\n    )\n  }\n}\n\n//-------------------------------------------------------------\n//Main editor app class, contains most info in state\n//-------------------------------------------------------------\nclass Editor extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      //value that holds the path to default image, then the base64 data of render\n      //base64 used by Jimp, since it is a web-based app. Local files caused issues.\n      picture: src,\n      //Array of output pictures\n      output: [],\n      dropboxLink: \"\",\n      scaleX: 150,\n      scaleY: 150,\n      imagesLoaded: 0,\n    };\n    this.myRef = React.createRef();\n    //TODO: Bind these functions in their declaration, similar to handleX functions\n    this.onDrop = this.onDrop.bind(this);\n    this.jimpScale = this.jimpScale.bind(this);\n    this.jimpResize = this.jimpResize.bind(this);\n    this.jimpTest = this.jimpTest.bind(this);\n    this.onScaleFormChangeX = this.onScaleFormChangeX.bind(this);\n    this.onScaleFormChangeY = this.onScaleFormChangeY.bind(this);\n  }\n\n  componentDidUpdate(prevProps, prevState){\n    if (prevState.output !== this.state.output){\n      console.log(\"output state has changed: \" + this.state.output[0]);\n    }\n  }\n\n  //-------------------------------------------------------------\n  //Functions to handle events when different buttons are clicked\n  //or values are changed\n  //-------------------------------------------------------------\n  handleProcessButtonClick = () => {\n      //Format: posterize[bool], posterize value, scale[bool], scaleX, scaleY, greyscale[bool], numColors\n      //TODO: format better, into a function or something\n      //      these function calls end up being \"jumbled\", i think due to the async setState,\n      //      so it is difficult to know which is what output in the array\n      //Scale : Color Correction\n      this.jimpLogoCreation(this.state.output[0], false, 0, true, this.state.scaleX, this.state.scaleY);\n      //Scale : Greyscale : Color Correction\n      this.jimpLogoCreation(this.state.output[0], false, 0, true, this.state.scaleX, this.state.scaleY, true);\n      //Scale : Posterize : Color Correction\n      this.jimpLogoCreation(this.state.output[0], true, 7, true, this.state.scaleX, this.state.scaleY);\n      this.jimpLogoCreation(this.state.output[0], true, 5, true, this.state.scaleX, this.state.scaleY);\n      this.jimpLogoCreation(this.state.output[0], true, 3, true, this.state.scaleX, this.state.scaleY);\n      this.jimpLogoCreation(this.state.output[0], true, 2, true, this.state.scaleX, this.state.scaleY);\n      //Scale : Color Correction (Reduction)\n      this.jimpLogoCreation(this.state.output[0], false, 0, true, this.state.scaleX, this.state.scaleY, false, 5);\n      this.jimpLogoCreation(this.state.output[0], false, 0, true, this.state.scaleX, this.state.scaleY, false, 4);\n      this.jimpLogoCreation(this.state.output[0], false, 0, true, this.state.scaleX, this.state.scaleY, false, 3);\n      this.jimpLogoCreation(this.state.output[0], false, 0, true, this.state.scaleX, this.state.scaleY, false, 2);\n      //Scale : Posterize : Color Correction (Reduction)\n      this.jimpLogoCreation(this.state.output[0], true, 7, true, this.state.scaleX, this.state.scaleY, false, 5);\n      this.jimpLogoCreation(this.state.output[0], true, 5, true, this.state.scaleX, this.state.scaleY, false, 4);\n      this.jimpLogoCreation(this.state.output[0], true, 3, true, this.state.scaleX, this.state.scaleY, false, 3);\n      this.jimpLogoCreation(this.state.output[0], true, 2, true, this.state.scaleX, this.state.scaleY, false, 2);\n  }\n\n  handleConvertButtonClick = (i) => {\n    //NOTE - THIS RETURNS THE VALUE, NO NEED FOR .VALUE\n    console.log(colorsArray);\n    console.log(colorsFreq);\n\n  }\n\n  handleSubmitButtonClick = (i) => {\n    console.log(\"Submit Button Clicked\");\n    this.setState({\n      output: [this.state.dropboxLink],\n    });\n  }\n\n  handleDownloadButtonClick = (i) => {\n    console.log(\"Download Button Clicked\");\n  }\n\n  handleLinkChange = (i) => {\n    this.setState({\n      dropboxLink: \"https://cors-anywhere.herokuapp.com/\" + i.target.value.slice(0, -1) + \"1\",\n    });\n  }\n\n  //picture is an array passed from image uploader\n  //pull most recently uploaded picture from current session\n  //TODO: reformat these functions into handleDrop and handleLinkChange\n  onDrop(picture){\n    //TODO: Insert function calls directly here to auto work on image\n    var localImg = URL.createObjectURL(picture[picture.length - 1]);\n    //Set state for display\n    this.setState({\n      output: [URL.createObjectURL(picture[picture.length - 1])],\n    });\n  }\n\n  onScaleFormChangeX(event){\n    //form takes in a string, need to parse into an Int for use in Jimp\n    this.setState({\n      scaleX: parseInt(event.target.value, 10)\n    });\n  }\n\n  onScaleFormChangeY(event){\n    //form takes in a string, need to parse into an Int for use in Jimp\n    this.setState({\n      scaleY: parseInt(event.target.value, 10)\n    });\n  }\n\n  //-------------------------------------------------------------\n  //render functions for each visible element\n  //TODO: combine everything in the same div into one render function\n  //like buttons for control panel and such\n  //-------------------------------------------------------------\n\n  renderLogoImage(){\n    return (\n      <div>\n        <DisplayLogoImg\n          picture={this.state.picture}\n          output={this.state.output}\n        />\n      </div>\n    )\n  }\n\n  renderProcessButton(i){\n    return(\n      <ProcessButton\n        onClick={this.handleProcessButtonClick}\n        imagesLoaded={this.state.imagesLoaded}\n      />\n    )\n  }\n\n  renderSubmitButton(i){\n    return(\n      <SubmitButton\n        onClick={this.handleSubmitButtonClick}\n      />\n    )\n  }\n\n  renderDownloadButton(i){\n    return(\n      <DownloadButton\n        onClick={this.handleDownloadButtonClick}\n      />\n    )\n  }\n\n  renderConvertButton(i){\n    return(\n      <ConvertButton\n        onClick={this.handleConvertButtonClick}\n      />\n    )\n  }\n\n  renderScaleForm(i){\n    return(\n      <ScaleForm\n        onChangeX={this.onScaleFormChangeX}\n        onChangeY={this.onScaleFormChangeY}\n      />\n    )\n  }\n\n  renderImageUploader(){\n    return(\n      <ImageUploader\n        withIcon={true}\n        buttonText='Choose image'\n        label=\"Max file size: 5mb, Filetypes accepted: .bmp | .jpg | .png\"\n        fileContainerStyle={{backgroundColor: \"grey\"}}\n        singleImage={true}\n        onChange={this.onDrop}\n        imgExtension={['.jpg', '.gif', '.png', '.bmp']}\n        maxFileSize={5242880}\n      />\n    )\n  }\n\n  renderLinkForm(){\n    return(\n      <Linkform onChange={this.handleLinkChange}/>\n    )\n  }\n\n\n  //-------------------------------------------------------------\n  //Functions to do the actual editing on the image\n  //-------------------------------------------------------------\n  jimpConvert(path, x, y){\n    jimp.read(path, function(err, image) {\n      image.getBase64(Jimp.AUTO, function(err, data){\n        this.setState({\n          picture: data.replace(\"image/png\", \"image/bmp\"),\n        });\n      }.bind(this));\n    }.bind(this));\n  }\n\n\n  jimpLogoCreation(path, posBool, pos, scale, scaleX, scaleY, grayscale, numColors){\n    jimp.read(path, function(err, image) {\n      //create local array of colors and populate it from global\n      //TODO: Check if need to unallocate memory here\n      var localColors = new Array(54);\n      if (localColors[0] === undefined){\n        for (var i = 0; i < colorsArray.length; i++){\n          localColors[i] = colorsArray[i];\n        }\n      }\n\n      if (scale)\n        image.resize(scaleX, scaleY);\n      if (posBool)\n        image.posterize(pos);\n      if (grayscale)\n        image.greyscale();\n      if (numColors !== undefined){\n        localColors.length = numColors;\n        //update colorsArray with new color order,\n        //important for removing correct colors when downsizing\n        for (var i = 0; i < numColors; i++){\n          localColors[i] = colorsFreq[i][0];\n        }\n        console.log(\"localColors Updated: \" + localColors);\n      }\n\n      //initialize getNewColor with new colorsArray\n      var getNewColor = nearestColor.from(localColors);\n      //Function to replace colors with our palette\n      image.scan(0, 0, image.bitmap.width, image.bitmap.height, function(x, y, idx) {\n        //First log RGB value of current pixel, toString(16) converts\n        //into hex form, padStart for 1 digit values\n        //var position = [x, y];\n        //red\n        var red = this.bitmap.data[idx];\n        var redHex = red.toString(16).padStart(2, \"0\");\n        //green\n        var green = this.bitmap.data[idx + 1];\n        var greenHex = green.toString(16).padStart(2, \"0\");\n        //blue\n        var blue = this.bitmap.data[idx + 2];\n        var blueHex = blue.toString(16).padStart(2, \"0\");\n\n        //Run nearestColor on this pixel\n        var close = getNewColor('#' + redHex + greenHex + blueHex);\n\n        //future timesave: Don't run this every time, only log frequency\n        //the first time you parse the image\n        for (var i = 0; i < colorsFreq.length; i++){\n          if (colorsFreq[i][0] === close)\n            colorsFreq[i][1]++;\n        }\n\n        var closeRed = parseInt(close.substr(1,2), 16);\n        var closeGreen = parseInt(close.substr(3,2), 16);\n        var closeBlue = parseInt(close.substr(5,2), 16);\n\n        //Change pixel colors into nearest from our palette\n        //red\n        this.bitmap.data[idx] = closeRed;\n        //green\n        this.bitmap.data[idx + 1] = closeGreen;\n        //blue\n        this.bitmap.data[idx + 2] = closeBlue;\n      })\n\n      //sort colorsFreq by frequency\n      colorsFreq.sort(sortFunction);\n      function sortFunction(a, b){\n        if (a[1] === b[1]) {\n          return 0;\n        }\n        else {\n          return (a[1] > b[1]) ? -1 : 1;\n        }\n      }\n\n      //add result to output array\n      image.getBase64(Jimp.MIME_BMP, function(err, data){\n        this.setState(prevState => ({\n          output: [...prevState.output, data],\n          imagesLoaded: prevState.imagesLoaded + 1,\n        }))\n        console.log(\"image added \" + this.state.imagesLoaded);\n      }.bind(this));\n\n      //apply edited image to picture state\n      /*\n      image.getBase64(Jimp.MIME_BMP, function(err, data){\n        this.setState({\n          picture: data,\n        });\n      }.bind(this));\n      */\n\n\n    }.bind(this));\n  }\n\n  jimpScale(path, x, y){\n    jimp.read(path, function(err, image) {\n      //image.scaleToFit(x,y);\n      image.getBase64(Jimp.MIME_BMP, function(err, data){\n        this.setState(prevState => ({\n          output: [...prevState.output, data]\n        }))\n        console.log(\"image scaled\");\n      }.bind(this));\n    }.bind(this));\n  }\n\n  jimpResize(path, x, y){\n    jimp.read(path, function(err, image) {\n      image.resize(x,y);\n      image.getBase64(Jimp.MIME_BMP, function(err, data){\n        this.setState({\n          picture: data,\n        });\n      }.bind(this));\n    }.bind(this));\n  }\n\n  jimpResizeBMP(path, x, y){\n    jimp.read(path, function(err, image) {\n      image.resize(x,y);\n      image.getBase64(Jimp.MIME_BMP, function(err, data){\n        this.setState({\n          bmpPicture: data,\n        });\n      }.bind(this));\n    }.bind(this));\n  }\n\n  //map logo onto bitmap according to preset\n  //TODO: adjust for each preset\n\n  /*\n  jimpMap(path1, path2){\n    jimp.read(this.state.bmpPicture, function(err, bmpImage) {\n      jimp.read(this.state.picture, function(err, logo) {\n        bmpImage.composite(logo, 20, 20);\n        bmpImage.getBase64(Jimp.AUTO, function(err, data){\n          this.setState({\n            bmpPicture: data,\n          });\n        }.bind(this));\n      }.bind(this));\n    }.bind(this));\n  }\n  */\n\n  jimpTest(path){\n    var local;\n    jimp.read(path, function(err, image) {\n      this.local = image;\n    }.bind(this));\n    return local;\n  }\n\n  jimpPosterize(path, x){\n    jimp.read(path, function(err, image) {\n      image.posterize(x);\n      image.getBase64(Jimp.MIME_BMP, function(err, data){\n        this.setState({\n          picture: data,\n        });\n      }.bind(this));\n    }.bind(this));\n  }\n\n  //-------------------------------------------------------------\n  //Final render of the application\n  //-------------------------------------------------------------\n  render() {\n    return (\n      <div>\n        <div className=\"panelDisplay\">\n          {this.renderLinkForm()}\n          {this.renderSubmitButton()}\n          {this.renderImageUploader()}\n          {this.renderScaleForm()}\n          {this.renderProcessButton()}\n        </div>\n        <div className=\"workDisplay\">\n          {this.renderLogoImage()}\n        </div>\n      </div>\n    );\n  }\n}\n\n\n//-------------------------------------------------------------\n//Overreaching App class, not nessecary at the moment but may be used later\n//-------------------------------------------------------------\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"app-img\">\n          <Editor />\n        </div>\n        <div className=\"img-fields\">\n          <div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n\n//-------------------------------------------------------------\n//Final DOM render, required by React\n//-------------------------------------------------------------\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"]},"metadata":{},"sourceType":"module"}